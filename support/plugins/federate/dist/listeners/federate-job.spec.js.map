{"version":3,"file":"federate-job.spec.js","sourceRoot":"","sources":["../../src/listeners/federate-job.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { FlatfileListener } from \"@flatfile/listener\";\nimport api from \"@flatfile/api\";\nimport { createFederateJobListener } from \"./federate-job\";\nimport { FederatedSheetManager } from \"../utils/federation/federated_sheet_manager\";\nimport { FederateConfig } from \"../types\";\n\n// Define proper types for mock data\ninterface MockRecord {\n  id: string;\n  values: Record<string, { value: string | undefined }>;\n}\n\ninterface JobEvent {\n  context: {\n    jobId: string;\n    workbookId: string;\n    spaceId: string;\n  };\n}\n\ninterface MockListener {\n  on: jest.Mock;\n  callback?: (event: JobEvent) => Promise<void>;\n}\n\n// Mock dependencies\njest.mock(\"@flatfile/api\", () => ({\n  jobs: {\n    ack: jest.fn().mockResolvedValue({}),\n    complete: jest.fn().mockResolvedValue({}),\n    fail: jest.fn().mockResolvedValue({})\n  },\n  workbooks: {\n    get: jest.fn(),\n    list: jest.fn(),\n    delete: jest.fn().mockResolvedValue({}),\n    create: jest.fn()\n  },\n  records: {\n    get: jest.fn(),\n    insert: jest.fn().mockResolvedValue({})\n  }\n}));\n\n// Mock logging functions\njest.mock(\"@flatfile/util-common\", () => ({\n  logError: jest.fn(),\n  logInfo: jest.fn(),\n  logWarn: jest.fn()\n}));\n\n// Mock FederatedSheetManager\njest.mock(\"../utils/federation/federated_sheet_manager\");\n\n// Helper function to create test records\nconst createTestRecord = (id: string, values: Record<string, string>): MockRecord => ({\n  id,\n  values: Object.entries(values).reduce((acc, [key, value]) => ({\n    ...acc,\n    [key]: { value }\n  }), {})\n});\n\ndescribe(\"createFederateJobListener\", () => {\n  let mockListener: MockListener;\n  let mockEvent: JobEvent;\n  let mockConfig: FederateConfig;\n  \n  // Mock implementations for FederatedSheetManager methods\n  let mockHasSourceSheet: jest.Mock;\n  let mockClearMappings: jest.Mock;\n  let mockCreateMappings: jest.Mock;\n  let mockAddRecords: jest.Mock;\n  let mockGetRecords: jest.Mock;\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Create mock implementations for FederatedSheetManager methods\n    mockHasSourceSheet = jest.fn().mockReturnValue(true);\n    mockClearMappings = jest.fn();\n    mockCreateMappings = jest.fn();\n    mockAddRecords = jest.fn();\n    mockGetRecords = jest.fn().mockReturnValue(new Map([[\"sheet-id-1\", [createTestRecord(\"1\", { foo: \"bar\" })]]]));\n    \n    // Setup FederatedSheetManager mock\n    (FederatedSheetManager as jest.Mock).mockImplementation(() => {\n      return {\n        hasSourceSheet: mockHasSourceSheet,\n        clearMappings: mockClearMappings,\n        createMappings: mockCreateMappings,\n        addRecords: mockAddRecords,\n        getRecords: mockGetRecords,\n      };\n    });\n    \n    // Setup basic mocks\n    mockListener = {\n      on: jest.fn().mockImplementation((event, filter, callback) => {\n        if (event === \"job:ready\") {\n          mockListener.callback = callback;\n        }\n        return mockListener;\n      })\n    };\n    \n    mockEvent = {\n      context: {\n        jobId: \"job123\",\n        workbookId: \"workbook123\",\n        spaceId: \"space123\"\n      }\n    };\n    \n    // Setup basic config\n    mockConfig = {\n      source_workbook_name: \"Source Workbook\",\n      federated_workbook: {\n        name: \"Federated Workbook\",\n        sheets: [\n          {\n            name: \"Sheet 1\",\n            slug: \"sheet1\",\n            fields: []\n          }\n        ]\n      }\n    } as FederateConfig;\n  });\n  \n  it(\"should register a job:ready listener with the correct filter\", () => {\n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    \n    expect(mockListener.on).toHaveBeenCalledWith(\n      \"job:ready\",\n      { job: \"workbook:federate\" },\n      expect.any(Function)\n    );\n  });\n  \n  it(\"should acknowledge the job and set initial progress\", async () => {\n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    expect(api.jobs.ack).toHaveBeenCalledWith(\n      \"job123\",\n      { progress: 0, info: \"Starting federation\" }\n    );\n  });\n  \n  it(\"should handle successful federation process\", async () => {\n    // Set up workbook response\n    const mockSourceWorkbook = {\n      sheets: [\n        { id: \"source-sheet-1\", slug: \"source1\" }\n      ]\n    };\n    \n    const mockNewWorkbook = {\n      id: \"new-workbook-1\",\n      sheets: [\n        { id: \"target-sheet-1\", slug: \"sheet1\" }\n      ]\n    };\n    \n    const mockRecords = {\n      data: {\n        records: [{ id: \"record1\", values: { field1: \"value1\" } }]\n      }\n    };\n    \n    (api.workbooks.get as jest.Mock).mockResolvedValue({ data: mockSourceWorkbook });\n    (api.workbooks.list as jest.Mock).mockResolvedValue({ data: [] });\n    (api.workbooks.create as jest.Mock).mockResolvedValue({ data: mockNewWorkbook });\n    (api.records.get as jest.Mock).mockResolvedValue(mockRecords);\n    \n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // Verify the workflow\n    expect(api.workbooks.get).toHaveBeenCalledWith(\"workbook123\");\n    expect(mockHasSourceSheet).toHaveBeenCalledWith(\"source1\");\n    expect(api.workbooks.list).toHaveBeenCalledWith({ \n      spaceId: \"space123\", \n      name: \"Federated Workbook\" \n    });\n    expect(api.workbooks.create).toHaveBeenCalledWith({\n      ...mockConfig.federated_workbook,\n      spaceId: \"space123\"\n    });\n    expect(mockClearMappings).toHaveBeenCalled();\n    expect(mockCreateMappings).toHaveBeenCalledWith(\n      mockConfig.federated_workbook.sheets[0],\n      mockNewWorkbook.sheets[0]\n    );\n    expect(api.records.get).toHaveBeenCalledWith(\"source-sheet-1\");\n    expect(mockAddRecords).toHaveBeenCalledWith(\"source1\", mockRecords.data.records);\n    expect(mockGetRecords).toHaveBeenCalled();\n    expect(api.records.insert).toHaveBeenCalledWith(\"sheet-id-1\", [{\n      id: \"1\",\n      values: {\n        foo: { value: \"bar\" }\n      }\n    }]);\n    expect(api.jobs.complete).toHaveBeenCalledWith(\n      \"job123\", \n      { outcome: { message: \"Federation complete\" } }\n    );\n  });\n  \n  it(\"should remove existing federated workbooks if found\", async () => {\n    // Mock existing workbooks with same name\n    const existingWorkbooks = [\n      { id: \"existing-wb-1\" },\n      { id: \"existing-wb-2\" }\n    ];\n    \n    const mockSourceWorkbook = {\n      sheets: [\n        { id: \"source-sheet-1\", slug: \"source1\" }\n      ]\n    };\n    \n    const mockNewWorkbook = {\n      id: \"new-workbook-1\",\n      sheets: [\n        { id: \"target-sheet-1\", slug: \"sheet1\" }\n      ]\n    };\n    \n    (api.workbooks.get as jest.Mock).mockResolvedValue({ data: mockSourceWorkbook });\n    (api.workbooks.list as jest.Mock).mockResolvedValue({ data: existingWorkbooks });\n    (api.workbooks.create as jest.Mock).mockResolvedValue({ data: mockNewWorkbook });\n    (api.records.get as jest.Mock).mockResolvedValue({ data: { records: [] } });\n    \n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // Verify existing workbooks were deleted\n    expect(api.workbooks.delete).toHaveBeenCalledTimes(2);\n    expect(api.workbooks.delete).toHaveBeenCalledWith(\"existing-wb-1\");\n    expect(api.workbooks.delete).toHaveBeenCalledWith(\"existing-wb-2\");\n  });\n  \n  it(\"should fail the job when no source sheets are found\", async () => {\n    // Mock an empty workbook response\n    (api.workbooks.get as jest.Mock).mockResolvedValue({ \n      data: { sheets: [] } \n    });\n    \n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // Should fail with appropriate message\n    expect(api.jobs.fail).toHaveBeenCalledWith(\n      \"job123\",\n      {\n        info: \"No source sheets found\",\n        outcome: { acknowledge: true, message: \"No source sheets found\" }\n      }\n    );\n  });\n  \n  it(\"should mark any sheet as not a source sheet\", async () => {\n    // Mock hasSourceSheet to return false\n    mockHasSourceSheet.mockReturnValue(false);\n    \n    const mockSourceWorkbook = {\n      sheets: [\n        { id: \"source-sheet-1\", slug: \"source1\" }\n      ]\n    };\n    \n    (api.workbooks.get as jest.Mock).mockResolvedValue({ data: mockSourceWorkbook });\n    \n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // Should fail with appropriate message\n    expect(api.jobs.fail).toHaveBeenCalledWith(\n      \"job123\",\n      {\n        info: \"No source sheets found\",\n        outcome: { acknowledge: true, message: \"No source sheets found\" }\n      }\n    );\n  });\n  \n  it(\"should handle errors during federation process\", async () => {\n    // Force an error\n    const testError = new Error(\"Test federation error\");\n    (api.workbooks.get as jest.Mock).mockRejectedValue(testError);\n    \n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // Should fail with error message\n    expect(api.jobs.fail).toHaveBeenCalledWith(\n      \"job123\",\n      {\n        info: \"Test federation error\",\n        outcome: { acknowledge: true, message: \"Test federation error\" }\n      }\n    );\n  });\n  \n  it(\"should skip record insertion for empty record sets\", async () => {\n    // Set up workbook response with empty records\n    const mockSourceWorkbook = {\n      sheets: [\n        { id: \"source-sheet-1\", slug: \"source1\" }\n      ]\n    };\n    \n    const mockNewWorkbook = {\n      id: \"new-workbook-1\",\n      sheets: [\n        { id: \"target-sheet-1\", slug: \"sheet1\" }\n      ]\n    };\n    \n    // Mock empty records\n    mockGetRecords.mockReturnValue(new Map([[\"sheet-id-1\", []]]));\n    \n    (api.workbooks.get as jest.Mock).mockResolvedValue({ data: mockSourceWorkbook });\n    (api.workbooks.list as jest.Mock).mockResolvedValue({ data: [] });\n    (api.workbooks.create as jest.Mock).mockResolvedValue({ data: mockNewWorkbook });\n    (api.records.get as jest.Mock).mockResolvedValue({ data: { records: [] } });\n    \n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // Should not call insert for empty record sets\n    expect(api.records.insert).not.toHaveBeenCalled();\n    expect(api.jobs.complete).toHaveBeenCalledWith(\n      \"job123\", \n      { outcome: { message: \"Federation complete\" } }\n    );\n  });\n  \n  it(\"should update progress at each step of the federation process\", async () => {\n    // Set up for a successful flow\n    const mockSourceWorkbook = {\n      sheets: [\n        { id: \"source-sheet-1\", slug: \"source1\" }\n      ]\n    };\n    \n    const mockNewWorkbook = {\n      id: \"new-workbook-1\",\n      sheets: [\n        { id: \"target-sheet-1\", slug: \"sheet1\" }\n      ]\n    };\n    \n    // Reset API mocks to ensure clean call count\n    jest.clearAllMocks();\n    \n    (api.workbooks.get as jest.Mock).mockResolvedValue({ data: mockSourceWorkbook });\n    (api.workbooks.list as jest.Mock).mockResolvedValue({ data: [] });\n    (api.workbooks.create as jest.Mock).mockResolvedValue({ data: mockNewWorkbook });\n    (api.records.get as jest.Mock).mockResolvedValue({ data: { records: [] } });\n    \n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // There's an initial ack + 7 progress updates\n    expect(api.jobs.ack).toHaveBeenCalledTimes(8);\n    \n    // Initial ack\n    expect(api.jobs.ack).toHaveBeenNthCalledWith(\n      1,\n      \"job123\",\n      { progress: 0, info: \"Starting federation\" }\n    );\n    \n    // Verify the series of progress updates were called\n    expect(api.jobs.ack).toHaveBeenCalledWith(\n      \"job123\", \n      expect.objectContaining({ info: \"Retrieving source data\" })\n    );\n    \n    expect(api.jobs.ack).toHaveBeenCalledWith(\n      \"job123\",\n      expect.objectContaining({ info: \"Deleting existing federated workbooks\" })\n    );\n    \n    expect(api.jobs.ack).toHaveBeenCalledWith(\n      \"job123\",\n      expect.objectContaining({ info: \"Creating new federated workbook\" })\n    );\n    \n    expect(api.jobs.ack).toHaveBeenCalledWith(\n      \"job123\",\n      expect.objectContaining({ info: \"Setting up field mappings\" })\n    );\n    \n    expect(api.jobs.ack).toHaveBeenCalledWith(\n      \"job123\",\n      expect.objectContaining({ info: \"Processing source records\" })\n    );\n    \n    expect(api.jobs.ack).toHaveBeenCalledWith(\n      \"job123\",\n      expect.objectContaining({ info: \"Inserting records into target sheets\" })\n    );\n    \n    expect(api.jobs.ack).toHaveBeenCalledWith(\n      \"job123\",\n      expect.objectContaining({ info: \"Finalizing federation\" })\n    );\n    \n    // Final progress should approach 100%\n    const lastCall = (api.jobs.ack as jest.Mock).mock.calls.slice(-1)[0];\n    expect(lastCall[1].progress).toBeGreaterThanOrEqual(95);\n    \n    // Should complete the job\n    expect(api.jobs.complete).toHaveBeenCalledWith(\n      \"job123\", \n      { outcome: { message: \"Federation complete\" } }\n    );\n  });\n  \n  it(\"should pass correct parameters to createMappings\", async () => {\n    const mockSourceWorkbook = {\n      sheets: [\n        { id: \"source-sheet-1\", slug: \"source1\" }\n      ]\n    };\n    \n    const mockNewWorkbook = {\n      id: \"new-workbook-1\",\n      sheets: [\n        { id: \"target-sheet-1\", slug: \"sheet1\" }\n      ]\n    };\n    \n    (api.workbooks.get as jest.Mock).mockResolvedValue({ data: mockSourceWorkbook });\n    (api.workbooks.list as jest.Mock).mockResolvedValue({ data: [] });\n    (api.workbooks.create as jest.Mock).mockResolvedValue({ data: mockNewWorkbook });\n    (api.records.get as jest.Mock).mockResolvedValue({ data: { records: [] } });\n    \n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // Verify exact parameters passed to createMappings\n    expect(mockCreateMappings).toHaveBeenCalledWith(\n      mockConfig.federated_workbook.sheets[0],\n      mockNewWorkbook.sheets[0]\n    );\n  });\n  \n  it(\"should handle workbook creation failure\", async () => {\n    const mockSourceWorkbook = {\n      sheets: [\n        { id: \"source-sheet-1\", slug: \"source1\" }\n      ]\n    };\n    \n    const creationError = new Error(\"Failed to create workbook\");\n    \n    (api.workbooks.get as jest.Mock).mockResolvedValue({ data: mockSourceWorkbook });\n    (api.workbooks.list as jest.Mock).mockResolvedValue({ data: [] });\n    (api.workbooks.create as jest.Mock).mockRejectedValue(creationError);\n    \n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // Should fail with error message\n    expect(api.jobs.fail).toHaveBeenCalledWith(\n      \"job123\",\n      {\n        info: \"Failed to create workbook\",\n        outcome: { acknowledge: true, message: \"Failed to create workbook\" }\n      }\n    );\n  });\n  \n  it(\"should handle record insertion failure\", async () => {\n    const mockSourceWorkbook = {\n      sheets: [\n        { id: \"source-sheet-1\", slug: \"source1\" }\n      ]\n    };\n    \n    const mockNewWorkbook = {\n      id: \"new-workbook-1\",\n      sheets: [\n        { id: \"target-sheet-1\", slug: \"sheet1\" }\n      ]\n    };\n    \n    const mockRecords = {\n      data: {\n        records: [{ id: \"record1\", values: { field1: \"value1\" } }]\n      }\n    };\n    \n    const insertionError = new Error(\"Failed to insert records\");\n    \n    (api.workbooks.get as jest.Mock).mockResolvedValue({ data: mockSourceWorkbook });\n    (api.workbooks.list as jest.Mock).mockResolvedValue({ data: [] });\n    (api.workbooks.create as jest.Mock).mockResolvedValue({ data: mockNewWorkbook });\n    (api.records.get as jest.Mock).mockResolvedValue(mockRecords);\n    (api.records.insert as jest.Mock).mockRejectedValue(insertionError);\n    \n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // Should fail with error message\n    expect(api.jobs.fail).toHaveBeenCalledWith(\n      \"job123\",\n      {\n        info: \"Failed to insert records\",\n        outcome: { acknowledge: true, message: \"Failed to insert records\" }\n      }\n    );\n  });\n  \n  it(\"should execute operations in the correct order\", async () => {\n    const mockSourceWorkbook = {\n      sheets: [\n        { id: \"source-sheet-1\", slug: \"source1\" }\n      ]\n    };\n    \n    const mockNewWorkbook = {\n      id: \"new-workbook-1\",\n      sheets: [\n        { id: \"target-sheet-1\", slug: \"sheet1\" }\n      ]\n    };\n    \n    const mockRecords = {\n      data: {\n        records: [{ id: \"record1\", values: { field1: \"value1\" } }]\n      }\n    };\n    \n    // Create a sequence tracker\n    const sequence: string[] = [];\n    \n    // Mock API calls to track sequence\n    (api.workbooks.get as jest.Mock).mockImplementation(() => {\n      sequence.push(\"getWorkbook\");\n      return Promise.resolve({ data: mockSourceWorkbook });\n    });\n    \n    (api.workbooks.list as jest.Mock).mockImplementation(() => {\n      sequence.push(\"listWorkbooks\");\n      return Promise.resolve({ data: [] });\n    });\n    \n    (api.workbooks.create as jest.Mock).mockImplementation(() => {\n      sequence.push(\"createWorkbook\");\n      return Promise.resolve({ data: mockNewWorkbook });\n    });\n    \n    (api.records.get as jest.Mock).mockImplementation(() => {\n      sequence.push(\"getRecords\");\n      return Promise.resolve(mockRecords);\n    });\n    \n    (api.records.insert as jest.Mock).mockImplementation(() => {\n      sequence.push(\"insertRecords\");\n      return Promise.resolve({});\n    });\n    \n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // Verify the sequence of operations\n    expect(sequence).toEqual([\n      \"getWorkbook\",\n      \"listWorkbooks\",\n      \"createWorkbook\",\n      \"getRecords\",\n      \"insertRecords\"\n    ]);\n  });\n  \n  it(\"should handle malformed workbook data\", async () => {\n    // Mock a malformed workbook response (missing sheets property)\n    const malformedWorkbook = {\n      // Missing sheets property\n    };\n    \n    (api.workbooks.get as jest.Mock).mockResolvedValue({ data: malformedWorkbook });\n    \n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // Should fail with appropriate message\n    expect(api.jobs.fail).toHaveBeenCalledWith(\n      \"job123\",\n      {\n        info: \"No source sheets found\",\n        outcome: { acknowledge: true, message: \"No source sheets found\" }\n      }\n    );\n  });\n  \n  it(\"should update progress sequentially\", async () => {\n    const mockSourceWorkbook = {\n      sheets: [\n        { id: \"source-sheet-1\", slug: \"source1\" }\n      ]\n    };\n    \n    const mockNewWorkbook = {\n      id: \"new-workbook-1\",\n      sheets: [\n        { id: \"target-sheet-1\", slug: \"sheet1\" }\n      ]\n    };\n    \n    (api.workbooks.get as jest.Mock).mockResolvedValue({ data: mockSourceWorkbook });\n    (api.workbooks.list as jest.Mock).mockResolvedValue({ data: [] });\n    (api.workbooks.create as jest.Mock).mockResolvedValue({ data: mockNewWorkbook });\n    (api.records.get as jest.Mock).mockResolvedValue({ data: { records: [] } });\n    \n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // Get all progress updates\n    const progressUpdates = (api.jobs.ack as jest.Mock).mock.calls\n      .filter(call => call[0] === \"job123\")\n      .map(call => call[1].progress);\n    \n    // Verify progress increases sequentially\n    for (let i = 1; i < progressUpdates.length; i++) {\n      expect(progressUpdates[i]).toBeGreaterThan(progressUpdates[i - 1]);\n    }\n    \n    // Verify final progress is close to 100%\n    expect(progressUpdates[progressUpdates.length - 1]).toBeGreaterThanOrEqual(95);\n  });\n\n  // NEW TESTS TO IMPROVE COVERAGE\n\n  it(\"should process source records with empty records array\", async () => {\n    const mockSourceWorkbook = {\n      sheets: [\n        { id: \"source-sheet-1\", slug: \"source1\" }\n      ]\n    };\n    \n    const mockNewWorkbook = {\n      id: \"new-workbook-1\",\n      sheets: [\n        { id: \"target-sheet-1\", slug: \"sheet1\" }\n      ]\n    };\n    \n    // Mock source records response with empty records array\n    const emptyRecords = {\n      data: {\n        records: []\n      }\n    };\n    \n    (api.workbooks.get as jest.Mock).mockResolvedValue({ data: mockSourceWorkbook });\n    (api.workbooks.list as jest.Mock).mockResolvedValue({ data: [] });\n    (api.workbooks.create as jest.Mock).mockResolvedValue({ data: mockNewWorkbook });\n    (api.records.get as jest.Mock).mockResolvedValue(emptyRecords);\n    \n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // Verify addRecords was not called with empty records array\n    expect(mockAddRecords).not.toHaveBeenCalled();\n    expect(api.jobs.complete).toHaveBeenCalledWith(\n      \"job123\", \n      { outcome: { message: \"Federation complete\" } }\n    );\n  });\n\n  it(\"should process source records with undefined records property\", async () => {\n    const mockSourceWorkbook = {\n      sheets: [\n        { id: \"source-sheet-1\", slug: \"source1\" }\n      ]\n    };\n    \n    const mockNewWorkbook = {\n      id: \"new-workbook-1\",\n      sheets: [\n        { id: \"target-sheet-1\", slug: \"sheet1\" }\n      ]\n    };\n    \n    // Mock source records response with undefined records property\n    const undefinedRecords = {\n      data: {}\n    };\n    \n    (api.workbooks.get as jest.Mock).mockResolvedValue({ data: mockSourceWorkbook });\n    (api.workbooks.list as jest.Mock).mockResolvedValue({ data: [] });\n    (api.workbooks.create as jest.Mock).mockResolvedValue({ data: mockNewWorkbook });\n    (api.records.get as jest.Mock).mockResolvedValue(undefinedRecords);\n    \n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // Verify addRecords was not called with undefined records property\n    expect(mockAddRecords).not.toHaveBeenCalled();\n    expect(api.jobs.complete).toHaveBeenCalledWith(\n      \"job123\", \n      { outcome: { message: \"Federation complete\" } }\n    );\n  });\n\n  it(\"should handle initialization with debug mode enabled\", async () => {\n    // Create a config with debug enabled\n    const debugConfig = {\n      ...mockConfig,\n      debug: true\n    };\n    \n    const mockSourceWorkbook = {\n      sheets: [\n        { id: \"source-sheet-1\", slug: \"source1\" }\n      ]\n    };\n    \n    const mockNewWorkbook = {\n      id: \"new-workbook-1\",\n      sheets: [\n        { id: \"target-sheet-1\", slug: \"sheet1\" }\n      ]\n    };\n    \n    (api.workbooks.get as jest.Mock).mockResolvedValue({ data: mockSourceWorkbook });\n    (api.workbooks.list as jest.Mock).mockResolvedValue({ data: [] });\n    (api.workbooks.create as jest.Mock).mockResolvedValue({ data: mockNewWorkbook });\n    (api.records.get as jest.Mock).mockResolvedValue({ data: { records: [] } });\n    \n    // Create the listener with debug mode\n    createFederateJobListener(debugConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // Verify debug logs were called\n    const { logInfo } = require(\"@flatfile/util-common\");\n    expect(logInfo).toHaveBeenCalled();\n    \n    // Verify the job was still completed successfully\n    expect(api.jobs.complete).toHaveBeenCalledWith(\n      \"job123\", \n      { outcome: { message: \"Federation complete\" } }\n    );\n  });\n\n  it(\"should handle debug mode when handling errors\", async () => {\n    // Create a config with debug enabled\n    const debugConfig = {\n      ...mockConfig,\n      debug: true\n    };\n    \n    // Force an error\n    const testError = new Error(\"Test federation error\");\n    (api.workbooks.get as jest.Mock).mockRejectedValue(testError);\n    \n    createFederateJobListener(debugConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // Verify error logs were called\n    const { logError } = require(\"@flatfile/util-common\");\n    expect(logError).toHaveBeenCalled();\n    \n    // Should still fail with error message\n    expect(api.jobs.fail).toHaveBeenCalledWith(\n      \"job123\",\n      {\n        info: \"Test federation error\",\n        outcome: { acknowledge: true, message: \"Test federation error\" }\n      }\n    );\n  });\n\n  it(\"should process multiple source sheets\", async () => {\n    // Set up workbook with multiple source sheets\n    const mockSourceWorkbook = {\n      sheets: [\n        { id: \"source-sheet-1\", slug: \"source1\" },\n        { id: \"source-sheet-2\", slug: \"source2\" }\n      ]\n    };\n    \n    const mockNewWorkbook = {\n      id: \"new-workbook-1\",\n      sheets: [\n        { id: \"target-sheet-1\", slug: \"sheet1\" }\n      ]\n    };\n    \n    const mockRecords1 = {\n      data: {\n        records: [{ id: \"record1\", values: { field1: \"value1\" } }]\n      }\n    };\n    \n    const mockRecords2 = {\n      data: {\n        records: [{ id: \"record2\", values: { field2: \"value2\" } }]\n      }\n    };\n    \n    (api.workbooks.get as jest.Mock).mockResolvedValue({ data: mockSourceWorkbook });\n    (api.workbooks.list as jest.Mock).mockResolvedValue({ data: [] });\n    (api.workbooks.create as jest.Mock).mockResolvedValue({ data: mockNewWorkbook });\n    \n    // Mock records.get to return different responses for different sheet IDs\n    (api.records.get as jest.Mock).mockImplementation((sheetId) => {\n      if (sheetId === \"source-sheet-1\") {\n        return Promise.resolve(mockRecords1);\n      } else {\n        return Promise.resolve(mockRecords2);\n      }\n    });\n    \n    createFederateJobListener(mockConfig, \"federate\")(mockListener as unknown as FlatfileListener);\n    await mockListener.callback!(mockEvent);\n    \n    // Verify records were fetched for both sheets\n    expect(api.records.get).toHaveBeenCalledWith(\"source-sheet-1\");\n    expect(api.records.get).toHaveBeenCalledWith(\"source-sheet-2\");\n    \n    // Verify records were added from both sheets\n    expect(mockAddRecords).toHaveBeenCalledWith(\"source1\", mockRecords1.data.records);\n    expect(mockAddRecords).toHaveBeenCalledWith(\"source2\", mockRecords2.data.records);\n    \n    // Verify job completed successfully\n    expect(api.jobs.complete).toHaveBeenCalledWith(\n      \"job123\", \n      { outcome: { message: \"Federation complete\" } }\n    );\n  });\n}); "]}