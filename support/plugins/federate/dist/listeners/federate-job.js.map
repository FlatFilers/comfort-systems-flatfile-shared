{"version":3,"file":"federate-job.js","sourceRoot":"","sources":["../../src/listeners/federate-job.ts"],"names":[],"mappings":"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","sourcesContent":["import { FlatfileListener } from \"@flatfile/listener\";\nimport api from \"@flatfile/api\";\nimport { FederateConfig } from \"../types\";\nimport { FederatedSheetManager } from \"../utils/federation/federated_sheet_manager\";\nimport { FederatedSheetConfig, FederatedUnpivotSheetConfig } from \"../types\";\nimport { logError, logInfo, logWarn } from \"@flatfile/util-common\";\n\n/**\n * Creates a job listener for handling workbook federation operations\n * This listener processes the federation of data from source sheets to a new federated workbook\n * \n * @param config - Configuration object containing federation settings and workbook structure\n * @param operation - The specific operation to handle (e.g., 'federate')\n * @returns A function that sets up the job listener with the provided configuration\n */\nexport function createFederateJobListener(config: FederateConfig, operation: string) {\n  // Initialize sheet manager for handling federation logic\n  // This is done outside the listener to catch parsing errors early\n  const manager = new FederatedSheetManager(config);\n  \n  if (config.debug) {\n    logInfo(\"ðŸ“¦ Federate Plugin\", `FederateJobListener initialized with operation: ${operation}`);\n    logInfo(\"ðŸ“¦ Federate Plugin\", `Federated workbook name: ${config.federated_workbook.name}`);\n  }\n\n  return function(listener: FlatfileListener) {\n    if (config.debug) logInfo(\"ðŸ“¦ Federate Plugin\", `Setting up federation job listener for operation: workbook:${operation}`);\n    \n    // Listen for job ready events specific to the workbook operation\n    listener.on(\"job:ready\", { job: `workbook:${operation}` }, async (event) => {\n      const { context: { jobId, workbookId, spaceId } } = event;\n\n      if (config.debug) logInfo(\"ðŸ“¦ Federate Plugin\", `Federation job started: ${jobId} for workbook: ${workbookId} in space: ${spaceId}`);\n\n      await api.jobs.ack(jobId, { progress: 0, info: 'Starting federation' });\n\n      let progress = 0;\n\n      /**\n       * Helper function to update job progress and status\n       * @param info - Status message to display\n       * @param target - Target progress percentage to add\n       */\n      const updateProgress = async (info: string, target: number) => {\n        progress = Math.min(progress + target, 100);\n        if (config.debug) logInfo(\"ðŸ“¦ Federate Plugin\", `Progress update: ${info} - ${progress}%`);\n        await api.jobs.ack(jobId, { progress, info });\n      };\n\n      try {\n        // Initialize federation process\n        await updateProgress('Retrieving source data', 5);\n\n        // Retrieve source workbook and filter relevant sheets\n        const { data: sourceWorkbook } = await api.workbooks.get(workbookId);\n        const sourceSheets = sourceWorkbook.sheets?.filter(sheet => manager.hasSourceSheet(sheet.slug)) || [];\n\n        if (config.debug) {\n          logInfo(\"ðŸ“¦ Federate Plugin\", `Found ${sourceSheets.length} source sheets in workbook ${workbookId}`);\n          sourceSheets.forEach(sheet => logInfo(\"ðŸ“¦ Federate Plugin\", `Source sheet: ${sheet.name} (${sheet.slug}) - ID: ${sheet.id}`));\n        }\n\n        // Validate source sheets exist. This is a sanity check to ensure the source workbook is valid.\n        if (sourceSheets.length === 0) {\n          if (config.debug) logWarn(\"ðŸ“¦ Federate Plugin\", `No source sheets found in workbook ${workbookId}`);\n          await api.jobs.fail(jobId, {\n            info: \"No source sheets found\",\n            outcome: { acknowledge: true, message: \"No source sheets found\" }\n          });\n          return;\n        }\n\n        await updateProgress('Deleting existing federated workbooks', 10);\n\n        // Remove any existing federated workbooks to prevent duplicates\n        const oldWorkbooks = await api.workbooks.list({ spaceId, name: config.federated_workbook.name });\n        if (config.debug) logInfo(\"ðŸ“¦ Federate Plugin\", `Found ${oldWorkbooks.data.length} existing workbooks with name \"${config.federated_workbook.name}\" to delete`);\n        \n        await Promise.all(oldWorkbooks.data.map(wb => {\n          if (config.debug) logInfo(\"ðŸ“¦ Federate Plugin\", `Deleting workbook: ${wb.id}`);\n          return api.workbooks.delete(wb.id);\n        }));\n        \n        await updateProgress('Creating new federated workbook', 10);\n\n        // Create new federated workbook with provided configuration\n        const { data: newWorkbook } = await api.workbooks.create({\n          ...config.federated_workbook,\n          spaceId\n        });\n        \n        if (config.debug) {\n          logInfo(\"ðŸ“¦ Federate Plugin\", `Created new federated workbook: ${newWorkbook.id} with ${newWorkbook.sheets?.length || 0} sheets`);\n          newWorkbook.sheets?.forEach(sheet => logInfo(\"ðŸ“¦ Federate Plugin\", `Target sheet: ${sheet.name} (${sheet.slug}) - ID: ${sheet.id}`));\n        }\n        \n        await updateProgress('Setting up field mappings', 10);\n        \n        // Clear any existing mappings to ensure we start fresh\n        manager.clearMappings();\n        if (config.debug) logInfo(\"ðŸ“¦ Federate Plugin\", 'Cleared existing field mappings');\n        \n        // Set up field mappings between source and target sheets\n        config.federated_workbook.sheets.forEach(blueprint => {\n          const sheet = newWorkbook.sheets?.find(s => s.slug === blueprint.slug)!;\n          if (config.debug) logInfo(\"ðŸ“¦ Federate Plugin\", `Creating mapping for sheet: ${blueprint.slug}`);\n          manager.createMappings(blueprint as FederatedSheetConfig | FederatedUnpivotSheetConfig, sheet);\n        });\n        \n        await updateProgress('Processing and inserting records', 15);\n\n        // Process each source sheet and its records in batches\n        for (const sheet of sourceSheets) {\n          if (config.debug) logInfo(\"ðŸ“¦ Federate Plugin\", `Processing records from source sheet: ${sheet.slug}`);\n          \n          let pageNumber = 1;\n          let totalRecordsProcessed = 0;\n          \n          // Process records in batches of 10,000\n          while (true) {\n            const { data: { records } } = await api.records.get(sheet.id, { pageNumber });\n            const recordCount = records?.length || 0;\n            \n            if (config.debug) logInfo(\"ðŸ“¦ Federate Plugin\", `Retrieved ${recordCount} records from sheet ${sheet.slug} (page ${pageNumber})`);\n            \n            if (records && records.length > 0) {\n              // Process batch through manager and get transformed records\n              manager.addRecords(sheet.slug, records);\n              const batchRecords = manager.getRecords();\n              \n              if (config.debug) logInfo(\"ðŸ“¦ Federate Plugin\", `Processing batch ${pageNumber} with ${records.length} records from sheet ${sheet.slug}`);\n              \n              // Insert batch records into their respective target sheets sequentially\n              for (const [sheetId, sheetRecords] of batchRecords.entries()) {\n                if (sheetRecords.length > 0) {\n                  if (config.debug) logInfo(\"ðŸ“¦ Federate Plugin\", `Inserting ${sheetRecords.length} records into sheet ${sheetId} (batch ${pageNumber})`);\n                  await api.records.insert(sheetId, sheetRecords);\n                  console.log(\"inserted sheetRecords.length\", sheetRecords.length);\n                }\n              }\n              \n              // Clear the batch from manager to free up memory\n              manager.clearRecords();\n              \n              totalRecordsProcessed += records.length;\n              if (config.debug) logInfo(\"ðŸ“¦ Federate Plugin\", `Completed batch ${pageNumber} - inserted ${records.length} records from sheet ${sheet.slug}`);\n            }\n            \n            // If we got fewer than 10,000 records, we've reached the end\n            if (recordCount < 10000) {\n              break;\n            }\n            \n            pageNumber++;\n          }\n          \n          if (config.debug) {\n            if (totalRecordsProcessed > 0) {\n              logInfo(\"ðŸ“¦ Federate Plugin\", `Completed processing ${totalRecordsProcessed} total records from sheet ${sheet.slug}`);\n            } else {\n              logWarn(\"ðŸ“¦ Federate Plugin\", `No records found in source sheet: ${sheet.slug}`);\n            }\n          }\n        }\n        \n        await updateProgress('Finalizing federation', 29);\n\n        // Complete the job successfully\n        if (config.debug) logInfo(\"ðŸ“¦ Federate Plugin\", `Successfully completed federation job: ${jobId}`);\n        \n        await api.jobs.complete(jobId, { outcome: { message: 'Federation complete' } });\n      } catch (error) {\n        // Handle any errors during the federation process\n        if (config.debug) {\n          logError(\"ðŸ“¦ Federate Plugin\", `Federation job ${jobId} failed with error: ${(error as Error).message}`);\n          logError(\"ðŸ“¦ Federate Plugin\", `Error stack: ${(error as Error).stack}`);\n        }\n        \n        await api.jobs.fail(jobId, {\n          info: String((error as Error).message),\n          outcome: { acknowledge: true, message: String((error as Error).message) }\n        });\n      }\n    });\n  };\n} "]}