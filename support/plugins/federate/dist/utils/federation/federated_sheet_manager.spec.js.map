{"version":3,"file":"federated_sheet_manager.spec.js","sourceRoot":"","sources":["../../../src/utils/federation/federated_sheet_manager.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Flatfile } from \"@flatfile/api\";\nimport { FederatedSheetManager } from \"./federated_sheet_manager\";\nimport { validateConfig } from \"./validators/config_validator\";\nimport { mergeRecords } from \"./processors/merge_processor\";\nimport { filterRecords } from \"./filters/record_filter\";\nimport { processRecord } from \"./processors/record_processor\";\nimport { FederateConfig, FederatedSheetConfig, FederatedUnpivotSheetConfig } from \"../../types\";\n\n// Mock dependencies\njest.mock(\"./validators/config_validator\", () => ({\n  validateConfig: jest.fn().mockReturnValue(new Set([\"source1\", \"source2\"]))\n}));\n\njest.mock(\"./processors/merge_processor\", () => ({\n  mergeRecords: jest.fn((records: any[], dedupeConfig: any) => {\n    if (!dedupeConfig) return records;\n    \n    // Simulate basic merge behavior\n    if (dedupeConfig.type === \"merge\" && dedupeConfig.keep === \"first\") {\n      // Keep first occurrence of each record based on the merge key\n      const seen = new Set();\n      return records.filter(record => {\n        const key = record[dedupeConfig.on];\n        if (seen.has(key)) return false;\n        seen.add(key);\n        return true;\n      });\n    }\n    \n    return records;\n  })\n}));\n\njest.mock(\"./filters/record_filter\", () => ({\n  filterRecords: jest.fn((records: any[], filters: any) => {\n    if (!filters) return records;\n    \n    // Simulate basic filtering behavior\n    return records.filter(record => {\n      // Check all_fields_required\n      if (filters.all_fields_required && filters.all_fields_required.length > 0) {\n        for (const field of filters.all_fields_required) {\n          if (!record[field] || record[field] === \"\") return false;\n        }\n      }\n      \n      // Check field_values_required\n      if (filters.field_values_required) {\n        for (const [field, values] of Object.entries(filters.field_values_required)) {\n          if (!(values as string[]).includes(record[field])) return false;\n        }\n      }\n      \n      return true;\n    });\n  })\n}));\n\njest.mock(\"./processors/record_processor\", () => ({\n  processRecord: jest.fn((recordValues: any, sourceSlug: string, mapping: any) => {\n    // Basic record processing\n    const processedRecord: any = {};\n    \n    if (mapping.type === 'field') {\n      // Map fields according to the field mappings\n      for (const [sourceKey, targetKey] of mapping.fields.entries()) {\n        if (recordValues[sourceKey]) {\n          processedRecord[targetKey] = recordValues[sourceKey].value;\n        }\n      }\n      \n      return [processedRecord];\n    } else { // mapping.type === 'unpivot'\n      const results = [];\n      \n      // Process each field mapping in the unpivot groups\n      for (const [_, group] of mapping.unpivotGroups) {\n        // Process each field mapping in the group\n        for (const mapping of group.field_mappings) {\n          const unpivotRecord = { ...processedRecord };\n          \n          // Apply the mapping\n          for (const [targetKey, sourceKey] of Object.entries(mapping)) {\n            if (recordValues[sourceKey as string]) {\n              unpivotRecord[targetKey] = recordValues[sourceKey as string].value;\n            }\n          }\n          \n          results.push(unpivotRecord);\n        }\n      }\n      \n      return results.length > 0 ? results : [processedRecord];\n    }\n  })\n}));\n\n// Add/update this mock after the existing jest.mock calls\njest.mock(\"@flatfile/util-common\", () => ({\n  logInfo: jest.fn(),\n  logWarn: jest.fn(),\n  logError: jest.fn()\n}));\n\n// Helper function to create a valid Sheet object for testing\nfunction createMockSheet(id: string, name: string, slug: string): Flatfile.Sheet {\n  return {\n    id,\n    name,\n    slug,\n    workbookId: \"mock-workbook-id\",\n    config: {\n      name: name || \"\",\n      fields: []\n    },\n    updatedAt: new Date(),\n    createdAt: new Date()\n  } as Flatfile.Sheet;\n}\n\n// Class that extends FederatedSheetManager for testing\nclass MockFederatedSheetManager extends FederatedSheetManager {\n  constructor(config: FederateConfig) {\n    super(config);\n  }\n}\n\ndescribe(\"FederatedSheetManager\", () => {\n  // Sample config for testing\n  const mockConfig: FederateConfig = {\n    source_workbook_name: \"Source Workbook\",\n    federated_workbook: {\n      name: \"Federated Workbook\",\n      sheets: [\n        {\n          name: \"Target Sheet\",\n          slug: \"target\",\n          fields: [\n            {\n              key: \"field1\",\n              type: \"string\",\n              label: \"Field 1\",\n              federate_config: {\n                source_sheet_slug: \"source1\",\n                source_field_key: \"sourceField1\"\n              }\n            },\n            {\n              key: \"field2\",\n              type: \"string\",\n              label: \"Field 2\",\n              federate_config: {\n                source_sheet_slug: \"source1\",\n                source_field_key: \"sourceField2\"\n              }\n            },\n            {\n              key: \"field3\",\n              type: \"string\",\n              label: \"Field 3\",\n              federate_config: {\n                source_sheet_slug: \"source2\",\n                source_field_key: \"sourceField3\"\n              }\n            },\n            {\n              key: \"unpivotField\",\n              type: \"string\",\n              label: \"Unpivot Field\",\n              federate_config: {\n                unpivot_group: \"group1\"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  } as FederateConfig;\n  \n  // Sample sheet with merge config\n  const mockSheetWithMerge: FederatedSheetConfig = {\n    name: \"Sheet With Merge\",\n    slug: \"merge-sheet\",\n    fields: [\n      {\n        key: \"field1\",\n        type: \"string\",\n        label: \"Field 1\",\n        federate_config: {\n          source_sheet_slug: \"source1\",\n          source_field_key: \"sourceField1\"\n        }\n      }\n    ],\n    dedupe_config: {\n      on: \"field1\",\n      type: \"merge\",\n      keep: \"first\"\n    }\n  };\n  \n  // Sample sheet with filters\n  const mockSheetWithFilters: FederatedSheetConfig = {\n    name: \"Sheet With Filters\",\n    slug: \"filter-sheet\",\n    fields: [\n      {\n        key: \"field1\",\n        type: \"string\",\n        label: \"Field 1\",\n        federate_config: {\n          source_sheet_slug: \"source1\",\n          source_field_key: \"sourceField1\"\n        }\n      }\n    ],\n    all_fields_required: [\"field1\"],\n    field_values_required: {\n      \"field1\": [\"value1\", \"value2\"]\n    }\n  };\n  \n  // Sample sheet with unpivot config\n  const mockSheetWithUnpivot: FederatedUnpivotSheetConfig = {\n    name: \"Sheet With Unpivot\",\n    slug: \"unpivot-sheet\",\n    fields: [\n      {\n        key: \"abc\",\n        type: \"string\",\n        label: \"ABC\"\n      },\n      {\n        key: \"def\",\n        type: \"string\",\n        label: \"DEF\"\n      }\n    ],\n    unpivot_groups: {\n      group1: {\n        source_sheet_slug: \"source1\",\n        field_mappings: [\n          {\n            \"abc\": \"sourceField1\",\n            \"def\": \"sourceField2\"\n          },\n          {\n            \"abc\": \"sourceField3\",\n            \"def\": \"sourceField4\"\n          }\n        ]\n      }\n    }\n  };\n  \n  // Sample sheet with unpivot config using source_sheet property\n  const mockSheetWithUnpivotSourceSheet: FederatedUnpivotSheetConfig = {\n    name: \"Sheet With Unpivot Source Sheet\",\n    slug: \"unpivot-source-sheet\",\n    fields: [\n      {\n        key: \"abc\",\n        type: \"string\",\n        label: \"ABC\"\n      },\n      {\n        key: \"def\",\n        type: \"string\",\n        label: \"DEF\"\n      }\n    ],\n    unpivot_groups: {\n      group1: {\n        source_sheet: {\n          name: \"Source Sheet\",\n          slug: \"source1\",\n          fields: []\n        } as Flatfile.SheetConfig,\n        field_mappings: [\n          {\n            \"abc\": \"sourceField1\",\n            \"def\": \"sourceField2\"\n          },\n          {\n            \"abc\": \"sourceField3\",\n            \"def\": \"sourceField4\"\n          }\n        ]\n      }\n    }\n  };\n  \n  // Sample sheet with unpivot group missing source_sheet_slug\n  const mockSheetWithInvalidUnpivot: FederatedUnpivotSheetConfig = {\n    name: \"Sheet With Invalid Unpivot\",\n    slug: \"invalid-unpivot-sheet\",\n    fields: [\n      {\n        key: \"abc\",\n        type: \"string\",\n        label: \"ABC\"\n      }\n    ],\n    unpivot_groups: {\n      group1: {\n        // Type casting to allow us to create an intentionally invalid config for testing\n        field_mappings: [\n          {\n            \"abc\": \"sourceField1\"\n          }\n        ]\n      } as any // Force TypeScript to accept this incomplete config\n    }\n  };\n  \n  // Sample sheet with field missing source_field_key\n  const mockSheetWithInvalidField: FederatedSheetConfig = {\n    name: \"Sheet With Invalid Field\",\n    slug: \"invalid-field-sheet\",\n    fields: [\n      {\n        key: \"field1\",\n        type: \"string\",\n        label: \"Field 1\",\n        federate_config: {\n          source_sheet_slug: \"source1\"\n          // missing source_field_key\n        } as any // Force TypeScript to accept this incomplete config\n      },\n      {\n        key: \"field2\",\n        type: \"string\",\n        label: \"Field 2\",\n        federate_config: {\n          // Missing source_sheet_slug and source_sheet\n        } as any // Force TypeScript to accept this incomplete config\n      }\n    ]\n  };\n  \n  // Sample records for testing\n  const mockRecords: Flatfile.RecordWithLinks[] = [\n    {\n      id: \"record-1\",\n      values: {\n        sourceField1: { value: \"value1\" },\n        sourceField2: { value: \"value2\" }\n      }\n    },\n    {\n      id: \"record-2\",\n      values: {\n        sourceField1: { value: \"value3\" },\n        sourceField2: { value: \"value4\" }\n      }\n    }\n  ];\n  \n  let manager: MockFederatedSheetManager;\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n    manager = new MockFederatedSheetManager(mockConfig);\n  });\n  \n  describe(\"constructor\", () => {\n    it(\"should initialize with source sheets from validateConfig\", () => {\n      // The constructor is already called in beforeEach\n      expect(validateConfig).toHaveBeenCalledWith(mockConfig);\n      expect(manager.hasSourceSheet(\"source1\")).toBe(true);\n      expect(manager.hasSourceSheet(\"source2\")).toBe(true);\n      expect(manager.hasSourceSheet(\"nonexistent\")).toBe(false);\n    });\n    \n    it(\"should throw if validateConfig throws\", () => {\n      (validateConfig as jest.Mock).mockImplementationOnce(() => {\n        throw new Error(\"Validation error\");\n      });\n      \n      expect(() => new MockFederatedSheetManager(mockConfig)).toThrow(\"Validation error\");\n    });\n    \n    it(\"should handle empty source sheets set\", () => {\n      (validateConfig as jest.Mock).mockReturnValueOnce(new Set());\n      \n      const emptyManager = new MockFederatedSheetManager(mockConfig);\n      expect(emptyManager.hasSourceSheet(\"source1\")).toBe(false);\n      expect(emptyManager.hasSourceSheet(\"source2\")).toBe(false);\n    });\n  });\n  \n  describe(\"clearMappings\", () => {\n    it(\"should clear all mappings and configurations\", () => {\n      // Setup some data first\n      const mockSheet = createMockSheet(\"sheet-123\", \"Target Sheet\", \"target\");\n      manager.createMappings(mockConfig.federated_workbook.sheets[0], mockSheet);\n      manager.addRecords(\"source1\", mockRecords);\n      \n      // Now clear mappings\n      manager.clearMappings();\n      \n      // Source sheets should still be available\n      expect(manager.hasSourceSheet(\"source1\")).toBe(true);\n      expect(manager.hasSourceSheet(\"source2\")).toBe(true);\n      \n      // But there should be no records\n      const records = manager.getRecords();\n      expect(records.size).toBe(0);\n    });\n    \n    it(\"should preserve source sheet structure\", () => {\n      // Setup some data first\n      const mockSheet = createMockSheet(\"sheet-123\", \"Target Sheet\", \"target\");\n      manager.createMappings(mockConfig.federated_workbook.sheets[0], mockSheet);\n      manager.addRecords(\"source1\", mockRecords);\n      \n      // Now clear mappings\n      manager.clearMappings();\n      \n      // Source sheets should still be available\n      expect(manager.hasSourceSheet(\"source1\")).toBe(true);\n      expect(manager.hasSourceSheet(\"source2\")).toBe(true);\n      \n      // But mappings should be empty\n      const records = manager.getRecords();\n      expect(records.size).toBe(0);\n      \n      // Adding records after clear should work\n      manager.addRecords(\"source1\", mockRecords);\n      const newRecords = manager.getRecords();\n      expect(newRecords.size).toBe(0); // No mappings, so no records\n    });\n  });\n  \n  describe(\"hasSourceSheet\", () => {\n    it(\"should return true for existing source sheets\", () => {\n      expect(manager.hasSourceSheet(\"source1\")).toBe(true);\n      expect(manager.hasSourceSheet(\"source2\")).toBe(true);\n    });\n    \n    it(\"should return false for non-existent source sheets\", () => {\n      expect(manager.hasSourceSheet(\"nonexistent\")).toBe(false);\n    });\n    \n    it(\"should handle empty string input\", () => {\n      expect(manager.hasSourceSheet(\"\")).toBe(false);\n    });\n  });\n  \n  describe(\"createMappings\", () => {\n    it(\"should create basic field mappings correctly\", () => {\n      const mockSheet = createMockSheet(\"sheet-123\", \"Target Sheet\", \"target\");\n      manager.createMappings(mockConfig.federated_workbook.sheets[0], mockSheet);\n      \n      // Add a record to test if mapping is created correctly\n      manager.addRecords(\"source1\", mockRecords);\n      manager.addRecords(\"source2\", mockRecords);\n      \n      const records = manager.getRecords();\n      expect(records.size).toBe(1);\n      expect(records.has(\"sheet-123\")).toBe(true);\n      \n      // Each source record produces one processed record\n      const sheetRecords = records.get(\"sheet-123\");\n      expect(sheetRecords).toBeTruthy();\n      expect(sheetRecords?.length).toBe(4); // 2 from source1 and 2 from source2\n      \n      // Verify the field mappings were created correctly\n      expect(processRecord).toHaveBeenCalled();\n      // Don't check exact parameters as they may vary\n    });\n    \n    it(\"should handle sheets where all fields are unpivot fields\", () => {\n      // Create a sheet with only unpivot fields, no direct field mappings\n      const onlyUnpivotSheet: FederatedUnpivotSheetConfig = {\n        name: \"Only Unpivot Sheet\",\n        slug: \"only-unpivot\",\n        fields: [\n          {\n            key: \"name\",\n            type: \"string\",\n            label: \"Name\"\n          },\n          {\n            key: \"value\",\n            type: \"string\",\n            label: \"Value\"\n          }\n        ],\n        unpivot_groups: {\n          group1: {\n            source_sheet_slug: \"source1\",\n            field_mappings: [\n              {\n                \"key\": \"field1\",\n                \"value\": \"sourceField1\"\n              },\n              {\n                \"key\": \"field2\",\n                \"value\": \"sourceField2\"\n              }\n            ]\n          }\n        }\n      };\n      \n      const mockOnlyUnpivotSheet = createMockSheet(\"only-unpivot-123\", \"Only Unpivot Sheet\", \"only-unpivot\");\n      \n      manager.createMappings(onlyUnpivotSheet, mockOnlyUnpivotSheet);\n      \n      // Add records to source sheet\n      manager.addRecords(\"source1\", mockRecords);\n      \n      // Verify records were processed\n      const records = manager.getRecords();\n      expect(records.has(\"only-unpivot-123\")).toBe(true);\n      const sheetRecords = records.get(\"only-unpivot-123\");\n      expect(sheetRecords).toBeTruthy();\n      // Our mock processRecord returns 2 records per source record due to field_mappings\n      expect(sheetRecords?.length).toBe(4); // 2 source records * 2 field mappings\n      expect(processRecord).toHaveBeenCalled();\n      \n      // Verify unpivot configuration was created correctly\n      expect(processRecord).toHaveBeenCalled();\n      // Don't check exact parameters as they may vary\n    });\n    \n    it(\"should store merge configuration\", () => {\n      const mockSheetEntity = createMockSheet(\"merge-sheet-123\", \"Sheet With Merge\", \"merge-sheet\");\n      \n      manager.createMappings(mockSheetWithMerge, mockSheetEntity);\n      \n      // Add records to test merge\n      manager.addRecords(\"source1\", mockRecords);\n      \n      const records = manager.getRecords();\n      expect(mergeRecords).toHaveBeenCalled();\n      expect(records.has(\"merge-sheet-123\")).toBe(true);\n      \n      // Verify merge configuration was stored correctly\n      expect(mergeRecords).toHaveBeenCalledWith(\n        expect.any(Array),\n        expect.objectContaining({\n          on: \"field1\",\n          type: \"merge\",\n          keep: \"first\"\n        })\n      );\n    });\n    \n    it(\"should store filter configuration\", () => {\n      const mockSheetEntity = createMockSheet(\"filter-sheet-123\", \"Sheet With Filters\", \"filter-sheet\");\n      \n      manager.createMappings(mockSheetWithFilters, mockSheetEntity);\n      \n      // Add records to test filtering\n      manager.addRecords(\"source1\", mockRecords);\n      \n      const records = manager.getRecords();\n      expect(filterRecords).toHaveBeenCalled();\n      expect(records.has(\"filter-sheet-123\")).toBe(true);\n      \n      // Verify filter configuration was stored correctly\n      expect(filterRecords).toHaveBeenCalledWith(\n        expect.any(Array),\n        expect.objectContaining({\n          all_fields_required: [\"field1\"],\n          field_values_required: {\n            \"field1\": [\"value1\", \"value2\"]\n          }\n        })\n      );\n    });\n    \n    it(\"should process unpivot configurations\", () => {\n      const mockSheetEntity = createMockSheet(\"unpivot-sheet-123\", \"Sheet With Unpivot\", \"unpivot-sheet\");\n      \n      manager.createMappings(mockSheetWithUnpivot, mockSheetEntity);\n      \n      // Add records to test unpivot\n      manager.addRecords(\"source1\", mockRecords);\n      \n      // processRecord is mocked to return one record per call\n      const records = manager.getRecords();\n      expect(records.has(\"unpivot-sheet-123\")).toBe(true);\n      const sheetRecords = records.get(\"unpivot-sheet-123\");\n      // Our mock processRecord returns 2 records per source record due to field_mappings\n      expect(sheetRecords?.length).toBe(4); // 2 source records * 2 field mappings\n      \n      // Verify unpivot configuration was processed correctly\n      expect(processRecord).toHaveBeenCalled();\n      // Don't check exact parameters as they may vary\n    });\n    \n    it(\"should process unpivot configurations with source_sheet property\", () => {\n      const mockSheetEntity = createMockSheet(\"unpivot-source-sheet-123\", \"Sheet With Unpivot Source Sheet\", \"unpivot-source-sheet\");\n      \n      manager.createMappings(mockSheetWithUnpivotSourceSheet, mockSheetEntity);\n      \n      // Add records to test unpivot\n      manager.addRecords(\"source1\", mockRecords);\n      \n      // processRecord is mocked to return one record per call\n      const records = manager.getRecords();\n      expect(records.has(\"unpivot-source-sheet-123\")).toBe(true);\n      const sheetRecords = records.get(\"unpivot-source-sheet-123\");\n      // Our mock processRecord returns 2 records per source record due to field_mappings\n      expect(sheetRecords?.length).toBe(4); // 2 source records * 2 field mappings\n      \n      // Verify unpivot configuration was processed correctly\n      expect(processRecord).toHaveBeenCalled();\n      // Don't check exact parameters as they may vary\n    });\n    \n    it(\"should handle sheets with no fields\", () => {\n      const emptySheet: FederatedSheetConfig = {\n        name: \"Empty Sheet\",\n        slug: \"empty-sheet\",\n        fields: []\n      };\n      \n      const mockEmptySheet = createMockSheet(\"empty-sheet-123\", \"Empty Sheet\", \"empty-sheet\");\n      \n      // Should not throw\n      expect(() => manager.createMappings(emptySheet, mockEmptySheet)).not.toThrow();\n      \n      // Verify the sheet was initialized\n      const records = manager.getRecords();\n      expect(records.has(\"empty-sheet-123\")).toBe(true);\n      expect(records.get(\"empty-sheet-123\")).toEqual([]);\n    });\n    \n    it(\"should handle sheets with fields that have no federate_config\", () => {\n      const noFederateConfigSheet: FederatedSheetConfig = {\n        name: \"No Federate Config Sheet\",\n        slug: \"no-federate-config-sheet\",\n        fields: [\n          {\n            key: \"field1\",\n            type: \"string\",\n            label: \"Field 1\"\n            // No federate_config\n          }\n        ]\n      };\n      \n      const mockNoFederateConfigSheet = createMockSheet(\"no-federate-config-123\", \"No Federate Config Sheet\", \"no-federate-config-sheet\");\n      \n      // Should not throw\n      expect(() => manager.createMappings(noFederateConfigSheet, mockNoFederateConfigSheet)).not.toThrow();\n      \n      // Verify the sheet was initialized\n      const records = manager.getRecords();\n      expect(records.has(\"no-federate-config-123\")).toBe(true);\n      expect(records.get(\"no-federate-config-123\")).toEqual([]);\n    });\n    \n    it(\"should handle sheets with fields that have invalid federate_config\", () => {\n      const invalidFederateConfigSheet: FederatedSheetConfig = {\n        name: \"Invalid Federate Config Sheet\",\n        slug: \"invalid-federate-config-sheet\",\n        fields: [\n          {\n            key: \"field1\",\n            type: \"string\",\n            label: \"Field 1\",\n            federate_config: {\n              // Missing required properties\n            } as any\n          }\n        ]\n      };\n      \n      const mockInvalidFederateConfigSheet = createMockSheet(\"invalid-federate-config-123\", \"Invalid Federate Config Sheet\", \"invalid-federate-config-sheet\");\n      \n      // Should not throw\n      expect(() => manager.createMappings(invalidFederateConfigSheet, mockInvalidFederateConfigSheet)).not.toThrow();\n      \n      // Verify the sheet was initialized\n      const records = manager.getRecords();\n      expect(records.has(\"invalid-federate-config-123\")).toBe(true);\n      expect(records.get(\"invalid-federate-config-123\")).toEqual([]);\n    });\n    \n    it(\"should handle unpivot groups with missing source sheet slugs\", async () => {\n      // Create a mock source sheet with debug enabled\n      const config: FederateConfig = {\n        ...mockConfig,\n        debug: true\n      };\n      \n      const manager = new FederatedSheetManager(config);\n      const mockSheet = createMockSheet(\"sheet-id\", \"Invalid Unpivot Sheet\", \"invalid-unpivot\");\n      \n      // Test method\n      await manager.createMappings(mockSheetWithInvalidUnpivot, mockSheet);\n      \n      // Verify warning logs for missing source_sheet_slug\n      const { logWarn } = require(\"@flatfile/util-common\");\n      expect(logWarn).toHaveBeenCalledWith(\n        \"📦 Federate Plugin Manager\", \n        expect.stringContaining(\"No valid source sheet slug found for unpivot group\")\n      );\n    });\n    \n    it(\"should handle fields with missing source field key\", async () => {\n      // Create a mock source sheet with debug enabled\n      const config: FederateConfig = {\n        ...mockConfig,\n        debug: true\n      };\n      \n      const manager = new FederatedSheetManager(config);\n      const mockSheet = createMockSheet(\"sheet-id\", \"Invalid Field Sheet\", \"invalid-field\");\n      \n      // Test method\n      await manager.createMappings(mockSheetWithInvalidField, mockSheet);\n      \n      // Verify warning logs for missing source_field_key\n      const { logWarn } = require(\"@flatfile/util-common\");\n      // Use a more robust check for the specific warning call\n      const calls = (logWarn as jest.Mock).mock.calls;\n      const expectedCallFound = calls.some(call => \n        call[0] === \"📦 Federate Plugin Manager\" && \n        typeof call[1] === 'string' && \n        call[1].includes(\"missing required federate_config parts\")\n      );\n      expect(expectedCallFound).toBe(true);\n      \n      // // Verify warning logs for missing source_sheet_slug - Keep this commented or remove if not needed\n      // expect(logWarn).toHaveBeenCalledWith(\n      //   \"📦 Federate Plugin Manager\", \n      //   expect.stringContaining(\"missing required federate_config parts\")\n      // );\n    });\n    \n    // --- Tests for Virtual Fields in createMappings ---\n    it(\"should store virtual field keys and mappings for standard sheets\", () => {\n      const sheetWithVirtual: FederatedSheetConfig = {\n        name: \"Sheet With Virtual\",\n        slug: \"virtual-sheet\",\n        fields: [\n          {\n            key: \"realField\", type: \"string\", label: \"Real\",\n            federate_config: { source_sheet_slug: \"source1\", source_field_key: \"sourceReal\" }\n          }\n        ],\n        virtualFields: [\n          {\n            key: \"virtualKey1\", type: \"string\",\n            federate_config: { source_sheet_slug: \"source1\", source_field_key: \"sourceVirtual1\" }\n          },\n          {\n            key: \"virtualKey2\", type: \"string\",\n            federate_config: { source_sheet_slug: \"source2\", source_field_key: \"sourceVirtual2\" }\n          }\n        ]\n      };\n      const mockSheetEntity = createMockSheet(\"virtual-sheet-123\", \"Sheet With Virtual\", \"virtual-sheet\");\n      \n      manager.createMappings(sheetWithVirtual, mockSheetEntity);\n      \n      // Check virtualFieldKeys storage\n      const storedVirtualKeys = manager['virtualFieldKeys'].get(\"virtual-sheet-123\");\n      expect(storedVirtualKeys).toBeDefined();\n      expect(storedVirtualKeys?.size).toBe(2);\n      expect(storedVirtualKeys?.has(\"virtualKey1\")).toBe(true);\n      expect(storedVirtualKeys?.has(\"virtualKey2\")).toBe(true);\n      \n      // Check FieldMapping for source1\n      const source1Mappings = manager['sourceMappings'].get(\"source1\");\n      expect(source1Mappings).toBeDefined();\n      expect(source1Mappings?.length).toBeGreaterThan(0);\n      const mapping1 = source1Mappings?.find(m => m.sheetId === \"virtual-sheet-123\") as any;\n      expect(mapping1).toBeDefined();\n      expect(mapping1.type).toBe('field');\n      expect(mapping1.fields.has(\"sourceReal\")).toBe(true); // Real field included\n      expect(mapping1.fields.get(\"sourceReal\")).toBe(\"realField\");\n      expect(mapping1.fields.has(\"sourceVirtual1\")).toBe(true); // Virtual field included\n      expect(mapping1.fields.get(\"sourceVirtual1\")).toBe(\"virtualKey1\");\n      \n      // Check FieldMapping for source2\n      const source2Mappings = manager['sourceMappings'].get(\"source2\");\n      expect(source2Mappings).toBeDefined();\n      expect(source2Mappings?.length).toBeGreaterThan(0);\n      const mapping2 = source2Mappings?.find(m => m.sheetId === \"virtual-sheet-123\") as any;\n      expect(mapping2).toBeDefined();\n      expect(mapping2.type).toBe('field');\n      expect(mapping2.fields.has(\"sourceVirtual2\")).toBe(true); // Virtual field included\n      expect(mapping2.fields.get(\"sourceVirtual2\")).toBe(\"virtualKey2\");\n    });\n  });\n  \n  describe(\"addRecords\", () => {\n    beforeEach(() => {\n      const mockSheet = createMockSheet(\"sheet-123\", \"Target Sheet\", \"target\");\n      manager.createMappings(mockConfig.federated_workbook.sheets[0], mockSheet);\n    });\n    \n    it(\"should do nothing for empty or undefined records\", () => {\n      manager.addRecords(\"source1\", []);\n      manager.addRecords(\"source1\", undefined as any);\n      \n      const records = manager.getRecords();\n      expect(records.get(\"sheet-123\")?.length).toBe(0);\n    });\n    \n    it(\"should do nothing for non-existent source sheet\", () => {\n      manager.addRecords(\"nonexistent\", mockRecords);\n      \n      const records = manager.getRecords();\n      expect(records.get(\"sheet-123\")?.length).toBe(0);\n    });\n    \n    it(\"should process records from source sheet\", () => {\n      manager.addRecords(\"source1\", mockRecords);\n      \n      const records = manager.getRecords();\n      expect(records.get(\"sheet-123\")?.length).toBe(2);\n      expect(processRecord).toHaveBeenCalledTimes(2);\n      \n      // Verify the processed records have the expected structure\n      const processedRecords = records.get(\"sheet-123\");\n      expect(processedRecords).toBeTruthy();\n      expect(processedRecords?.length).toBe(2);\n      \n      // Verify processRecord was called\n      expect(processRecord).toHaveBeenCalled();\n      // Don't check exact parameters as they may vary\n    });\n    \n    it(\"should handle missing values in records\", () => {\n      const recordsWithMissingValues: Flatfile.RecordWithLinks[] = [\n        {\n          id: \"record-missing\",\n          values: {}\n        }\n      ];\n      \n      manager.addRecords(\"source1\", recordsWithMissingValues);\n      \n      const records = manager.getRecords();\n      expect(records.get(\"sheet-123\")?.length).toBe(1);\n      expect(processRecord).toHaveBeenCalledTimes(1);\n      \n      // Verify the processed record is empty\n      const processedRecords = records.get(\"sheet-123\");\n      expect(processedRecords).toBeTruthy();\n      expect(processedRecords?.length).toBe(1);\n      expect(Object.keys(processedRecords![0])).toHaveLength(0);\n    });\n    \n    it(\"should handle null or undefined records in array\", () => {\n      const recordsWithNull: any[] = [\n        null,\n        undefined,\n        {\n          id: \"record-valid\",\n          values: {\n            sourceField1: { value: \"value\" }\n          }\n        }\n      ];\n      \n      manager.addRecords(\"source1\", recordsWithNull);\n      \n      const records = manager.getRecords();\n      expect(records.get(\"sheet-123\")?.length).toBe(1); // Only the valid record\n      expect(processRecord).toHaveBeenCalledTimes(1); // Only called for the valid record\n      \n      // Verify the processed record has the expected structure\n      const processedRecords = records.get(\"sheet-123\");\n      expect(processedRecords).toBeTruthy();\n      expect(processedRecords?.length).toBe(1);\n    });\n    \n    it(\"should handle malformed record values\", () => {\n      const malformedRecords: any[] = [\n        {\n          id: \"record-malformed\",\n          values: {\n            sourceField1: \"not-an-object\" // Should be { value: \"something\" }\n          }\n        }\n      ];\n      \n      manager.addRecords(\"source1\", malformedRecords);\n      \n      const records = manager.getRecords();\n      expect(records.get(\"sheet-123\")?.length).toBe(1);\n      expect(processRecord).toHaveBeenCalledTimes(1);\n      \n      // Verify the processed record is empty or has default values\n      const processedRecords = records.get(\"sheet-123\");\n      expect(processedRecords).toBeTruthy();\n      expect(processedRecords?.length).toBe(1);\n    });\n    \n    it(\"should handle empty processed records with debug mode\", async () => {\n      // Create a mock manager with debug enabled\n      const config: FederateConfig = {\n        ...mockConfig,\n        debug: true\n      };\n      \n      const manager = new FederatedSheetManager(config);\n      const mockSheet = createMockSheet(\"sheet-id\", \"Target Sheet\", \"target\");\n      \n      // Setup initial state\n      await manager.createMappings(mockConfig.federated_workbook.sheets[0] as FederatedSheetConfig, mockSheet);\n      \n      // Mock processRecord to return empty array\n      (processRecord as jest.Mock).mockReturnValueOnce([]);\n      \n      // Process a record\n      const mockRecord = {\n        id: \"record1\",\n        values: {\n          sourceField1: { value: \"value1\" }\n        }\n      };\n      \n      await manager.addRecords(\"source1\", [mockRecord]);\n      \n      // Verify warning logs for empty processed records\n      const { logWarn } = require(\"@flatfile/util-common\");\n      expect(logWarn).toHaveBeenCalledWith(\n        \"📦 Federate Plugin Manager\", \n        expect.stringContaining(\"No records resulted from processing for target sheet:\")\n      );\n    });\n    \n    it(\"should handle processed records with zero length in debug mode\", async () => {\n      // Mock dependencies\n      jest.clearAllMocks();\n      \n      // Create a mock manager with debug enabled\n      const config: FederateConfig = {\n        ...mockConfig,\n        debug: true\n      };\n      \n      const manager = new FederatedSheetManager(config);\n      const mockSheet = createMockSheet(\"sheet-id\", \"Target Sheet\", \"target\");\n      \n      // Setup initial state\n      await manager.createMappings(mockConfig.federated_workbook.sheets[0] as FederatedSheetConfig, mockSheet);\n      \n      // Mock processRecord to return an empty array\n      (processRecord as jest.Mock).mockReturnValueOnce([]);\n      \n      // Process a record\n      const mockRecord = {\n        id: \"record1\",\n        values: {\n          sourceField1: { value: \"value1\" }\n        }\n      };\n      \n      // Clear previous calls to logWarn\n      const { logWarn } = require(\"@flatfile/util-common\");\n      (logWarn as jest.Mock).mockClear();\n      \n      await manager.addRecords(\"source1\", [mockRecord]);\n      \n      // Verify warning logs for empty processed records\n      expect(logWarn).toHaveBeenCalledWith(\n        \"📦 Federate Plugin Manager\", \n        expect.stringContaining(\"No records resulted from processing for target sheet:\")\n      );\n    });\n  });\n  \n  describe(\"getRecords\", () => {\n    it(\"should return empty map when no records exist\", () => {\n      const records = manager.getRecords();\n      expect(records.size).toBe(0);\n    });\n    \n    it(\"should return empty records array for sheet with no records\", () => {\n      const mockSheet = createMockSheet(\"sheet-123\", \"Target Sheet\", \"target\");\n      manager.createMappings(mockConfig.federated_workbook.sheets[0], mockSheet);\n      \n      const records = manager.getRecords();\n      expect(records.size).toBe(1);\n      expect(records.get(\"sheet-123\")).toEqual([]);\n    });\n    \n    it(\"should apply merge and filter on records\", () => {\n      // Set up a sheet with merge and filter config\n      const mockSheetEntity = createMockSheet(\"complex-sheet-123\", \"Complex Sheet\", \"complex-sheet\");\n      \n      const mockComplexSheet: FederatedSheetConfig = {\n        ...mockSheetWithMerge,\n        ...mockSheetWithFilters,\n        name: \"Complex Sheet\",\n        slug: \"complex-sheet\"\n      };\n      \n      manager.createMappings(mockComplexSheet, mockSheetEntity);\n      \n      // Add records that would be filtered out\n      const recordsToFilter: Flatfile.RecordWithLinks[] = [\n        {\n          id: \"record-filtered\",\n          values: {\n            sourceField1: { value: \"value3\" } // Not in required values\n          }\n        }\n      ];\n      \n      // Add records that would pass filtering\n      const recordsToKeep: Flatfile.RecordWithLinks[] = [\n        {\n          id: \"record-keep1\",\n          values: {\n            sourceField1: { value: \"value1\" } // In required values\n          }\n        },\n        {\n          id: \"record-keep2\",\n          values: {\n            sourceField1: { value: \"value1\" } // Duplicate value for merge test\n          }\n        }\n      ];\n      \n      manager.addRecords(\"source1\", [...recordsToFilter, ...recordsToKeep]);\n      \n      const records = manager.getRecords();\n      \n      // Verify merge and filter were called\n      expect(mergeRecords).toHaveBeenCalled();\n      expect(filterRecords).toHaveBeenCalled();\n      \n      // Verify the result has the expected records\n      const processedRecords = records.get(\"complex-sheet-123\");\n      expect(processedRecords).toBeTruthy();\n      expect(processedRecords?.length).toBe(1); // One record after filtering and merging\n    });\n    \n    it(\"should handle multiple sheets correctly\", () => {\n      // First sheet\n      const mockSheet = createMockSheet(\"sheet-123\", \"Target Sheet\", \"target\");\n      manager.createMappings(mockConfig.federated_workbook.sheets[0], mockSheet);\n      \n      // Second sheet\n      const mockSheet2 = createMockSheet(\"sheet-456\", \"Target Sheet 2\", \"target2\");\n      \n      const mockBlueprint2: FederatedSheetConfig = {\n        name: \"Target Sheet 2\",\n        slug: \"target2\",\n        fields: [\n          {\n            key: \"field4\",\n            type: \"string\",\n            label: \"Field 4\",\n            federate_config: {\n              source_sheet_slug: \"source2\",\n              source_field_key: \"sourceField4\"\n            }\n          }\n        ]\n      };\n      \n      manager.createMappings(mockBlueprint2, mockSheet2);\n      \n      // Add records to both source sheets\n      manager.addRecords(\"source1\", mockRecords);\n      manager.addRecords(\"source2\", mockRecords);\n      \n      const records = manager.getRecords();\n      expect(records.size).toBe(2);\n      expect(records.has(\"sheet-123\")).toBe(true);\n      expect(records.has(\"sheet-456\")).toBe(true);\n      \n      // Verify each sheet has the expected records\n      // Our mock processRecord returns 2 records per source record\n      expect(records.get(\"sheet-123\")?.length).toBe(4); // 2 source records * 2 field mappings\n      expect(records.get(\"sheet-456\")?.length).toBe(2); // 2 source records * 1 field mapping\n    });\n    \n    it(\"should handle sheets with unpivot configurations\", () => {\n      // Set up a sheet with unpivot config\n      const mockSheetEntity = createMockSheet(\"unpivot-sheet-123\", \"Sheet With Unpivot\", \"unpivot-sheet\");\n      manager.createMappings(mockSheetWithUnpivot, mockSheetEntity);\n      \n      // Add records with values that should be unpivoted\n      const recordsWithUnpivot: Flatfile.RecordWithLinks[] = [\n        {\n          id: \"record-unpivot\",\n          values: {\n            sourceField1: { value: \"value1\" },\n            sourceField2: { value: \"value2\" },\n            sourceField3: { value: \"value3\" },\n            sourceField4: { value: \"value4\" }\n          }\n        }\n      ];\n      \n      manager.addRecords(\"source1\", recordsWithUnpivot);\n      \n      const records = manager.getRecords();\n      \n      // Verify the result has the expected unpivoted records\n      const processedRecords = records.get(\"unpivot-sheet-123\");\n      expect(processedRecords).toBeTruthy();\n      \n      // Our mock processRecord should create 2 records for each source record\n      // due to the field_mappings in mockSheetWithUnpivot\n      expect(processedRecords?.length).toBe(2);\n      \n      // Verify the unpivoted records have the expected structure\n      expect(processedRecords?.[0]).toHaveProperty(\"abc\");\n      expect(processedRecords?.[0]).toHaveProperty(\"def\");\n      expect(processedRecords?.[1]).toHaveProperty(\"abc\");\n      expect(processedRecords?.[1]).toHaveProperty(\"def\");\n    });\n    \n    it(\"should log filtered records in debug mode\", async () => {\n      // Create a mock manager with debug enabled\n      const config: FederateConfig = {\n        ...mockConfig,\n        debug: true\n      };\n      \n      const manager = new FederatedSheetManager(config);\n      const mockSheet = createMockSheet(\"sheet-id\", \"Filter Sheet\", \"filter-sheet\");\n      \n      // Setup initial state with filters\n      await manager.createMappings(mockSheetWithFilters, mockSheet);\n      \n      // Add a record\n      const mockRecordData = {\n        id: \"record1\",\n        values: {\n          sourceField1: { value: \"value1\" }\n        }\n      };\n      \n      await manager.addRecords(\"source1\", [mockRecordData]);\n      \n      // Get records, which should apply filters\n      manager.getRecords();\n      \n      // Verify log for applying filters\n      const { logInfo } = require(\"@flatfile/util-common\");\n      expect(logInfo).toHaveBeenCalledWith(\n        \"📦 Federate Plugin Manager\", \n        expect.stringContaining(\"Applied TARGET filters to sheet\")\n      );\n    });\n    \n    it(\"should log merge configuration application in debug mode\", async () => {\n      // Create a mock manager with debug enabled\n      const config: FederateConfig = {\n        ...mockConfig,\n        debug: true\n      };\n      \n      const manager = new FederatedSheetManager(config);\n      const mockSheet = createMockSheet(\"sheet-id\", \"Merge Sheet\", \"merge-sheet\");\n      \n      // Setup initial state with merge config\n      await manager.createMappings(mockSheetWithMerge, mockSheet);\n      \n      // Add a record\n      const mockRecordData = {\n        id: \"record1\",\n        values: {\n          sourceField1: { value: \"value1\" }\n        }\n      };\n      \n      await manager.addRecords(\"source1\", [mockRecordData]);\n      \n      // Get records, which should apply merge config\n      manager.getRecords();\n      \n      // Verify log for applying merge configuration\n      const { logInfo } = require(\"@flatfile/util-common\");\n      expect(logInfo).toHaveBeenCalledWith(\n        \"📦 Federate Plugin Manager\", \n        expect.stringContaining(\"Applied dedupe configuration to sheet\")\n      );\n    });\n  });\n  \n  describe(\"findBlueprint\", () => {\n    it(\"should return the correct blueprint for a given sheetId\", async () => {\n      // Setup: create mappings for two sheets\n      const standardSheet = createMockSheet(\"standard-123\", \"Standard Sheet\", \"standard-sheet\");\n      const unpivotSheet = createMockSheet(\"unpivot-123\", \"Unpivot Sheet\", \"unpivot-sheet\");\n      const standardBlueprint: FederatedSheetConfig = {\n        name: \"Standard Sheet\",\n        slug: \"standard-sheet\",\n        fields: [\n          { key: \"fieldA\", type: \"string\", label: \"A\", federate_config: { source_sheet_slug: \"source1\", source_field_key: \"sourceA\" } }\n        ]\n      };\n      const unpivotBlueprint: FederatedUnpivotSheetConfig = {\n        name: \"Unpivot Sheet\",\n        slug: \"unpivot-sheet\",\n        fields: [\n          { key: \"fieldB\", type: \"string\", label: \"B\" }\n        ],\n        unpivot_groups: {\n          group1: {\n            source_sheet_slug: \"source1\",\n            field_mappings: [ { fieldB: \"sourceB\" } ]\n          }\n        }\n      };\n      // Add to config\n      (manager as any).config.federated_workbook.sheets.push(standardBlueprint, unpivotBlueprint);\n      await manager.createMappings(standardBlueprint, standardSheet);\n      await manager.createMappings(unpivotBlueprint, unpivotSheet);\n      \n      // Access private method via any\n      const foundStandard = (manager as any).findBlueprint(\"standard-123\");\n      const foundUnpivot = (manager as any).findBlueprint(\"unpivot-123\");\n      const foundUnknown = (manager as any).findBlueprint(\"does-not-exist\");\n      \n      expect(foundStandard).toBe(standardBlueprint);\n      expect(foundUnpivot).toBe(unpivotBlueprint);\n      expect(foundUnknown).toBeUndefined();\n    });\n  });\n}); "]}