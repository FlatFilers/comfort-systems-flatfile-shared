{"version":3,"file":"record_filter.spec.js","sourceRoot":"","sources":["../../../../src/utils/federation/filters/record_filter.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Flatfile } from \"@flatfile/api\";\nimport { filterRecords, shouldIncludeRecord, FilterConfig } from \"./record_filter\";\n\ndescribe(\"record_filter\", () => {\n  // Sample records for testing\n  const records: Flatfile.RecordData[] = [\n    {\n      id: { value: \"1\" },\n      name: { value: \"John\" },\n      email: { value: \"john@example.com\" },\n      status: { value: \"active\" }\n    },\n    {\n      id: { value: \"2\" },\n      name: { value: \"Jane\" },\n      email: { value: undefined },\n      status: { value: \"inactive\" }\n    },\n    {\n      id: { value: \"3\" },\n      name: { value: \"Bob\" },\n      // email field is completely missing\n      status: { value: \"active\" }\n    },\n    {\n      id: { value: \"4\" },\n      name: { value: undefined },\n      email: { value: undefined },\n      status: { value: \"pending\" }\n    }\n  ];\n\n  describe(\"shouldIncludeRecord\", () => {\n    it(\"should return true when no filters are provided\", () => {\n      const result = shouldIncludeRecord(records[0], {});\n      expect(result).toBe(true);\n    });\n\n    it(\"should check if all required fields are present\", () => {\n      // All fields present\n      const filter1: FilterConfig = {\n        all_fields_required: [\"id\", \"name\"]\n      };\n      expect(shouldIncludeRecord(records[0], filter1)).toBe(true);\n      \n      // One field is undefined\n      const filter2: FilterConfig = {\n        all_fields_required: [\"id\", \"email\"]\n      };\n      expect(shouldIncludeRecord(records[1], filter2)).toBe(false);\n      \n      // One field is missing\n      const filter3: FilterConfig = {\n        all_fields_required: [\"id\", \"email\"]\n      };\n      expect(shouldIncludeRecord(records[2], filter3)).toBe(false);\n    });\n\n    it(\"should check if any required fields are present\", () => {\n      // Both fields present\n      const filter1: FilterConfig = {\n        any_fields_required: [\"id\", \"name\"]\n      };\n      expect(shouldIncludeRecord(records[0], filter1)).toBe(true);\n      \n      // One field present, one undefined\n      const filter2: FilterConfig = {\n        any_fields_required: [\"name\", \"email\"]\n      };\n      expect(shouldIncludeRecord(records[1], filter2)).toBe(true);\n      \n      // One field present, one missing\n      const filter3: FilterConfig = {\n        any_fields_required: [\"email\", \"status\"]\n      };\n      expect(shouldIncludeRecord(records[2], filter3)).toBe(true);\n      \n      // Both fields undefined\n      const filter4: FilterConfig = {\n        any_fields_required: [\"name\", \"email\"]\n      };\n      expect(shouldIncludeRecord(records[3], filter4)).toBe(false);\n    });\n\n    it(\"should check if excluded fields are not present\", () => {\n      // Both fields have values\n      const filter1: FilterConfig = {\n        any_fields_excluded: [\"name\", \"email\"]\n      };\n      expect(shouldIncludeRecord(records[0], filter1)).toBe(false);\n      \n      // One field has value, one is undefined\n      const filter2: FilterConfig = {\n        any_fields_excluded: [\"name\", \"email\"]\n      };\n      expect(shouldIncludeRecord(records[1], filter2)).toBe(false);\n      \n      // One field has value, one is missing\n      const filter3: FilterConfig = {\n        any_fields_excluded: [\"name\", \"email\"]\n      };\n      expect(shouldIncludeRecord(records[2], filter3)).toBe(false);\n      \n      // Both fields are undefined/missing\n      const filter4: FilterConfig = {\n        any_fields_excluded: [\"email\", \"non_existent_field\"]\n      };\n      expect(shouldIncludeRecord(records[3], filter4)).toBe(true);\n    });\n\n    it(\"should check if field values match required values\", () => {\n      // Value matches\n      const filter1: FilterConfig = {\n        field_values_required: {\n          \"status\": [\"active\"]\n        }\n      };\n      expect(shouldIncludeRecord(records[0], filter1)).toBe(true);\n      \n      // Value doesn't match\n      const filter2: FilterConfig = {\n        field_values_required: {\n          \"status\": [\"active\"]\n        }\n      };\n      expect(shouldIncludeRecord(records[1], filter2)).toBe(false);\n      \n      // Multiple possible values, one matches\n      const filter3: FilterConfig = {\n        field_values_required: {\n          \"status\": [\"active\", \"pending\"]\n        }\n      };\n      expect(shouldIncludeRecord(records[0], filter3)).toBe(true);\n      \n      // Multiple fields, all must match\n      const filter4: FilterConfig = {\n        field_values_required: {\n          \"id\": [\"1\"],\n          \"status\": [\"active\"]\n        }\n      };\n      expect(shouldIncludeRecord(records[0], filter4)).toBe(true);\n      \n      // Multiple fields, one doesn't match\n      const filter5: FilterConfig = {\n        field_values_required: {\n          \"id\": [\"1\"],\n          \"status\": [\"pending\"]\n        }\n      };\n      expect(shouldIncludeRecord(records[0], filter5)).toBe(false);\n      \n      // Field is undefined\n      const filter6: FilterConfig = {\n        field_values_required: {\n          \"email\": [\"any_value\"]\n        }\n      };\n      expect(shouldIncludeRecord(records[1], filter6)).toBe(false);\n    });\n\n    it(\"should check if field values don't match excluded values\", () => {\n      // Value is excluded\n      const filter1: FilterConfig = {\n        field_values_excluded: {\n          \"status\": [\"active\"]\n        }\n      };\n      expect(shouldIncludeRecord(records[0], filter1)).toBe(false);\n      \n      // Value is not excluded\n      const filter2: FilterConfig = {\n        field_values_excluded: {\n          \"status\": [\"pending\", \"inactive\"]\n        }\n      };\n      expect(shouldIncludeRecord(records[0], filter2)).toBe(true);\n      \n      // Multiple fields, none should be excluded\n      const filter3: FilterConfig = {\n        field_values_excluded: {\n          \"id\": [\"2\", \"3\"],\n          \"status\": [\"inactive\", \"pending\"]\n        }\n      };\n      expect(shouldIncludeRecord(records[0], filter3)).toBe(true);\n      \n      // Multiple fields, one is excluded\n      const filter4: FilterConfig = {\n        field_values_excluded: {\n          \"id\": [\"2\", \"3\"],\n          \"status\": [\"active\", \"pending\"]\n        }\n      };\n      expect(shouldIncludeRecord(records[0], filter4)).toBe(false);\n      \n      // Field is undefined (should skip this check)\n      const filter5: FilterConfig = {\n        field_values_excluded: {\n          \"email\": [\"any_value\"]\n        }\n      };\n      expect(shouldIncludeRecord(records[1], filter5)).toBe(true);\n    });\n\n    it(\"should handle direct values without .value property\", () => {\n      const recordWithDirectValues = {\n        id: \"1\",\n        name: \"John\"\n      };\n      \n      const filter: FilterConfig = {\n        all_fields_required: [\"id\", \"name\"]\n      };\n      \n      expect(shouldIncludeRecord(recordWithDirectValues as any, filter)).toBe(true);\n    });\n\n    it(\"should handle combination of different filter types\", () => {\n      // Complex filter with multiple conditions\n      const complexFilter: FilterConfig = {\n        all_fields_required: [\"id\", \"name\"],\n        any_fields_excluded: [\"non_existent_field\"],\n        field_values_required: {\n          \"status\": [\"active\"]\n        },\n        field_values_excluded: {\n          \"id\": [\"2\", \"3\", \"4\"]\n        }\n      };\n      \n      // Should match record 0\n      expect(shouldIncludeRecord(records[0], complexFilter)).toBe(true);\n      \n      // Should not match record 1 (status is inactive)\n      expect(shouldIncludeRecord(records[1], complexFilter)).toBe(false);\n      \n      // Should not match record 2 (id is 3, which is excluded)\n      expect(shouldIncludeRecord(records[2], complexFilter)).toBe(false);\n    });\n  });\n\n  describe(\"filterRecords\", () => {\n    it(\"should return all records when no filters are provided\", () => {\n      const result = filterRecords(records);\n      expect(result).toEqual(records);\n      \n      const resultWithEmptyFilter = filterRecords(records, {});\n      expect(resultWithEmptyFilter).toEqual(records);\n    });\n\n    it(\"should filter records based on all_fields_required\", () => {\n      const filter: FilterConfig = {\n        all_fields_required: [\"id\", \"name\", \"status\"]\n      };\n      \n      const result = filterRecords(records, filter);\n      \n      // Should include records 0, 1, 2 (all have id, name, and status)\n      expect(result.length).toBe(3);\n      expect(result).toContainEqual(records[0]);\n      expect(result).toContainEqual(records[1]);\n      expect(result).toContainEqual(records[2]);\n      expect(result).not.toContainEqual(records[3]); // name is undefined\n    });\n\n    it(\"should filter records based on any_fields_required\", () => {\n      const filter: FilterConfig = {\n        any_fields_required: [\"email\"]\n      };\n      \n      const result = filterRecords(records, filter);\n      \n      // Should include only record 0 (only one with defined email)\n      expect(result.length).toBe(1);\n      expect(result).toContainEqual(records[0]);\n    });\n\n    it(\"should filter records based on any_fields_excluded\", () => {\n      const filter: FilterConfig = {\n        any_fields_excluded: [\"email\"]\n      };\n      \n      const result = filterRecords(records, filter);\n      \n      // Should exclude record 0 (has email defined)\n      expect(result.length).toBe(3);\n      expect(result).not.toContainEqual(records[0]);\n      expect(result).toContainEqual(records[1]);\n      expect(result).toContainEqual(records[2]);\n      expect(result).toContainEqual(records[3]);\n    });\n\n    it(\"should filter records based on field_values_required\", () => {\n      const filter: FilterConfig = {\n        field_values_required: {\n          \"status\": [\"active\"]\n        }\n      };\n      \n      const result = filterRecords(records, filter);\n      \n      // Should include records 0 and 2 (active status)\n      expect(result.length).toBe(2);\n      expect(result).toContainEqual(records[0]);\n      expect(result).toContainEqual(records[2]);\n    });\n\n    it(\"should filter records based on field_values_excluded\", () => {\n      const filter: FilterConfig = {\n        field_values_excluded: {\n          \"status\": [\"inactive\", \"pending\"]\n        }\n      };\n      \n      const result = filterRecords(records, filter);\n      \n      // Should include records 0 and 2 (active status)\n      expect(result.length).toBe(2);\n      expect(result).toContainEqual(records[0]);\n      expect(result).toContainEqual(records[2]);\n    });\n\n    it(\"should filter records based on complex criteria\", () => {\n      const complexFilter: FilterConfig = {\n        all_fields_required: [\"id\", \"name\"],\n        field_values_required: {\n          \"status\": [\"active\"]\n        },\n        field_values_excluded: {\n          \"id\": [\"3\", \"4\"]\n        }\n      };\n      \n      const result = filterRecords(records, complexFilter);\n      \n      // Should only include record 0\n      expect(result.length).toBe(1);\n      expect(result).toContainEqual(records[0]);\n    });\n\n    it(\"should handle empty record array\", () => {\n      const result = filterRecords([], { all_fields_required: [\"id\"] });\n      expect(result).toEqual([]);\n    });\n  });\n}); "]}