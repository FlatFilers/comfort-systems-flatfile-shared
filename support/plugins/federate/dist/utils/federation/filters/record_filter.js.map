{"version":3,"file":"record_filter.js","sourceRoot":"","sources":["../../../../src/utils/federation/filters/record_filter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Flatfile } from \"@flatfile/api\";\n\n/**\n * Filter configuration for determining which records should be included\n */\nexport interface FilterConfig {\n  all_fields_required?: string[];\n  any_fields_required?: string[];\n  any_fields_excluded?: string[];\n  field_values_required?: { [key: string]: string[] };\n  field_values_excluded?: { [key: string]: string[] };\n}\n\n/**\n * Gets the actual value from a record field, handling both direct values and objects with value property\n * @param value - The field value to extract from\n * @returns The actual value\n */\nfunction getFieldValue(value: any): any {\n  if (value === undefined) {\n    return undefined;\n  }\n  return typeof value === 'object' && 'value' in value ? value.value : value;\n}\n\n/**\n * Filters an array of records based on the provided filter configuration\n * @param records - Records to filter\n * @param filters - Filter configuration\n * @returns Filtered records array\n * \n * @example\n * // Filter records where the 'status' field must be 'active' or 'pending'\n * const records = [\n *   { id: { value: \"1\" }, status: { value: \"active\" } },\n *   { id: { value: \"2\" }, status: { value: \"inactive\" } },\n *   { id: { value: \"3\" }, status: { value: \"pending\" } }\n * ];\n * const filters = {\n *   field_values_required: {\n *     status: [\"active\", \"pending\"]\n *   }\n * };\n * const filtered = filterRecords(records, filters);\n * // Result: [records[0], records[2]]\n * \n * @example\n * // Filter records that must have both 'name' and 'email' fields\n * const records = [\n *   { id: { value: \"1\" }, name: { value: \"Alice\" }, email: { value: \"alice@example.com\" } },\n *   { id: { value: \"2\" }, name: { value: \"Bob\" } },\n *   { id: { value: \"3\" }, email: { value: \"charlie@example.com\" } }\n * ];\n * const filters = {\n *   all_fields_required: [\"name\", \"email\"]\n * };\n * const filtered = filterRecords(records, filters);\n * // Result: [records[0]]\n */\nexport function filterRecords(\n  records: Flatfile.RecordData[],\n  filters?: FilterConfig\n): Flatfile.RecordData[] {\n  // If no filters defined, return all records\n  if (!filters || Object.keys(filters).length === 0) {\n    return records;\n  }\n  \n  return records.filter(record => shouldIncludeRecord(record, filters));\n}\n\n/**\n * Checks if a record should be included based on the filtering rules\n * @param recordValues - The record values to check\n * @param filters - The filtering rules to apply\n * @returns boolean indicating if the record should be included\n */\nexport function shouldIncludeRecord(\n  recordValues: { [key: string]: { value: any } | any },\n  filters: FilterConfig\n): boolean {\n  // Fast-path - if no filters, include record\n  if (!filters || Object.keys(filters).length === 0) {\n    return true;\n  }\n  \n  // Check if all required fields are present\n  if (filters.all_fields_required?.length) {\n    for (const field of filters.all_fields_required) {\n      const value = getFieldValue(recordValues[field]);\n      if (value === undefined || value === null) {\n        return false;\n      }\n    }\n  }\n\n  // Check if at least one of the required fields is present\n  if (filters.any_fields_required?.length) {\n    const hasAnyRequired = filters.any_fields_required.some(field => {\n      const value = getFieldValue(recordValues[field]);\n      return value !== undefined && value !== null;\n    });\n    if (!hasAnyRequired) {\n      return false;\n    }\n  }\n\n  // Check if none of the excluded fields are present\n  if (filters.any_fields_excluded?.length) {\n    for (const field of filters.any_fields_excluded) {\n      const value = getFieldValue(recordValues[field]);\n      if (value !== undefined && value !== null) {\n        return false;\n      }\n    }\n  }\n\n  // Check if field values match required values\n  if (filters.field_values_required) {\n    for (const [field, requiredValues] of Object.entries(filters.field_values_required)) {\n      const value = getFieldValue(recordValues[field]);\n      if (value === undefined || value === null) {\n        return false;\n      }\n      \n      if (!requiredValues.includes(value?.toString())) {\n        return false;\n      }\n    }\n  }\n\n  // Check if field values don't match excluded values\n  if (filters.field_values_excluded) {\n    for (const [field, excludedValues] of Object.entries(filters.field_values_excluded)) {\n      const value = getFieldValue(recordValues[field]);\n      if (value === undefined || value === null) {\n        continue;\n      }\n      \n      if (excludedValues.includes(value?.toString())) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}"]}