{"version":3,"file":"merge_processor.spec.js","sourceRoot":"","sources":["../../../../src/utils/federation/processors/merge_processor.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Flatfile } from \"@flatfile/api\";\nimport { DedupeConfig } from \"../../../types\";\nimport { mergeRecords } from \"./merge_processor\";\n\ndescribe(\"mergeRecords\", () => {\n  // Sample records with a common field \"id\"\n  const records: Flatfile.RecordData[] = [\n    {\n      id: { value: \"1\" },\n      name: { value: \"John\" },\n      email: { value: \"john@example.com\" }\n    },\n    {\n      id: { value: \"1\" },\n      name: { value: \"Johnny\" },\n      phone: { value: \"555-1234\" }\n    },\n    {\n      id: { value: \"2\" },\n      name: { value: \"Jane\" },\n      email: { value: \"jane@example.com\" }\n    },\n    {\n      id: { value: \"3\" },\n      name: { value: undefined },\n      email: { value: \"unknown@example.com\" }\n    }\n  ];\n  \n  // Additional sample records for composite key testing\n  const compositeRecords: Flatfile.RecordData[] = [\n    {\n      firstName: { value: \"John\" },\n      lastName: { value: \"Doe\" },\n      email: { value: \"john.doe@example.com\" },\n      age: { value: \"30\" }\n    },\n    {\n      firstName: { value: \"John\" },\n      lastName: { value: \"Doe\" },\n      phone: { value: \"555-1234\" },\n      department: { value: \"Sales\" }\n    },\n    {\n      firstName: { value: \"Jane\" },\n      lastName: { value: \"Doe\" },\n      email: { value: \"jane.doe@example.com\" }\n    },\n    {\n      firstName: { value: \"John\" },\n      lastName: { value: \"Smith\" },\n      email: { value: \"john.smith@example.com\" }\n    },\n    {\n      firstName: { value: \"John\" },\n      // Missing lastName\n      email: { value: \"john@example.com\" }\n    }\n  ];\n  \n  it(\"should return original records if no dedupeConfig is provided\", () => {\n    const result = mergeRecords(records);\n    expect(result).toEqual(records);\n  });\n  \n  it(\"should return original records if records array is empty\", () => {\n    const result = mergeRecords([], { on: \"id\", type: \"merge\", keep: \"first\" });\n    expect(result).toEqual([]);\n  });\n  \n  it(\"should merge records with 'merge' type and 'first' keep strategy\", () => {\n    const dedupeConfig: DedupeConfig = {\n      on: \"id\",\n      type: \"merge\",\n      keep: \"first\"\n    };\n    \n    const result = mergeRecords(records, dedupeConfig);\n    \n    // Expect 3 records (id=1 records merged, id=2, id=3)\n    expect(result.length).toBe(3);\n    \n    // Check merged record (should keep John's name and have both email and phone)\n    const mergedRecord = result.find(r => r.id.value === \"1\");\n    expect(mergedRecord).toBeDefined();\n    expect(mergedRecord?.name.value).toBe(\"John\"); // First record's name\n    expect(mergedRecord?.email.value).toBe(\"john@example.com\");\n    expect(mergedRecord?.phone.value).toBe(\"555-1234\");\n  });\n  \n  it(\"should merge records with 'merge' type and 'last' keep strategy\", () => {\n    const dedupeConfig: DedupeConfig = {\n      on: \"id\",\n      type: \"merge\",\n      keep: \"last\"\n    };\n    \n    const result = mergeRecords(records, dedupeConfig);\n    \n    // Check merged record (should keep Johnny's name and have both email and phone)\n    const mergedRecord = result.find(r => r.id.value === \"1\");\n    expect(mergedRecord).toBeDefined();\n    expect(mergedRecord?.name.value).toBe(\"Johnny\"); // Last record's name\n    expect(mergedRecord?.email.value).toBe(\"john@example.com\");\n    expect(mergedRecord?.phone.value).toBe(\"555-1234\");\n  });\n  \n  it(\"should delete duplicate records with 'delete' type and 'first' keep strategy\", () => {\n    const dedupeConfig: DedupeConfig = {\n      on: \"id\",\n      type: \"delete\",\n      keep: \"first\"\n    };\n    \n    const result = mergeRecords(records, dedupeConfig);\n    \n    // Expect 3 records (id=1 keeping just the first, id=2, id=3)\n    expect(result.length).toBe(3);\n    \n    // Check kept record (should be John's record only)\n    const keptRecord = result.find(r => r.id.value === \"1\");\n    expect(keptRecord).toBeDefined();\n    expect(keptRecord?.name.value).toBe(\"John\");\n    expect(keptRecord?.email.value).toBe(\"john@example.com\");\n    expect(keptRecord?.phone).toBeUndefined();\n  });\n  \n  it(\"should delete duplicate records with 'delete' type and 'last' keep strategy\", () => {\n    const dedupeConfig: DedupeConfig = {\n      on: \"id\",\n      type: \"delete\",\n      keep: \"last\"\n    };\n    \n    const result = mergeRecords(records, dedupeConfig);\n    \n    // Check kept record (should be Johnny's record only)\n    const keptRecord = result.find(r => r.id.value === \"1\");\n    expect(keptRecord).toBeDefined();\n    expect(keptRecord?.name.value).toBe(\"Johnny\");\n    expect(keptRecord?.email).toBeUndefined();\n    expect(keptRecord?.phone.value).toBe(\"555-1234\");\n  });\n  \n  it(\"should handle records with null merge field values\", () => {\n    const recordsWithNull: Flatfile.RecordData[] = [\n      { id: { value: undefined }, name: { value: \"Unknown\" } },\n      { id: { value: \"1\" }, name: { value: \"John\" } }\n    ];\n    \n    const dedupeConfig: DedupeConfig = {\n      on: \"id\",\n      type: \"merge\",\n      keep: \"first\"\n    };\n    \n    const result = mergeRecords(recordsWithNull, dedupeConfig);\n    \n    // Should have 1 record with id=1 and 0 records with null id\n    expect(result.length).toBe(1);\n    expect(result[0].id.value).toBe(\"1\");\n  });\n  \n  it(\"should skip records with undefined merge field\", () => {\n    const recordsWithUndefined: Flatfile.RecordData[] = [\n      { name: { value: \"Unknown\" } } as any, // Missing id field\n      { id: { value: \"1\" }, name: { value: \"John\" } }\n    ];\n    \n    const dedupeConfig: DedupeConfig = {\n      on: \"id\",\n      type: \"merge\",\n      keep: \"first\"\n    };\n    \n    const result = mergeRecords(recordsWithUndefined, dedupeConfig);\n    \n    // Should have 1 record with id=1 only\n    expect(result.length).toBe(1);\n    expect(result[0].id.value).toBe(\"1\");\n  });\n  \n  it(\"should include all records if merge type is invalid\", () => {\n    // Cast through unknown to suppress type-checking\n    const invalidConfig = {\n      on: \"id\",\n      type: \"invalid_type\",\n      keep: \"first\"\n    } as unknown as DedupeConfig;\n    \n    const result = mergeRecords(records, invalidConfig);\n    \n    // All records should be included including duplicates\n    expect(result.length).toBe(4);\n  });\n  \n  it(\"should prefer values from the base record when merging\", () => {\n    // Create records with same id but different values\n    const conflictRecords: Flatfile.RecordData[] = [\n      {\n        id: { value: \"1\" },\n        name: { value: \"Original\" },\n        status: { value: \"Active\" }\n      },\n      {\n        id: { value: \"1\" },\n        name: { value: \"Changed\" },\n        email: { value: \"test@example.com\" }\n      }\n    ];\n    \n    const dedupeConfig: DedupeConfig = {\n      on: \"id\",\n      type: \"merge\",\n      keep: \"first\"\n    };\n    \n    const result = mergeRecords(conflictRecords, dedupeConfig);\n    \n    // Check merged record keeps original name but adds email\n    const mergedRecord = result[0];\n    expect(mergedRecord.name.value).toBe(\"Original\"); // Keep base record value\n    expect(mergedRecord.email.value).toBe(\"test@example.com\"); // Add new field\n    expect(mergedRecord.status.value).toBe(\"Active\"); // Keep base record field\n  });\n  \n  // New tests for array-based 'on' property\n  it(\"should merge records based on composite key with array 'on' property\", () => {\n    const dedupeConfig: DedupeConfig = {\n      on: [\"firstName\", \"lastName\"],\n      type: \"merge\",\n      keep: \"first\"\n    };\n    \n    const result = mergeRecords(compositeRecords, dedupeConfig);\n    \n    // Expect 4 records: 1 merged John Doe, 1 Jane Doe, 1 John Smith, 1 John (missing lastName)\n    expect(result.length).toBe(4);\n    \n    // Check the merged John Doe record\n    const johnDoe = result.find(r => \n      r.firstName.value === \"John\" && r.lastName.value === \"Doe\"\n    );\n    \n    expect(johnDoe).toBeDefined();\n    expect(johnDoe?.email.value).toBe(\"john.doe@example.com\");\n    expect(johnDoe?.phone.value).toBe(\"555-1234\");\n    expect(johnDoe?.age.value).toBe(\"30\");\n    expect(johnDoe?.department.value).toBe(\"Sales\");\n    \n    // Check the record with missing lastName\n    const johnNoLastName = result.find(r => \n      r.firstName.value === \"John\" && !r.lastName\n    );\n    \n    expect(johnNoLastName).toBeDefined();\n    expect(johnNoLastName?.email.value).toBe(\"john@example.com\");\n  });\n  \n  it(\"should include records where any part of the composite key is missing\", () => {\n    const dedupeConfig: DedupeConfig = {\n      on: [\"firstName\", \"lastName\"],\n      type: \"merge\",\n      keep: \"first\"\n    };\n    \n    const result = mergeRecords(compositeRecords, dedupeConfig);\n    \n    // The record with only firstName but missing lastName should be included\n    const recordsWithJohnFirstName = result.filter(r => \n      r.firstName.value === \"John\"\n    );\n    \n    // Should have 3 records with firstName=\"John\": John Doe, John Smith, and John (missing lastName)\n    expect(recordsWithJohnFirstName.length).toBe(3);\n    \n    // Should have a record with email \"john@example.com\" (from the record with missing lastName)\n    const hasIncompleteRecord = result.some(r => \n      r.email?.value === \"john@example.com\"\n    );\n    expect(hasIncompleteRecord).toBe(true);\n  });\n  \n  it(\"should delete duplicate records based on composite key\", () => {\n    const dedupeConfig: DedupeConfig = {\n      on: [\"firstName\", \"lastName\"],\n      type: \"delete\",\n      keep: \"last\"\n    };\n    \n    const result = mergeRecords(compositeRecords, dedupeConfig);\n    \n    // Find the John Doe record (should be the last one with those values)\n    const johnDoe = result.find(r => \n      r.firstName.value === \"John\" && r.lastName.value === \"Doe\"\n    );\n    \n    expect(johnDoe).toBeDefined();\n    // Should keep the second John Doe record with phone and department\n    expect(johnDoe?.phone.value).toBe(\"555-1234\");\n    expect(johnDoe?.department.value).toBe(\"Sales\");\n    // Should not have fields from the first John Doe record\n    expect(johnDoe?.email).toBeUndefined();\n    expect(johnDoe?.age).toBeUndefined();\n  });\n}); "]}