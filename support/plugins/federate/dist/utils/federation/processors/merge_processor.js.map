{"version":3,"file":"merge_processor.js","sourceRoot":"","sources":["../../../../src/utils/federation/processors/merge_processor.ts"],"names":[],"mappings":";;AA6CA,oCAmFC;AA7HD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAyCE;AACF,SAAgB,YAAY,CAC1B,OAA8B,EAC9B,YAA2B;;IAE3B,IAAI,CAAC,YAAY,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC1C,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,iCAAiC;IACjC,MAAM,cAAc,GAAG,IAAI,GAAG,EAAiC,CAAC;IAChE,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;QAC7B,qEAAqE;QACrE,IAAI,GAAuB,CAAC;QAE5B,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE,CAAC;YAEnC,mDAAmD;YACnD,MAAM,QAAQ,GAAa,YAAY,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,eAAC,OAAA,CAAA,MAAA,MAAA,MAAM,CAAC,KAAK,CAAC,0CAAE,KAAK,0CAAE,QAAQ,EAAE,KAAI,EAAE,CAAA,EAAA,CAAC,CAAC;YAEhG,IAAI,QAAQ,CAAC,MAAM,KAAK,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC;gBAC/C,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5B,CAAC;QAEH,CAAC;aAAM,CAAC;YACN,qCAAqC;YACrC,MAAM,UAAU,GAAG,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YAC3C,IAAI,UAAU,IAAI,UAAU,CAAC,KAAK,EAAE,CAAC;gBACnC,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YACpC,CAAC;QACH,CAAC;QAED,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,SAAS;QACX,CAAC;QAED,IAAI,KAAK,GAAG,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACpC,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,KAAK,GAAG,EAAE,CAAC;YACX,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACjC,CAAC;QACD,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACrB,CAAC;IAED,yCAAyC;IACzC,MAAM,MAAM,GAA0B,EAAE,CAAC;IACzC,MAAM,WAAW,GAAG,YAAY,CAAC,IAAI,KAAK,OAAO,CAAC;IAElD,KAAK,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI,cAAc,EAAE,CAAC;QACxC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACvB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACtB,SAAS;QACX,CAAC;QAED,IAAI,YAAY,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YACnC,sDAAsD;YACtD,MAAM,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;YACjD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5B,CAAC;aAAM,IAAI,YAAY,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YACzC,sEAAsE;YACtE,MAAM,SAAS,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;YACrD,MAAM,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;YACpC,MAAM,YAAY,GAAG,EAAE,GAAG,UAAU,EAAE,CAAC;YAEvC,yBAAyB;YACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACtC,IAAI,CAAC,KAAK,SAAS;oBAAE,SAAS;gBAE9B,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxB,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;oBAClD,IAAI,CAAC,CAAA,MAAA,YAAY,CAAC,GAAG,CAAC,0CAAE,KAAK,CAAA,IAAI,KAAK,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;wBAC3D,YAAY,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;oBAC5B,CAAC;gBACH,CAAC;YACH,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC5B,CAAC;aAAM,CAAC;YACN,8CAA8C;YAC9C,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;QACxB,CAAC;IACH,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { Flatfile } from \"@flatfile/api\";\nimport { DedupeConfig } from \"../../../types\";\n\n/**\n* Merges records based on the merge configuration, handling both delete and merge types\n* @param records - Array of records to merge\n* @param dedupeConfig - Merge configuration specifying how to handle duplicates\n* @returns Array of merged records\n* \n* @example\n* // Delete type merge with single field (keep first)\n* const records = [\n*   { id: { value: \"001\" }, name: { value: \"First\" } },\n*   { id: { value: \"001\" }, name: { value: \"Duplicate\" } }\n* ];\n* const config = { type: \"delete\", on: \"id\", keep: \"first\" };\n* // Result: [{ id: { value: \"001\" }, name: { value: \"First\" } }]\n* \n* @example\n* // Merge type with single field (keep last as base, fill in missing values)\n* const records = [\n*   { id: { value: \"001\" }, name: { value: \"First\" }, email: { value: \"email@example.com\" } },\n*   { id: { value: \"001\" }, name: { value: \"Last\" } }\n* ];\n* const config = { type: \"merge\", on: \"id\", keep: \"last\" };\n* // Result: [{ id: { value: \"001\" }, name: { value: \"Last\" }, email: { value: \"email@example.com\" } }]\n* \n* @example\n* // Delete type merge with composite key (array of fields)\n* const records = [\n*   { firstName: { value: \"John\" }, lastName: { value: \"Doe\" }, email: { value: \"john@example.com\" } },\n*   { firstName: { value: \"John\" }, lastName: { value: \"Doe\" }, phone: { value: \"555-1234\" } }\n* ];\n* const config = { type: \"delete\", on: [\"firstName\", \"lastName\"], keep: \"first\" };\n* // Result: [{ firstName: { value: \"John\" }, lastName: { value: \"Doe\" }, email: { value: \"john@example.com\" } }]\n* \n* @example\n* // Merge type with composite key (array of fields)\n* const records = [\n*   { firstName: { value: \"John\" }, lastName: { value: \"Doe\" }, email: { value: \"john@example.com\" } },\n*   { firstName: { value: \"John\" }, lastName: { value: \"Doe\" }, phone: { value: \"555-1234\" } }\n* ];\n* const config = { type: \"merge\", on: [\"firstName\", \"lastName\"], keep: \"first\" };\n* // Result: [{ firstName: { value: \"John\" }, lastName: { value: \"Doe\" }, email: { value: \"john@example.com\" }, phone: { value: \"555-1234\" } }]\n*/\nexport function mergeRecords(\n  records: Flatfile.RecordData[], \n  dedupeConfig?: DedupeConfig\n): Flatfile.RecordData[] {\n  if (!dedupeConfig || records.length === 0) {\n    return records;\n  }\n  \n  // Group records by the merge key\n  const groupedRecords = new Map<string, Flatfile.RecordData[]>();\n  for (const record of records) {\n    // Generate a composite key if dedupeConfig.on is an array of strings\n    let key: string | undefined;\n    \n    if (Array.isArray(dedupeConfig.on)) {\n      \n      // Create a composite key from all specified fields\n      const keyParts: string[] = dedupeConfig.on.map(field => record[field]?.value?.toString() || \"\");\n      \n      if (keyParts.length === dedupeConfig.on.length) {\n        key = keyParts.join('::');\n      }\n      \n    } else {\n      // Original single field key behavior\n      const mergeValue = record[dedupeConfig.on];\n      if (mergeValue && mergeValue.value) {\n        key = mergeValue.value.toString();\n      }\n    }\n    \n    if (!key) {\n      continue;\n    }\n    \n    let group = groupedRecords.get(key);\n    if (!group) {\n      group = [];\n      groupedRecords.set(key, group);\n    }\n    group.push(record);\n  }\n  \n  // Process each group based on merge type\n  const result: Flatfile.RecordData[] = [];\n  const isKeepFirst = dedupeConfig.keep === 'first';\n  \n  for (const [_, group] of groupedRecords) {\n    if (group.length === 1) {\n      result.push(group[0]);\n      continue;\n    }\n    \n    if (dedupeConfig.type === 'delete') {\n      // For delete type, keep only the first or last record\n      const index = isKeepFirst ? 0 : group.length - 1;\n      result.push(group[index]);\n    } else if (dedupeConfig.type === 'merge') {\n      // For merge type, start with first or last record and merge in others\n      const baseIndex = isKeepFirst ? 0 : group.length - 1;\n      const baseRecord = group[baseIndex];\n      const mergedRecord = { ...baseRecord };\n      \n      // Merge in other records\n      for (let i = 0; i < group.length; i++) {\n        if (i === baseIndex) continue;\n        \n        const record = group[i];\n        for (const [key, value] of Object.entries(record)) {\n          if (!mergedRecord[key]?.value && value.value !== undefined) {\n            mergedRecord[key] = value;\n          }\n        }\n      }\n      \n      result.push(mergedRecord);\n    } else {\n      // If no valid merge type, include all records\n      result.push(...group);\n    }\n  }\n  \n  return result;\n} "]}