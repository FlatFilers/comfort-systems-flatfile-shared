{"version":3,"file":"unpivot_processor.spec.js","sourceRoot":"","sources":["../../../../src/utils/federation/processors/unpivot_processor.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, describe, it } from \"@jest/globals\";\nimport { createUnpivotedRecords } from \"./unpivot_processor\";\nimport { UnpivotGroupConfig } from \"../../../types\";\n\ndescribe(\"unpivot_processor\", () => {\n  describe(\"createUnpivotedRecords\", () => {\n    const sourceRecord = {\n      field1: { value: \"value1\" },\n      field2: { value: \"value2\" }\n    };\n    \n    it(\"should create unpivoted records based on field mappings\", () => {\n      const unpivotGroups: Array<[string, UnpivotGroupConfig]> = [\n        [\"group1\", {\n          source_sheet_slug: \"source1\",\n          field_mappings: [\n            {\n              target_field1: \"field1\",\n              target_field2: \"field2\"\n            }\n          ]\n        } as UnpivotGroupConfig]\n      ];\n      \n      const result = createUnpivotedRecords(sourceRecord, \"source_slug\", unpivotGroups);\n      \n      expect(result.length).toBe(1);\n      expect(result[0].target_field1.value).toBe(\"value1\");\n      expect(result[0].target_field2.value).toBe(\"value2\");\n    });\n    \n    it(\"should create unpivoted records based on field mappings with source_sheet property\", () => {\n      const unpivotGroups: Array<[string, UnpivotGroupConfig]> = [\n        [\"group1\", {\n          source_sheet_slug: \"source1\",\n          field_mappings: [\n            {\n              target_field1: \"field1\",\n              target_field2: \"field2\",\n              sheet_name: \"<<source_slug>>\"\n            }\n          ]\n        } as UnpivotGroupConfig]\n      ];\n      \n      const result = createUnpivotedRecords(sourceRecord, \"source_slug\", unpivotGroups);\n      \n      expect(result.length).toBe(1);\n      expect(result[0].target_field1.value).toBe(\"value1\");\n      expect(result[0].target_field2.value).toBe(\"value2\");\n      expect(result[0].sheet_name.value).toBe(\"source_slug\");\n    });\n    \n    it(\"should handle multiple unpivot groups\", () => {\n      const unpivotGroups: Array<[string, UnpivotGroupConfig]> = [\n        [\"group1\", {\n          source_sheet_slug: \"source1\",\n          field_mappings: [\n            {\n              target_field1: \"field1\"\n            }\n          ]\n        } as UnpivotGroupConfig],\n        [\"group2\", {\n          source_sheet_slug: \"source1\",\n          field_mappings: [\n            {\n              target_field2: \"field2\"\n            }\n          ]\n        } as UnpivotGroupConfig]\n      ];\n      \n      const result = createUnpivotedRecords(sourceRecord, \"source_slug\", unpivotGroups);\n      \n      expect(result.length).toBe(2);\n      expect(result[0].target_field1.value).toBe(\"value1\");\n      expect(result[1].target_field2.value).toBe(\"value2\");\n    });\n    \n    it(\"should skip mappings with undefined source values\", () => {\n      const unpivotGroups: Array<[string, UnpivotGroupConfig]> = [\n        [\"group1\", {\n          source_sheet_slug: \"source1\",\n          field_mappings: [\n            {\n              target_field: \"nonexistent_field\"\n            }\n          ]\n        } as UnpivotGroupConfig]\n      ];\n      \n      const result = createUnpivotedRecords(sourceRecord, \"source_slug\", unpivotGroups);\n      \n      expect(result.length).toBe(0);\n    });\n    \n    it(\"should skip records with no valid values from mappings\", () => {\n      const unpivotGroups: Array<[string, UnpivotGroupConfig]> = [\n        [\"group1\", {\n          source_sheet_slug: \"source1\",\n          field_mappings: [\n            {\n              target_field1: \"nonexistent_field1\",\n              target_field2: \"nonexistent_field2\"\n            }\n          ]\n        } as UnpivotGroupConfig]\n      ];\n      \n      const result = createUnpivotedRecords(sourceRecord, \"source_slug\", unpivotGroups);\n      \n      expect(result.length).toBe(0);\n    });\n    \n    it(\"should handle static values with << and >>\", () => {\n      const unpivotGroups: Array<[string, UnpivotGroupConfig]> = [\n        [\"group1\", {\n          source_sheet_slug: \"source1\",\n          field_mappings: [\n            {\n              target_field1: \"field1\",\n              sheet_name: \"<<source_slug>>\"\n            }\n          ]\n        } as UnpivotGroupConfig]\n      ];\n      \n      const result = createUnpivotedRecords(sourceRecord, \"source_slug\", unpivotGroups);\n      \n      expect(result.length).toBe(1);\n      expect(result[0].target_field1.value).toBe(\"value1\");\n      expect(result[0].sheet_name.value).toBe(\"source_slug\");\n    });\n    \n    it(\"should handle empty unpivot groups array\", () => {\n      const result = createUnpivotedRecords(sourceRecord, \"source_slug\", []);\n      \n      expect(result.length).toBe(0);\n    });\n    \n    it(\"should handle groups with empty field_mappings array\", () => {\n      const unpivotGroups: Array<[string, UnpivotGroupConfig]> = [\n        [\"group1\", {\n          source_sheet_slug: \"source1\",\n          field_mappings: []\n        } as UnpivotGroupConfig]\n      ];\n      \n      const result = createUnpivotedRecords(sourceRecord, \"source_slug\", unpivotGroups);\n      \n      expect(result.length).toBe(0);\n    });\n    \n    it(\"should handle undefined field_mappings in a group\", () => {\n      const unpivotGroups: Array<[string, UnpivotGroupConfig]> = [\n        [\"group1\", {\n          source_sheet_slug: \"source1\",\n          field_mappings: undefined\n        } as unknown as UnpivotGroupConfig]\n      ];\n      \n      const result = createUnpivotedRecords(sourceRecord, \"source_slug\", unpivotGroups);\n      \n      expect(result.length).toBe(0);\n    });\n    \n    it(\"should process multiple mappings in a single group\", () => {\n      const unpivotGroups: Array<[string, UnpivotGroupConfig]> = [\n        [\"group1\", {\n          source_sheet_slug: \"source1\",\n          field_mappings: [\n            {\n              target_field1: \"field1\"\n            },\n            {\n              target_field2: \"field2\"\n            }\n          ]\n        } as UnpivotGroupConfig]\n      ];\n      \n      const result = createUnpivotedRecords(sourceRecord, \"source_slug\", unpivotGroups);\n      \n      expect(result.length).toBe(2);\n      expect(result[0].target_field1.value).toBe(\"value1\");\n      expect(result[1].target_field2.value).toBe(\"value2\");\n    });\n    \n    it(\"should handle mixed static values and regular field mappings\", () => {\n      const unpivotGroups: Array<[string, UnpivotGroupConfig]> = [\n        [\"group1\", {\n          source_sheet_slug: \"source1\",\n          field_mappings: [\n            {\n              target_field: \"field1\",\n              sheet_name: \"<<source_slug>>\",\n              another_field: \"field1\"\n            }\n          ]\n        } as UnpivotGroupConfig]\n      ];\n      \n      const result = createUnpivotedRecords(sourceRecord, \"source_slug\", unpivotGroups);\n      \n      expect(result.length).toBe(1);\n      expect(result[0].target_field.value).toBe(\"value1\");\n      expect(result[0].sheet_name.value).toBe(\"source_slug\");\n      expect(result[0].another_field.value).toBe(\"value1\");\n    });\n    \n    it(\"should handle null sourceRecord\", () => {\n      const unpivotGroups: Array<[string, UnpivotGroupConfig]> = [\n        [\"group1\", {\n          source_sheet_slug: \"source1\",\n          field_mappings: [\n            {\n              target_field: \"field1\"\n            }\n          ]\n        } as UnpivotGroupConfig]\n      ];\n      \n      const result = createUnpivotedRecords(null as any, \"source_slug\", unpivotGroups);\n      \n      expect(result.length).toBe(0);\n    });\n    \n    it(\"should attach virtual fields to each unpivoted record\", () => {\n      const sourceRecord = {\n        field1: { value: \"value1\" },\n        field2: { value: \"value2\" },\n        virtual_source: { value: \"virtualValue\" }\n      };\n      const unpivotGroups: Array<[string, UnpivotGroupConfig]> = [\n        [\"group1\", {\n          source_sheet_slug: \"source1\",\n          field_mappings: [\n            {\n              target_field1: \"field1\",\n              target_field2: \"field2\"\n            }\n          ]\n        }]\n      ];\n      const virtualFieldsMap = new Map([[\"virtual_source\", \"virtual_field\"]]);\n      const result = createUnpivotedRecords(sourceRecord, \"source_slug\", unpivotGroups, virtualFieldsMap);\n      expect(result.length).toBe(1);\n      expect(result[0].target_field1.value).toBe(\"value1\");\n      expect(result[0].target_field2.value).toBe(\"value2\");\n      expect(result[0].virtual_field.value).toBe(\"virtualValue\");\n    });\n    \n    it(\"should not include virtual field if missing in source\", () => {\n      const sourceRecord = {\n        field1: { value: \"value1\" }\n      };\n      const unpivotGroups: Array<[string, UnpivotGroupConfig]> = [\n        [\"group1\", {\n          source_sheet_slug: \"source1\",\n          field_mappings: [\n            {\n              target_field1: \"field1\"\n            }\n          ]\n        }]\n      ];\n      const virtualFieldsMap = new Map([[\"virtual_source\", \"virtual_field\"]]);\n      const result = createUnpivotedRecords(sourceRecord, \"source_slug\", unpivotGroups, virtualFieldsMap);\n      expect(result.length).toBe(1);\n      expect(result[0].target_field1.value).toBe(\"value1\");\n      expect(result[0]).not.toHaveProperty(\"virtual_field\");\n    });\n  });\n}); "]}