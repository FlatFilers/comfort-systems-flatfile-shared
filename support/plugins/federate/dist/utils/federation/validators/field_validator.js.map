{"version":3,"file":"field_validator.js","sourceRoot":"","sources":["../../../../src/utils/federation/validators/field_validator.ts"],"names":[],"mappings":";;AAgBA,wCA6CC;AAoBD,sCA+DC;AA5ID,uDAAmE;AAEnE;;;;;;;;;EASE;AACF,SAAgB,cAAc,CAAE,sCAAsC;AACpE,UAA+B,EAC/B,aAA8C,EAC9C,SAAiB,EACjB,YAAyB,EACzB,cAA8B;IAE9B,MAAM,YAAY,GAAG,IAAI,GAAG,EAAU,CAAC;IACvC,MAAM,aAAa,GAAG,IAAI,GAAG,EAAU,CAAC,CAAC,mCAAmC;IAE5E,0BAA0B;IAC1B,IAAI,cAAc,CAAC,KAAK;QAAE,IAAA,qBAAO,EAAC,wBAAwB,EAAE,cAAc,UAAU,CAAC,MAAM,oBAAoB,CAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,MAAM,KAAI,CAAC,6BAA6B,SAAS,GAAG,CAAC,CAAC;IAEpL,gEAAgE;IAChE,MAAM,gBAAgB,GAAG,CAAC,eAAoC,EAAE,SAAkB,EAAE,EAAE;QACpF,eAAe,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAChC,aAAa,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC,CAAC,iCAAiC;YAEvE,kEAAkE;YAClE,IAAI,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;gBAChC,MAAM,aAAa,GAAG,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,2BAA2B,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,yBAAyB,CAAC;gBACpJ,0BAA0B;gBAC1B,IAAI,cAAc,CAAC,KAAK;oBAAE,IAAA,sBAAQ,EAAC,wBAAwB,EAAE,cAAc,KAAK,CAAC,GAAG,MAAM,aAAa,qBAAqB,SAAS,GAAG,CAAC,CAAC;gBAC1I,MAAM,IAAI,KAAK,CAAC,yCAAyC,KAAK,CAAC,GAAG,MAAM,aAAa,qBAAqB,SAAS,wDAAwD,CAAC,CAAC;YAC/K,CAAC;YACD,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC5B,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC/B,CAAC;YACD,cAAc,CAAC,KAAK,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC,CAAC,wBAAwB;QAC/E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,uBAAuB;IACvB,gBAAgB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IAEpC,wCAAwC;IACxC,IAAI,aAAa,EAAE,CAAC;QAClB,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,0BAA0B;IAC1B,IAAI,cAAc,CAAC,KAAK;QAAE,IAAA,qBAAO,EAAC,wBAAwB,EAAE,8BAA8B,SAAS,yBAAyB,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC;IAEjJ,OAAO,YAAY,CAAC,CAAC,2CAA2C;AAClE,CAAC;AAED,SAAS,cAAc,CAAC,KAAwB,EAAE,YAAyB,EAAE,cAA8B;;IACzG,IAAI,KAAK,CAAC,eAAe,EAAE,CAAC;QAC1B,MAAM,WAAW,GAAG,MAAA,KAAK,CAAC,eAAe,CAAC,YAAY,0CAAE,IAAI,CAAC;QAC7D,MAAM,eAAe,GAAG,KAAK,CAAC,eAAe,CAAC,iBAAiB,CAAC;QAEhE,IAAI,WAAW,EAAE,CAAC;YAChB,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAC9B,0BAA0B;YAC1B,IAAI,cAAc,CAAC,KAAK;gBAAE,IAAA,qBAAO,EAAC,wBAAwB,EAAE,UAAU,KAAK,CAAC,GAAG,8BAA8B,WAAW,GAAG,CAAC,CAAC;QAC/H,CAAC;QACD,IAAI,eAAe,EAAE,CAAC;YACpB,YAAY,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAClC,0BAA0B;YAC1B,IAAI,cAAc,CAAC,KAAK;gBAAE,IAAA,qBAAO,EAAC,wBAAwB,EAAE,UAAU,KAAK,CAAC,GAAG,mCAAmC,eAAe,GAAG,CAAC,CAAC;QACxI,CAAC;IACH,CAAC;AACH,CAAC;AAED,SAAgB,aAAa,CAAC,KAAwB,EAAE,cAA8B;IACpF,wCAAwC;IACxC,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC;QAC3B,0BAA0B;QAC1B,IAAI,cAAc,CAAC,KAAK;YAAE,IAAA,qBAAO,EAAC,wBAAwB,EAAE,UAAU,KAAK,CAAC,GAAG,+CAA+C,CAAC,CAAC;QAChI,OAAO;IACT,CAAC;IAED,0BAA0B;IAC1B,IAAI,cAAc,CAAC,KAAK;QAAE,IAAA,qBAAO,EAAC,wBAAwB,EAAE,qBAAqB,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;IAE/F,6DAA6D;IAC7D,MAAM,cAAc,GAAG,KAAK,CAAC,eAAe,CAAC,YAAY,KAAK,SAAS,CAAC;IACxE,MAAM,kBAAkB,GAAG,KAAK,CAAC,eAAe,CAAC,iBAAiB,KAAK,SAAS,CAAC;IACjF,MAAM,iBAAiB,GAAG,KAAK,CAAC,eAAe,CAAC,gBAAgB,KAAK,SAAS,CAAC;IAE/E,yCAAyC;IACzC,IAAI,iBAAiB,IAAI,CAAC,cAAc,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAChE,0BAA0B;QAC1B,IAAI,cAAc,CAAC,KAAK;YAAE,IAAA,sBAAQ,EAAC,wBAAwB,EAAE,UAAU,KAAK,CAAC,GAAG,sDAAsD,CAAC,CAAC;QACxI,MAAM,IAAI,KAAK,CAAC,4EAA4E,CAAC,CAAC;IAChG,CAAC;IAED,0CAA0C;IAC1C,IAAI,kBAAkB,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC7C,0BAA0B;QAC1B,IAAI,cAAc,CAAC,KAAK;YAAE,IAAA,sBAAQ,EAAC,wBAAwB,EAAE,UAAU,KAAK,CAAC,GAAG,sDAAsD,CAAC,CAAC;QACxI,MAAM,IAAI,KAAK,CAAC,4EAA4E,CAAC,CAAC;IAChG,CAAC;IAED,qGAAqG;IACrG,IAAI,iBAAiB,IAAI,CAAC,cAAc,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAChE,0BAA0B;QAC1B,IAAI,cAAc,CAAC,KAAK;YAAE,IAAA,sBAAQ,EAAC,wBAAwB,EAAE,UAAU,KAAK,CAAC,GAAG,+EAA+E,CAAC,CAAC;QACjK,MAAM,IAAI,KAAK,CAAC,iGAAiG,CAAC,CAAC;IACrH,CAAC;IAED,oEAAoE;IACpE,IAAI,cAAc,IAAI,iBAAiB,IAAI,CAAC,cAAc,CAAC,8BAA8B,EAAE,CAAC;QAC1F,MAAM,WAAW,GAAG,KAAK,CAAC,eAAe,CAAC,YAAY,CAAC;QACvD,MAAM,cAAc,GAAG,KAAK,CAAC,eAAe,CAAC,gBAAgB,CAAC;QAE9D,mDAAmD;QACnD,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,0BAA0B;YAC1B,IAAI,cAAc,CAAC,KAAK;gBAAE,IAAA,sBAAQ,EAAC,wBAAwB,EAAE,UAAU,KAAK,CAAC,GAAG,8BAA8B,CAAC,CAAC;YAChH,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;QAChE,CAAC;QAED,gDAAgD;QAChD,MAAM,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,cAAc,CAAC,CAAC;QAC3E,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,0BAA0B;YAC1B,IAAI,cAAc,CAAC,KAAK;gBAAE,IAAA,sBAAQ,EAAC,wBAAwB,EAAE,UAAU,cAAc,gCAAgC,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;YAC1I,MAAM,IAAI,KAAK,CAAC,2BAA2B,cAAc,gCAAgC,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;QAChH,CAAC;QAED,0BAA0B;QAC1B,IAAI,cAAc,CAAC,KAAK;YAAE,IAAA,qBAAO,EAAC,wBAAwB,EAAE,UAAU,KAAK,CAAC,GAAG,2CAA2C,cAAc,6BAA6B,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;IAC5L,CAAC;IAED,0BAA0B;IAC1B,IAAI,cAAc,CAAC,KAAK;QAAE,IAAA,qBAAO,EAAC,wBAAwB,EAAE,UAAU,KAAK,CAAC,GAAG,0BAA0B,CAAC,CAAC;AAC7G,CAAC","sourcesContent":["// src/utils/federation/validators/field_validator.ts\nimport { Flatfile } from \"@flatfile/api\";\nimport { FederatedProperty } from \"../../../types/federated_property\";\nimport { FederateConfig } from \"../../../types/federate_config\";\nimport { logInfo, logError, logWarn } from \"@flatfile/util-common\";\n\n/**\n* Validates fields (both real and virtual) in a sheet configuration,\n* checks for key collisions, collects source sheet slugs, and returns all unique keys.\n* @param realFields - Array of real field configurations defined in `fields`.\n* @param virtualFields - Array of virtual field configurations defined in `virtualFields`.\n* @param sheetSlug - Slug of the sheet being validated.\n* @param sourceSheets - Set to collect source sheet slugs referenced by any field.\n* @param federateConfig - Federation configuration object.\n* @returns Set of ALL unique field keys (real + virtual) in the sheet.\n*/\nexport function validateFields( // Renamed back from validateAllFields\n  realFields: FederatedProperty[],\n  virtualFields: FederatedProperty[] | undefined,\n  sheetSlug: string,\n  sourceSheets: Set<string>,\n  federateConfig: FederateConfig\n): Set<string> {\n  const allFieldKeys = new Set<string>();\n  const realFieldKeys = new Set<string>(); // Keep track for logging if needed\n  \n  /* istanbul ignore next */\n  if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Field Validator\", `Validating ${realFields.length} real fields and ${virtualFields?.length || 0} virtual fields in sheet \"${sheetSlug}\"`);\n  \n  // Helper function to process a list of fields (real or virtual)\n  const processFieldList = (fieldsToProcess: FederatedProperty[], isVirtual: boolean) => {\n    fieldsToProcess.forEach((field) => {\n      validateField(field, federateConfig); // Use the single field validator\n      \n      // Check for duplicate keys across *all* fields (real and virtual)\n      if (allFieldKeys.has(field.key)) {\n        const collisionType = realFieldKeys.has(field.key) ? (isVirtual ? \"collision with real field\" : \"duplicate real field\") : \"duplicate virtual field\";\n        /* istanbul ignore next */\n        if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Field Validator\", `Field key \"${field.key}\" (${collisionType}) found in sheet \"${sheetSlug}\"`);\n        throw new Error(`[FieldValidator] Duplicate field key \"${field.key}\" (${collisionType}) found in sheet \"${sheetSlug}\". Keys must be unique across real and virtual fields.`);\n      }\n      allFieldKeys.add(field.key);\n      if (!isVirtual) {\n        realFieldKeys.add(field.key);\n      }\n      addSourceSheet(field, sourceSheets, federateConfig); // Collect source sheets\n    });\n  };\n  \n  // Validate real fields\n  processFieldList(realFields, false);\n  \n  // Validate virtual fields if they exist\n  if (virtualFields) {\n    processFieldList(virtualFields, true);\n  }\n  \n  /* istanbul ignore next */\n  if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Field Validator\", `Validated fields in sheet \"${sheetSlug}\". Total unique keys: ${allFieldKeys.size}`);\n  \n  return allFieldKeys; // Return combined set for other validators\n}\n\nfunction addSourceSheet(field: FederatedProperty, sourceSheets: Set<string>, federateConfig: FederateConfig) {\n  if (field.federate_config) {\n    const sourceSheet = field.federate_config.source_sheet?.slug;\n    const sourceSheetSlug = field.federate_config.source_sheet_slug;\n    \n    if (sourceSheet) {\n      sourceSheets.add(sourceSheet);\n      /* istanbul ignore next */\n      if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Field Validator\", `Field \"${field.key}\" references source sheet \"${sourceSheet}\"`);\n    }\n    if (sourceSheetSlug) {\n      sourceSheets.add(sourceSheetSlug);\n      /* istanbul ignore next */\n      if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Field Validator\", `Field \"${field.key}\" references source sheet slug \"${sourceSheetSlug}\"`);\n    }\n  }\n}\n\nexport function validateField(field: FederatedProperty, federateConfig: FederateConfig): void {\n  // Skip validation if no federate_config\n  if (!field.federate_config) {\n    /* istanbul ignore next */\n    if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Field Validator\", `Field \"${field.key}\" has no federate_config, skipping validation`);\n    return;\n  }\n  \n  /* istanbul ignore next */\n  if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Field Validator\", `Validating field \"${field.key}\"`);\n  \n  // Check if the field has a source sheet or source sheet slug\n  const hasSourceSheet = field.federate_config.source_sheet !== undefined;\n  const hasSourceSheetSlug = field.federate_config.source_sheet_slug !== undefined;\n  const hasSourceFieldKey = field.federate_config.source_field_key !== undefined;\n  \n  // Validate source field key relationship\n  if (hasSourceFieldKey && !hasSourceSheet && !hasSourceSheetSlug) {\n    /* istanbul ignore next */\n    if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Field Validator\", `Field \"${field.key}\" has source_field_key but missing source_sheet_slug`);\n    throw new Error(\"[FieldValidator] Field with source_field_key must have a source_sheet_slug\");\n  }\n  \n  // Validate source sheet slug relationship\n  if (hasSourceSheetSlug && !hasSourceFieldKey) {\n    /* istanbul ignore next */\n    if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Field Validator\", `Field \"${field.key}\" has source_sheet_slug but missing source_field_key`);\n    throw new Error(\"[FieldValidator] Field with source_sheet_slug must have a source_field_key\");\n  }\n  \n  // Validate that either source_sheet or source_sheet_slug is present IF a source_field_key is present\n  if (hasSourceFieldKey && !hasSourceSheet && !hasSourceSheetSlug) {\n    /* istanbul ignore next */\n    if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Field Validator\", `Field \"${field.key}\" has source_field_key but is missing both source_sheet and source_sheet_slug`);\n    throw new Error(\"[FieldValidator] Field with source_field_key must have either source_sheet or source_sheet_slug\");\n  }\n  \n  // Validate that source_field_key exists in source_sheet if provided\n  if (hasSourceSheet && hasSourceFieldKey && !federateConfig.allow_undeclared_source_fields) {\n    const sourceSheet = field.federate_config.source_sheet;\n    const sourceFieldKey = field.federate_config.source_field_key;\n    \n    // Add type guard to ensure source_sheet is defined\n    if (!sourceSheet) {\n      /* istanbul ignore next */\n      if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Field Validator\", `Field \"${field.key}\" has undefined source_sheet`);\n      throw new Error(\"[FieldValidator] Source sheet is undefined\");\n    }\n    \n    // Check if the field exists in the source sheet\n    const fieldExists = sourceSheet.fields.some(f => f.key === sourceFieldKey);\n    if (!fieldExists) {\n      /* istanbul ignore next */\n      if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Field Validator\", `Field \"${sourceFieldKey}\" not found in source sheet \"${sourceSheet.slug}\"`);\n      throw new Error(`[FieldValidator] Field \"${sourceFieldKey}\" not found in source sheet \"${sourceSheet.slug}\"`);\n    }\n    \n    /* istanbul ignore next */\n    if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Field Validator\", `Field \"${field.key}\" validated successfully, source field \"${sourceFieldKey}\" exists in source sheet \"${sourceSheet.slug}\"`);\n  }\n  \n  /* istanbul ignore next */\n  if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Field Validator\", `Field \"${field.key}\" validated successfully`);\n}"]}