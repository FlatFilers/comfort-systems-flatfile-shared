{"version":3,"file":"merge_validator.js","sourceRoot":"","sources":["../../../../src/utils/federation/validators/merge_validator.ts"],"names":[],"mappings":"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","sourcesContent":["import { FederatedSheetConfig, FederateConfig } from \"../../../types\";\nimport { logError, logInfo, logWarn } from \"@flatfile/util-common\";\n\n/**\n* Validates merge configuration for a sheet\n* @param sheet - The sheet configuration\n* @param fieldKeys - Set of field keys in the sheet\n* @param mergeFields - Map tracking merge fields by sheet slug\n* @param config - Federation configuration with debug settings\n*/\nexport function validateDedupeConfig(\n  sheet: FederatedSheetConfig,\n  fieldKeys: Set<string>,\n  mergeFields: Map<string, Set<string>>,\n  config: FederateConfig\n): void {\n  const sheetName = sheet.name || sheet.slug || 'unknown';\n  /* istanbul ignore next */\n  if (config.debug) logInfo(\"ðŸ“¦   â†³ Merge Validator\", `Validating merge configuration for sheet \"${sheetName}\"`);\n  \n  if (!sheet.dedupe_config) {\n    /* istanbul ignore next */\n    if (config.debug) logInfo(\"ðŸ“¦   â†³ Merge Validator\", `No merge configuration found for sheet \"${sheetName}\", skipping validation`);\n    return;\n  }\n  \n  /* istanbul ignore next */\n  if (config.debug) {\n    const mergeType = sheet.dedupe_config.type;\n    const keepValue = sheet.dedupe_config.keep;\n    const mergeOn = Array.isArray(sheet.dedupe_config.on) \n    ? `[${sheet.dedupe_config.on.join(', ')}]` \n    : sheet.dedupe_config.on;\n    \n    logInfo(\"ðŸ“¦   â†³ Merge Validator\", `Found merge configuration: type=${mergeType}, keep=${keepValue}, on=${mergeOn}`);\n  }\n  \n  // Ensure the merge field(s) exists in the sheet\n  if (Array.isArray(sheet.dedupe_config.on)) {\n    /* istanbul ignore next */\n    if (config.debug) logInfo(\"ðŸ“¦   â†³ Merge Validator\", `Validating array of merge fields with ${sheet.dedupe_config.on.length} items`);\n    \n    // Check that all fields in the array exist\n    for (const field of sheet.dedupe_config.on) {\n      if (!fieldKeys.has(field)) {\n        /* istanbul ignore next */\n        if (config.debug) logError(\"ðŸ“¦   â†³ Merge Validator\", `Merge field \"${field}\" does not exist in sheet \"${sheetName}\"`);\n        throw new Error(`[MergeValidator] Invalid merge configuration for sheet \"${sheet.slug!}\": merge field \"${field}\" does not exist in the sheet`);\n      }\n      \n      /* istanbul ignore next */\n      if (config.debug) logInfo(\"ðŸ“¦   â†³ Merge Validator\", `Valid merge field reference: \"${field}\"`);\n    }\n    \n    // Ensure the array is not empty\n    if (sheet.dedupe_config.on.length === 0) {\n      /* istanbul ignore next */\n      if (config.debug) logError(\"ðŸ“¦   â†³ Merge Validator\", `Empty array of merge fields in sheet \"${sheetName}\"`);\n      throw new Error(`[MergeValidator] Invalid merge configuration for sheet \"${sheet.slug!}\": merge field array cannot be empty`);\n    }\n  } else {\n    // Single field case\n    /* istanbul ignore next */\n    if (config.debug) logInfo(\"ðŸ“¦   â†³ Merge Validator\", `Validating single merge field: \"${sheet.dedupe_config.on}\"`);\n    \n    if (!fieldKeys.has(sheet.dedupe_config.on)) {\n      /* istanbul ignore next */\n      if (config.debug) logError(\"ðŸ“¦   â†³ Merge Validator\", `Merge field \"${sheet.dedupe_config.on}\" does not exist in sheet \"${sheetName}\"`);\n      throw new Error(`[MergeValidator] Invalid merge configuration for sheet \"${sheet.slug!}\": merge field \"${sheet.dedupe_config.on}\" does not exist in the sheet`);\n    }\n    \n    /* istanbul ignore next */\n    if (config.debug) logInfo(\"ðŸ“¦   â†³ Merge Validator\", `Valid merge field reference: \"${sheet.dedupe_config.on}\"`);\n  }\n  \n  // Validate enum values - TypeScript can't validate these at runtime\n  if (!['delete', 'merge'].includes(sheet.dedupe_config.type)) {\n    /* istanbul ignore next */\n    if (config.debug) logError(\"ðŸ“¦   â†³ Merge Validator\", `Invalid merge type \"${sheet.dedupe_config.type}\" in sheet \"${sheetName}\"`);\n    throw new Error(`[MergeValidator] Invalid merge configuration for sheet \"${sheet.slug}\": type must be \"delete\" or \"merge\"`);\n  }\n  \n  if (!['first', 'last'].includes(sheet.dedupe_config.keep)) {\n    /* istanbul ignore next */\n    if (config.debug) logError(\"ðŸ“¦   â†³ Merge Validator\", `Invalid keep value \"${sheet.dedupe_config.keep}\" in sheet \"${sheetName}\"`);\n    throw new Error(`[MergeValidator] Invalid merge configuration for sheet \"${sheet.slug}\": keep must be \"first\" or \"last\"`);\n  }\n  \n  // Track merge fields for validation of relationships\n  if (!sheet.slug) {\n    /* istanbul ignore next */\n    if (config.debug) logError(\"ðŸ“¦   â†³ Merge Validator\", `Missing sheet slug in sheet \"${sheetName}\"`);\n    throw new Error(\"[MergeValidator] Sheet slug is required for merge configuration\");\n  }\n  \n  let mergeFieldsForSheet = mergeFields.get(sheet.slug);\n  if (!mergeFieldsForSheet) {\n    mergeFieldsForSheet = new Set<string>();\n    mergeFields.set(sheet.slug, mergeFieldsForSheet);\n    /* istanbul ignore next */\n    if (config.debug) logInfo(\"ðŸ“¦   â†³ Merge Validator\", `Created new merge fields set for sheet \"${sheet.slug}\"`);\n  } else {\n    /* istanbul ignore next */\n    if (config.debug)logInfo(\"ðŸ“¦   â†³ Merge Validator\", `Adding to existing merge fields for sheet \"${sheet.slug}\"`);\n  }\n  \n  // Add all merge fields to the set\n  if (Array.isArray(sheet.dedupe_config.on)) {\n    for (const field of sheet.dedupe_config.on) {\n      mergeFieldsForSheet.add(field);\n      /* istanbul ignore next */\n      if (config.debug) logInfo(\"ðŸ“¦   â†³ Merge Validator\", `Added merge field \"${field}\" to tracked fields for sheet \"${sheet.slug}\"`);\n    }\n  } else {\n    mergeFieldsForSheet.add(sheet.dedupe_config.on);\n    /* istanbul ignore next */\n    if (config.debug) logInfo(\"ðŸ“¦   â†³ Merge Validator\", `Added merge field \"${sheet.dedupe_config.on}\" to tracked fields for sheet \"${sheet.slug}\"`);\n  }\n  \n  /* istanbul ignore next */\n  if (config.debug) {\n    const fieldCount = mergeFieldsForSheet.size;\n    const fieldList = Array.from(mergeFieldsForSheet).join(', ');\n    logInfo(\"ðŸ“¦   â†³ Merge Validator\", `Merge configuration for sheet \"${sheetName}\" validated successfully`);\n    logInfo(\"ðŸ“¦   â†³ Merge Validator\", `Total tracked merge fields for sheet \"${sheet.slug}\": ${fieldCount} (${fieldList})`);\n  }\n} "]}