{"version":3,"file":"config_validator.js","sourceRoot":"","sources":["../../../../src/utils/federation/validators/config_validator.ts"],"names":[],"mappings":";;AAsBA,wCAgDC;AArED,uDAAmD;AACnD,uDAAyD;AACzD,2DAAmF;AACnF,yDAAqD;AACrD,uDAAgD;AAChD;;;;;;;;;;;;;;;EAeE;AACF,SAAgB,cAAc,CAAC,MAAsB;IACnD,2CAA2C;IAC3C,IAAI,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAClD,MAAM,IAAI,KAAK,CAAC,wGAAwG,CAAC,CAAC;IAC5H,CAAC;IAED,kEAAkE;IAClE,MAAM,UAAU,GAAG,IAAI,GAAG,EAAU,CAAC;IAErC,4CAA4C;IAC5C,MAAM,YAAY,GAAG,IAAI,GAAG,EAAU,CAAC;IACvC,MAAM,WAAW,GAAG,IAAI,GAAG,EAAuB,CAAC,CAAC,mCAAmC;IAEvF,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;QACxD,sBAAsB;QACtB,IAAI,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,IAAK,CAAC,EAAE,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,kDAAkD,KAAK,CAAC,IAAI,gCAAgC,CAAC,CAAC;QAChH,CAAC;QAED,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,IAAK,CAAC,CAAC;QAE5B,qCAAqC;QACrC,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC9B,MAAM,IAAI,KAAK,CAAC,4BAA4B,KAAK,CAAC,IAAI,gCAAgC,CAAC,CAAC;QAC1F,CAAC;QAED,4CAA4C;QAC5C,0BAA0B;QAC1B,IAAI,MAAM,CAAC,KAAK;YAAE,IAAA,qBAAO,EAAC,wBAAwB,EAAE,gCAAgC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;QACnG,MAAM,SAAS,GAAG,IAAA,gCAAc,EAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,IAAK,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;QAEvG,+BAA+B;QAC/B,0BAA0B;QAC1B,IAAI,MAAM,CAAC,KAAK;YAAE,IAAA,qBAAO,EAAC,wBAAwB,EAAE,6CAA6C,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;QAChH,IAAA,sCAAoB,EAAC,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;QAE5D,0EAA0E;QAC1E,0BAA0B;QAC1B,IAAI,MAAM,CAAC,KAAK;YAAE,IAAA,qBAAO,EAAC,wBAAwB,EAAE,+CAA+C,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;QAClH,IAAA,yCAAqB,EAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAErC,mBAAmB;QACnB,0BAA0B;QAC1B,IAAI,MAAM,CAAC,KAAK;YAAE,IAAA,qBAAO,EAAC,wBAAwB,EAAE,iCAAiC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;QACpG,IAAA,kCAAe,EAAC,KAAK,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,OAAO,YAAY,CAAC;AACtB,CAAC","sourcesContent":["import { FederateConfig, FederatedSheetConfig, FederatedUnpivotSheetConfig } from \"../../../types\";\nimport { validateFields } from \"./field_validator\";\nimport { validateDedupeConfig } from \"./merge_validator\";\nimport { validateUnpivotConfig, validateUnpivotFields } from \"./unpivot_validator\";\nimport { validateFilters } from \"./filter_validator\";\nimport { logInfo } from \"@flatfile/util-common\";\n/**\n* Validates the federation configuration and returns a set of all source sheet slugs.\n* This function performs a comprehensive validation of the federation configuration:\n* \n* 1. Verifies that the workbook contains at least one sheet\n* 2. Ensures all sheet slugs are unique within the configuration\n* 3. Validates that each sheet has at least one field\n* 4. Validates field configurations using the field validator\n* 5. Validates merge configurations using the merge validator\n* 6. Validates unpivot groups using the unpivot validator (only for unpivot sheets)\n* 7. Validates filter configurations using the filter validator\n* \n* @param config - The federation configuration to validate\n* @returns Set of all source sheet slugs used in the federation\n* @throws Error if any validation rules are violated, with detailed error messages\n*/\nexport function validateConfig(config: FederateConfig): Set<string> {\n  // workbook must contain at least one sheet\n  if (config.federated_workbook.sheets.length === 0) {\n    throw new Error(\"[ConfigValidator] Invalid federation configuration: federated_workbook must contain at least one sheet\");\n  }\n  \n  // Track sheets by slug to ensure uniqueness and for later lookups\n  const sheetSlugs = new Set<string>();\n  \n  // Validate sheets and collect source sheets\n  const sourceSheets = new Set<string>();\n  const mergeFields = new Map<string, Set<string>>(); // Track merge fields by sheet slug\n  \n  config.federated_workbook.sheets.forEach((sheet, index) => {\n    // slug must be unique\n    if (sheetSlugs.has(sheet.slug!)) {\n      throw new Error(`[ConfigValidator] Duplicate sheet slug found: \"${sheet.slug}\". Sheet slugs must be unique.`);\n    }\n    \n    sheetSlugs.add(sheet.slug!);\n    \n    // sheet must have at least one field\n    if (sheet.fields.length === 0) {\n      throw new Error(`[ConfigValidator] Sheet \"${sheet.slug}\" must have at least one field`);\n    }\n    \n    // Validate fields and collect source sheets\n    /* istanbul ignore next */\n    if (config.debug) logInfo(\"ðŸ“¦  â†³ Config Validator\", `Validating fields for sheet \"${sheet.slug}\"`);\n    const fieldKeys = validateFields(sheet.fields, sheet.virtualFields, sheet.slug!, sourceSheets, config);\n    \n    // Validate merge configuration\n    /* istanbul ignore next */\n    if (config.debug) logInfo(\"ðŸ“¦  â†³ Config Validator\", `Validating merge configuration for sheet \"${sheet.slug}\"`);\n    validateDedupeConfig(sheet, fieldKeys, mergeFields, config);\n    \n    // Validate unpivot configuration (will be skipped for non-unpivot sheets)\n    /* istanbul ignore next */\n    if (config.debug) logInfo(\"ðŸ“¦  â†³ Config Validator\", `Validating unpivot configuration for sheet \"${sheet.slug}\"`);\n    validateUnpivotConfig(sheet, config);\n    \n    // Validate filters\n    /* istanbul ignore next */\n    if (config.debug) logInfo(\"ðŸ“¦  â†³ Config Validator\", `Validating filters for sheet \"${sheet.slug}\"`);\n    validateFilters(sheet, fieldKeys, config);\n  });\n  \n  return sourceSheets;\n} "]}