{"version":3,"file":"unpivot_validator.js","sourceRoot":"","sources":["../../../../src/utils/federation/validators/unpivot_validator.ts"],"names":[],"mappings":"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","sourcesContent":["import { Flatfile } from \"@flatfile/api\";\nimport { FederatedUnpivotSheetConfig, UnpivotGroupConfig } from \"../../../types/federated_unpivot_sheet_config\";\nimport { FederateConfig } from \"../../../types/federate_config\";\nimport { logError, logInfo, logWarn } from \"@flatfile/util-common\";\n\n// Helper type guards\nexport function hasSourceSheetSlug(group: UnpivotGroupConfig): boolean {\n  return typeof (group as any).source_sheet_slug === 'string';\n}\n\nexport function hasSourceSheet(group: UnpivotGroupConfig): boolean {\n  return typeof (group as any).source_sheet === 'object' && (group as any).source_sheet !== null;\n}\n\n/**\n* Validates that source fields exist in the source sheet\n* @param group - The unpivot group configuration\n* @param groupKey - The key of the unpivot group\n* @param federateConfig - Federation configuration with debug settings\n* @throws Error if any source field doesn't exist in the source sheet\n*/\nexport function validateSourceFields(group: UnpivotGroupConfig, groupKey: string, federateConfig: FederateConfig): void {\n  /* istanbul ignore next */\n  if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Validating source fields for unpivot group \"${groupKey}\"`);\n  \n  if (!group.field_mappings || group.field_mappings.length === 0) {\n    /* istanbul ignore next */\n    if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `No field mappings found for group \"${groupKey}\", skipping source field validation`);\n    return; \n  }\n  \n  // Get source sheet fields\n  let sourceFields: Flatfile.Property[] = [];\n  \n  if (hasSourceSheet(group) && group.source_sheet) {\n    sourceFields = group.source_sheet.fields || [];\n    /* istanbul ignore next */\n    if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Found ${sourceFields.length} fields in source sheet for group \"${groupKey}\"`);\n  } else if (hasSourceSheetSlug(group)) {\n    // If we only have a slug, we can't validate source fields here\n    // This would require fetching the sheet configuration from the API\n    /* istanbul ignore next */\n    if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Using source sheet slug for group \"${groupKey}\", cannot validate source fields at this stage`);\n    return;\n  }\n  \n  // Create a set of source field keys for efficient lookup\n  const sourceFieldKeys = new Set(sourceFields.map(field => field.key));\n  /* istanbul ignore next */\n  if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Available source field keys: ${Array.from(sourceFieldKeys).join(', ')}`);\n  \n  // Check each field mapping\n  group.field_mappings.forEach((mapping, index) => {\n    /* istanbul ignore next */\n    if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Validating field mapping #${index} for group \"${groupKey}\"`);\n    \n    Object.entries(mapping).forEach(([targetField, sourceField]) => {\n      // Skip validation for static values enclosed in << and >>\n      if (sourceField.startsWith('<<') && sourceField.endsWith('>>')) {\n        /* istanbul ignore next */\n        if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Skipping validation for static value \"${sourceField}\" -> \"${targetField}\"`);\n        return;\n      }\n      \n      if (!sourceFieldKeys.has(sourceField)) {\n        /* istanbul ignore next */\n        if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Unpivot Validator\", `Validation failed: source field \"${sourceField}\" not found for target field \"${targetField}\"`);\n        \n        throw new Error(\n          `[UnpivotValidator] Invalid unpivot configuration for group \"${groupKey}\": ` +\n          `field mapping at index ${index} references source field \"${sourceField}\", ` +\n          `but this field does not exist in the source sheet`\n        );\n      }\n      \n      /* istanbul ignore next */\n      if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Valid mapping: \"${sourceField}\" -> \"${targetField}\"`);\n    });\n  });\n  \n  /* istanbul ignore next */\n  if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `All source fields validated successfully for group \"${groupKey}\"`);\n}\n\n/**\n* Validates an unpivot configuration\n* @param sheet - The sheet configuration to validate\n* @param federateConfig - Federation configuration with debug settings\n* @throws Error if the configuration is invalid\n*/\nexport function validateUnpivotConfig(sheet: any, federateConfig: FederateConfig): void {\n  const sheetName = sheet.name || sheet.slug || 'unknown';\n  /* istanbul ignore next */\n  if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Validating unpivot configuration for sheet \"${sheetName}\"`);\n  \n  // Check if this is an unpivot sheet\n  if (!('unpivot_groups' in sheet)) {\n    /* istanbul ignore next */\n    if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Sheet \"${sheetName}\" is not an unpivot sheet, skipping validation`);\n    return; // Not an unpivot sheet, nothing to validate\n  }\n  \n  // Cast to the correct type now that we know it's an unpivot sheet\n  const unpivotSheet = sheet as FederatedUnpivotSheetConfig;\n  \n  if (!unpivotSheet.unpivot_groups || Object.keys(unpivotSheet.unpivot_groups).length === 0) {\n    /* istanbul ignore next */\n    if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Unpivot Validator\", `Sheet \"${sheetName}\" has empty unpivot_groups configuration`);\n    throw new Error(\"[UnpivotValidator] Unpivot configuration must have at least one unpivot group\");\n  }\n  \n  /* istanbul ignore next */\n  if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Found ${Object.keys(unpivotSheet.unpivot_groups).length} unpivot groups in sheet \"${sheetName}\"`);\n  \n  for (const [groupKey, group] of Object.entries(unpivotSheet.unpivot_groups)) {\n    /* istanbul ignore next */\n    if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Validating unpivot group \"${groupKey}\"`);\n    \n    if (!group.field_mappings || group.field_mappings.length === 0) {\n      /* istanbul ignore next */\n      if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Unpivot Validator\", `Group \"${groupKey}\" has no field mappings`);\n      throw new Error(`[UnpivotValidator] Unpivot group \"${groupKey}\" must have at least one field mapping`);\n    }\n    \n    /* istanbul ignore next */\n    if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Group \"${groupKey}\" has ${group.field_mappings.length} field mappings`);\n    \n    for (const mapping of group.field_mappings) {\n      if (!mapping || Object.keys(mapping).length === 0) {\n        /* istanbul ignore next */\n        if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Unpivot Validator\", `Empty field mapping found in group \"${groupKey}\"`);\n        throw new Error(`[UnpivotValidator] Unpivot group \"${groupKey}\" has an empty field mapping for key: field1`);\n      }\n    }\n    \n    if (!hasSourceSheet(group) && !hasSourceSheetSlug(group)) {\n      /* istanbul ignore next */\n      if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Unpivot Validator\", `Group \"${groupKey}\" is missing both source_sheet and source_sheet_slug`);\n      throw new Error(`[UnpivotValidator] Unpivot group \"${groupKey}\" must have either source_sheet or source_sheet_slug`);\n    }\n    \n    /* istanbul ignore next */\n    if (federateConfig.debug) {\n      if (hasSourceSheet(group)) {\n        logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Group \"${groupKey}\" uses source_sheet configuration`);\n      } else if (hasSourceSheetSlug(group)) {\n        logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Group \"${groupKey}\" uses source_sheet_slug: \"${(group as any).source_sheet_slug}\"`);\n      }\n    }\n    \n    if (hasSourceSheet(group) && group.source_sheet) {\n      if (!group.source_sheet.slug || group.source_sheet.slug.trim() === '') {\n        /* istanbul ignore next */\n        if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Unpivot Validator\", `Group \"${groupKey}\" has source_sheet without a valid slug`);\n        throw new Error(`[UnpivotValidator] Unpivot group \"${groupKey}\" with source_sheet must have a valid slug`);\n      }\n      \n      // Only validate source fields if allow_undeclared_source_fields is false\n      if (!federateConfig.allow_undeclared_source_fields) {\n        /* istanbul ignore next */\n        if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Validating source fields for group \"${groupKey}\" (allow_undeclared_source_fields=false)`);\n        validateSourceFields(group, groupKey, federateConfig);\n        /* istanbul ignore next */} else \n        if (federateConfig.debug) {\n          logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Skipping source field validation for group \"${groupKey}\" (allow_undeclared_source_fields=true)`);\n        }\n      }\n      \n      /* istanbul ignore next */\n      if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Unpivot group \"${groupKey}\" validated successfully`);\n    }\n    \n    // Also validate that all target fields exist in the sheet\n    \n    /* istanbul ignore next */\n    if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Validating unpivot target fields for sheet \"${sheetName}\"`);\n    validateUnpivotFields(unpivotSheet, federateConfig);\n    \n    /* istanbul ignore next */\n    if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Unpivot configuration for sheet \"${sheetName}\" validated successfully`);\n  }\n  \n  /**\n  * Validates that all fields in a FederatedUnpivotSheetConfig are properly configured\n  * @param sheet - The sheet configuration to validate\n  * @param federateConfig - Federation configuration with debug settings\n  */\n  export function validateUnpivotFields(sheet: FederatedUnpivotSheetConfig, federateConfig: FederateConfig): void {\n    const sheetSlug = sheet.slug || 'unknown';\n    /* istanbul ignore next */\n    if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Validating unpivot field references for sheet \"${sheetSlug}\"`);\n    \n    // Skip validation if the sheet doesn't have fields or unpivot_groups\n    if (!Array.isArray(sheet.fields) || !sheet.unpivot_groups) {\n      /* istanbul ignore next */\n      if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Sheet \"${sheetSlug}\" has no fields or unpivot_groups, skipping validation`);\n      return;\n    }\n    \n    // Skip validation if unpivot_groups is empty\n    if (Object.keys(sheet.unpivot_groups).length === 0) {\n      /* istanbul ignore next */\n      if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Sheet \"${sheetSlug}\" has empty unpivot_groups, skipping validation`);\n      return;\n    }\n    \n    // Get all field keys from the sheet\n    const fieldKeys = new Set(sheet.fields.map(field => field.key));\n    /* istanbul ignore next */\n    if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Sheet \"${sheetSlug}\" has ${fieldKeys.size} fields: ${Array.from(fieldKeys).join(', ')}`);\n    \n    // Check each unpivot group's field mappings\n    Object.entries(sheet.unpivot_groups).forEach(([groupKey, group]) => {\n      /* istanbul ignore next */\n      if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Validating field references for group \"${groupKey}\"`);\n      \n      if (group && Array.isArray(group.field_mappings)) {\n        group.field_mappings.forEach((mapping: { [key: string]: string }, index) => {\n          /* istanbul ignore next */\n          if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Checking mapping #${index} in group \"${groupKey}\"`);\n          \n          Object.entries(mapping).forEach(([targetField, sourceField]) => {\n            if (!fieldKeys.has(targetField)) {\n              /* istanbul ignore next */\n              if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Unpivot Validator\", `Target field \"${targetField}\" not found in sheet \"${sheetSlug}\"`);\n              \n              throw new Error(\n                `[UnpivotValidator] Invalid unpivot configuration for sheet \"${sheetSlug}\": ` +\n                `unpivot group \"${groupKey}\" references field \"${targetField}\", ` +\n                `but this field does not exist in the sheet's fields`\n              );\n            }\n            \n            /* istanbul ignore next */\n            if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `Valid target field reference: \"${targetField}\" <- \"${sourceField}\"`);\n          });\n        });\n      }\n      \n      /* istanbul ignore next */\n      if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `All field references validated for group \"${groupKey}\"`);\n    });\n    \n    /* istanbul ignore next */\n    if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Unpivot Validator\", `All unpivot field references validated successfully for sheet \"${sheetSlug}\"`);\n  } "]}