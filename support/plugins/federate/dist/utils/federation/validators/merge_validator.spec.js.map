{"version":3,"file":"merge_validator.spec.js","sourceRoot":"","sources":["../../../../src/utils/federation/validators/merge_validator.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { FederatedSheetConfig, FederateConfig } from \"../../../types\";\nimport { validateDedupeConfig } from \"./merge_validator\";\n\ndescribe(\"validateDedupeConfig\", () => {\n  // Create a minimal federateConfig for testing\n  const federateConfig: FederateConfig = {\n    source_workbook_name: \"Test Source Workbook\",\n    federated_workbook: { name: \"Test Federated Workbook\", sheets: [] },\n    debug: false\n  };\n  \n  it(\"should not throw for valid merge configuration\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      dedupe_config: {\n        on: \"field1\",\n        type: \"merge\",\n        keep: \"first\"\n      }\n    };\n    const fieldKeys = new Set([\"field1\", \"field2\"]);\n    const mergeFields = new Map<string, Set<string>>();\n    \n    expect(() => {\n      validateDedupeConfig(sheet, fieldKeys, mergeFields, federateConfig);\n    }).not.toThrow();\n    \n    expect(mergeFields.has(\"test-sheet\")).toBe(true);\n    expect(mergeFields.get(\"test-sheet\")?.has(\"field1\")).toBe(true);\n  });\n  \n  it(\"should not throw for valid merge configuration with 'delete' type\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      dedupe_config: {\n        on: \"field1\",\n        type: \"delete\",\n        keep: \"first\"\n      }\n    };\n    const fieldKeys = new Set([\"field1\", \"field2\"]);\n    const mergeFields = new Map<string, Set<string>>();\n    \n    expect(() => {\n      validateDedupeConfig(sheet, fieldKeys, mergeFields, federateConfig);\n    }).not.toThrow();\n    \n    expect(mergeFields.has(\"test-sheet\")).toBe(true);\n    expect(mergeFields.get(\"test-sheet\")?.has(\"field1\")).toBe(true);\n  });\n  \n  it(\"should not throw for valid merge configuration with 'last' keep value\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      dedupe_config: {\n        on: \"field1\",\n        type: \"merge\",\n        keep: \"last\"\n      }\n    };\n    const fieldKeys = new Set([\"field1\", \"field2\"]);\n    const mergeFields = new Map<string, Set<string>>();\n    \n    expect(() => {\n      validateDedupeConfig(sheet, fieldKeys, mergeFields, federateConfig);\n    }).not.toThrow();\n    \n    expect(mergeFields.has(\"test-sheet\")).toBe(true);\n    expect(mergeFields.get(\"test-sheet\")?.has(\"field1\")).toBe(true);\n  });\n  \n  it(\"should not throw for valid merge configuration with array 'on' property\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      dedupe_config: {\n        on: [\"field1\", \"field2\"],\n        type: \"merge\",\n        keep: \"first\"\n      }\n    };\n    const fieldKeys = new Set([\"field1\", \"field2\", \"field3\"]);\n    const mergeFields = new Map<string, Set<string>>();\n    \n    expect(() => {\n      validateDedupeConfig(sheet, fieldKeys, mergeFields, federateConfig);\n    }).not.toThrow();\n    \n    expect(mergeFields.has(\"test-sheet\")).toBe(true);\n    expect(mergeFields.get(\"test-sheet\")?.has(\"field1\")).toBe(true);\n    expect(mergeFields.get(\"test-sheet\")?.has(\"field2\")).toBe(true);\n  });\n  \n  it(\"should throw error for non-existent merge field\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      dedupe_config: {\n        on: \"non_existent_field\",\n        type: \"merge\",\n        keep: \"first\"\n      }\n    };\n    const fieldKeys = new Set([\"field1\", \"field2\"]);\n    const mergeFields = new Map<string, Set<string>>();\n    \n    expect(() => {\n      validateDedupeConfig(sheet, fieldKeys, mergeFields, federateConfig);\n    }).toThrow('[MergeValidator] Invalid merge configuration for sheet \"test-sheet\": merge field \"non_existent_field\" does not exist in the sheet');\n  });\n  \n  it(\"should throw error for non-existent merge field in array\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      dedupe_config: {\n        on: [\"field1\", \"non_existent_field\"],\n        type: \"merge\",\n        keep: \"first\"\n      }\n    };\n    const fieldKeys = new Set([\"field1\", \"field2\"]);\n    const mergeFields = new Map<string, Set<string>>();\n    \n    expect(() => {\n      validateDedupeConfig(sheet, fieldKeys, mergeFields, federateConfig);\n    }).toThrow('[MergeValidator] Invalid merge configuration for sheet \"test-sheet\": merge field \"non_existent_field\" does not exist in the sheet');\n  });\n  \n  it(\"should throw error for empty array of merge fields\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      dedupe_config: {\n        on: [] as string[],\n        type: \"merge\",\n        keep: \"first\"\n      }\n    };\n    const fieldKeys = new Set([\"field1\", \"field2\"]);\n    const mergeFields = new Map<string, Set<string>>();\n    \n    expect(() => {\n      validateDedupeConfig(sheet, fieldKeys, mergeFields, federateConfig);\n    }).toThrow('[MergeValidator] Invalid merge configuration for sheet \"test-sheet\": merge field array cannot be empty');\n  });\n  \n  it(\"should throw error for invalid merge type\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      dedupe_config: {\n        on: \"field1\",\n        type: \"invalid_type\" as any,\n        keep: \"first\"\n      }\n    };\n    const fieldKeys = new Set([\"field1\", \"field2\"]);\n    const mergeFields = new Map<string, Set<string>>();\n    \n    expect(() => {\n      validateDedupeConfig(sheet, fieldKeys, mergeFields, federateConfig);\n    }).toThrow('[MergeValidator] Invalid merge configuration for sheet \"test-sheet\": type must be \"delete\" or \"merge\"');\n  });\n  \n  it(\"should throw error for invalid keep value\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      dedupe_config: {\n        on: \"field1\",\n        type: \"merge\",\n        keep: \"invalid_keep\" as any\n      }\n    };\n    const fieldKeys = new Set([\"field1\", \"field2\"]);\n    const mergeFields = new Map<string, Set<string>>();\n    \n    expect(() => {\n      validateDedupeConfig(sheet, fieldKeys, mergeFields, federateConfig);\n    }).toThrow('[MergeValidator] Invalid merge configuration for sheet \"test-sheet\": keep must be \"first\" or \"last\"');\n  });\n  \n  it(\"should throw error for missing sheet slug\", () => {\n    const sheet = {\n      name: \"Test Sheet\",\n      fields: [],\n      dedupe_config: {\n        on: \"field1\",\n        type: \"merge\",\n        keep: \"first\"\n      }\n    } as Partial<FederatedSheetConfig>;\n    const fieldKeys = new Set([\"field1\", \"field2\"]);\n    const mergeFields = new Map<string, Set<string>>();\n    \n    expect(() => {\n      validateDedupeConfig(sheet as FederatedSheetConfig, fieldKeys, mergeFields, federateConfig);\n    }).toThrow('[MergeValidator] Sheet slug is required for merge configuration');\n  });\n  \n  it(\"should not throw if no dedupe_config is provided\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: []\n    };\n    const fieldKeys = new Set([\"field1\", \"field2\"]);\n    const mergeFields = new Map<string, Set<string>>();\n    \n    expect(() => {\n      validateDedupeConfig(sheet, fieldKeys, mergeFields, federateConfig);\n    }).not.toThrow();\n    \n    expect(mergeFields.has(\"test-sheet\")).toBe(false);\n  });\n  \n  it(\"should add to existing merge fields if sheet already exists\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      dedupe_config: {\n        on: \"field1\",\n        type: \"merge\",\n        keep: \"first\"\n      }\n    };\n    const fieldKeys = new Set([\"field1\", \"field2\"]);\n    const mergeFields = new Map<string, Set<string>>();\n    \n    // Add existing field for the sheet\n    mergeFields.set(\"test-sheet\", new Set([\"existing_field\"]));\n    \n    validateDedupeConfig(sheet, fieldKeys, mergeFields, federateConfig);\n    \n    expect(mergeFields.get(\"test-sheet\")?.size).toBe(2);\n    expect(mergeFields.get(\"test-sheet\")?.has(\"existing_field\")).toBe(true);\n    expect(mergeFields.get(\"test-sheet\")?.has(\"field1\")).toBe(true);\n  });\n  \n  it(\"should add multiple merge fields from array to tracking set\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      dedupe_config: {\n        on: [\"field1\", \"field2\", \"field3\"],\n        type: \"merge\",\n        keep: \"first\"\n      }\n    };\n    const fieldKeys = new Set([\"field1\", \"field2\", \"field3\"]);\n    const mergeFields = new Map<string, Set<string>>();\n    \n    validateDedupeConfig(sheet, fieldKeys, mergeFields, federateConfig);\n    \n    expect(mergeFields.get(\"test-sheet\")?.size).toBe(3);\n    expect(mergeFields.get(\"test-sheet\")?.has(\"field1\")).toBe(true);\n    expect(mergeFields.get(\"test-sheet\")?.has(\"field2\")).toBe(true);\n    expect(mergeFields.get(\"test-sheet\")?.has(\"field3\")).toBe(true);\n  });\n  \n  it(\"should not modify other sheets in the mergeFields map\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      dedupe_config: {\n        on: \"field1\",\n        type: \"merge\",\n        keep: \"first\"\n      }\n    };\n    const fieldKeys = new Set([\"field1\", \"field2\"]);\n    const mergeFields = new Map<string, Set<string>>();\n    \n    // Add another sheet to the map\n    mergeFields.set(\"other-sheet\", new Set([\"other_field\"]));\n    \n    validateDedupeConfig(sheet, fieldKeys, mergeFields, federateConfig);\n    \n    // Verify the other sheet wasn't modified\n    expect(mergeFields.get(\"other-sheet\")?.size).toBe(1);\n    expect(mergeFields.get(\"other-sheet\")?.has(\"other_field\")).toBe(true);\n    \n    // Verify the test sheet was properly updated\n    expect(mergeFields.get(\"test-sheet\")?.size).toBe(1);\n    expect(mergeFields.get(\"test-sheet\")?.has(\"field1\")).toBe(true);\n  });\n}); "]}