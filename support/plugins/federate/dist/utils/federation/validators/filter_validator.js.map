{"version":3,"file":"filter_validator.js","sourceRoot":"","sources":["../../../../src/utils/federation/validators/filter_validator.ts"],"names":[],"mappings":"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","sourcesContent":["import { FederatedSheetConfig, FederateConfig } from \"../../../types\";\nimport { logInfo, logError, logWarn } from \"@flatfile/util-common\";\n\n/**\n* Validates filter configurations for a sheet.\n* This function verifies that all fields referenced in filter configurations\n* actually exist in the sheet's field definitions. It checks:\n* \n* - field_values_required: All field keys must exist in the sheet\n* - field_values_excluded: All field keys must exist in the sheet\n* - all_fields_required: All fields must exist in the sheet\n* - any_fields_required: All fields must exist in the sheet\n* - any_fields_excluded: All fields must exist in the sheet\n* \n* @param sheet - The sheet configuration\n* @param fieldKeys - Set of field keys in the sheet\n* @param federateConfig - Federation configuration with debug settings\n* @throws Error if any field referenced in filters doesn't exist in the sheet\n* \n* @see shouldIncludeRecord in record_filter.ts - Function that uses these validated filters\n*/\nexport function validateFilters(\n  sheet: FederatedSheetConfig, \n  fieldKeys: Set<string>,\n  federateConfig: FederateConfig\n): void {\n  const sheetName = sheet.name || sheet.slug || 'unknown';\n  const sheetSlug = sheet.slug || 'unknown';\n  \n  if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Filter Validator\", `Validating filter configuration for sheet \"${sheetName}\"`);\n  \n  // Check if the sheet has any filters defined\n  const hasFilters = !!(\n    sheet.field_values_required ||\n    sheet.field_values_excluded ||\n    sheet.all_fields_required ||\n    sheet.any_fields_required ||\n    sheet.any_fields_excluded\n  );\n  \n  if (!hasFilters) {\n    if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Filter Validator\", `No filters defined for sheet \"${sheetName}\", skipping validation`);\n    return;\n  }\n  \n  if (federateConfig.debug) {\n    const fieldCount = fieldKeys.size;\n    const fieldList = Array.from(fieldKeys).join(', ');\n    logInfo(\"ðŸ“¦   â†³ Filter Validator\", `Sheet \"${sheetName}\" has ${fieldCount} available fields: ${fieldList}`);\n  }\n  \n  // Business rule: Check all referenced fields exist in the sheet\n  \n  // Validate field_values_required\n  if (sheet.field_values_required) {\n    if (federateConfig.debug) {\n      const fieldCount = Object.keys(sheet.field_values_required).length;\n      logInfo(\"ðŸ“¦   â†³ Filter Validator\", `Validating ${fieldCount} fields in field_values_required filter`);\n    }\n    \n    for (const field of Object.keys(sheet.field_values_required)) {\n      if (!fieldKeys.has(field)) {\n        if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Filter Validator\", `Field \"${field}\" in field_values_required does not exist in sheet \"${sheetName}\"`);\n        throw new Error(`[FilterValidator] Invalid filter configuration for sheet \"${sheetSlug}\": field \"${field}\" in field_values_required does not exist in the sheet`);\n      }\n      \n      if (federateConfig.debug) {\n        const values = sheet.field_values_required[field];\n        const valuesList = Array.isArray(values) ? values.join(', ') : values;\n        logInfo(\"ðŸ“¦   â†³ Filter Validator\", `Valid field_values_required: \"${field}\" with values: [${valuesList}]`);\n      }\n    }\n  }\n  \n  // Validate field_values_excluded\n  if (sheet.field_values_excluded) {\n    if (federateConfig.debug) {\n      const fieldCount = Object.keys(sheet.field_values_excluded).length;\n      logInfo(\"ðŸ“¦   â†³ Filter Validator\", `Validating ${fieldCount} fields in field_values_excluded filter`);\n    }\n    \n    for (const field of Object.keys(sheet.field_values_excluded)) {\n      if (!fieldKeys.has(field)) {\n        if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Filter Validator\", `Field \"${field}\" in field_values_excluded does not exist in sheet \"${sheetName}\"`);\n        throw new Error(`[FilterValidator] Invalid filter configuration for sheet \"${sheetSlug}\": field \"${field}\" in field_values_excluded does not exist in the sheet`);\n      }\n      \n      if (federateConfig.debug) {\n        const values = sheet.field_values_excluded[field];\n        const valuesList = Array.isArray(values) ? values.join(', ') : values;\n        logInfo(\"ðŸ“¦   â†³ Filter Validator\", `Valid field_values_excluded: \"${field}\" with values: [${valuesList}]`);\n      }\n    }\n  }\n  \n  // Validate all_fields_required\n  if (sheet.all_fields_required) {\n    if (federateConfig.debug) {\n      const fieldCount = sheet.all_fields_required.length;\n      logInfo(\"ðŸ“¦   â†³ Filter Validator\", `Validating ${fieldCount} fields in all_fields_required filter`);\n    }\n    \n    for (const field of sheet.all_fields_required) {\n      if (!fieldKeys.has(field)) {\n        if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Filter Validator\", `Field \"${field}\" in all_fields_required does not exist in sheet \"${sheetName}\"`);\n        throw new Error(`[FilterValidator] Invalid filter configuration for sheet \"${sheetSlug}\": field \"${field}\" in all_fields_required does not exist in the sheet`);\n      }\n      \n      if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Filter Validator\", `Valid all_fields_required reference: \"${field}\"`);\n    }\n  }\n  \n  // Validate any_fields_required\n  if (sheet.any_fields_required) {\n    if (federateConfig.debug) {\n      const fieldCount = sheet.any_fields_required.length;\n      logInfo(\"ðŸ“¦   â†³ Filter Validator\", `Validating ${fieldCount} fields in any_fields_required filter`);\n    }\n    \n    for (const field of sheet.any_fields_required) {\n      if (!fieldKeys.has(field)) {\n        if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Filter Validator\", `Field \"${field}\" in any_fields_required does not exist in sheet \"${sheetName}\"`);\n        throw new Error(`[FilterValidator] Invalid filter configuration for sheet \"${sheetSlug}\": field \"${field}\" in any_fields_required does not exist in the sheet`);\n      }\n      \n      if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Filter Validator\", `Valid any_fields_required reference: \"${field}\"`);\n    }\n  }\n  \n  // Validate any_fields_excluded\n  if (sheet.any_fields_excluded) {\n    if (federateConfig.debug) {\n      const fieldCount = sheet.any_fields_excluded.length;\n      logInfo(\"ðŸ“¦   â†³ Filter Validator\", `Validating ${fieldCount} fields in any_fields_excluded filter`);\n    }\n    \n    for (const field of sheet.any_fields_excluded) {\n      if (!fieldKeys.has(field)) {\n        if (federateConfig.debug) logError(\"ðŸ“¦   â†³ Filter Validator\", `Field \"${field}\" in any_fields_excluded does not exist in sheet \"${sheetName}\"`);\n        throw new Error(`[FilterValidator] Invalid filter configuration for sheet \"${sheetSlug}\": field \"${field}\" in any_fields_excluded does not exist in the sheet`);\n      }\n      \n      if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Filter Validator\", `Valid any_fields_excluded reference: \"${field}\"`);\n    }\n  }\n  \n  if (federateConfig.debug) logInfo(\"ðŸ“¦   â†³ Filter Validator\", `Filter configuration for sheet \"${sheetName}\" validated successfully`);\n} "]}