{"version":3,"file":"unpivot_validator.spec.js","sourceRoot":"","sources":["../../../../src/utils/federation/validators/unpivot_validator.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { FederatedUnpivotSheetConfig, UnpivotGroupConfig } from \"../../../types/federated_unpivot_sheet_config\";\nimport { validateUnpivotConfig, validateUnpivotFields, validateSourceFields } from \"./unpivot_validator\";\nimport { Flatfile } from \"@flatfile/api\";\nimport { FederateConfig } from \"../../../types/federate_config\";\n\ndescribe(\"validateUnpivotConfig\", () => {\n  // Create a minimal federateConfig for testing\n  const federateConfig: FederateConfig = {\n    source_workbook_name: \"Test Source Workbook\",\n    federated_workbook: { name: \"Test Federated Workbook\", sheets: [] },\n    debug: false\n  };\n  \n  const sheet: Partial<FederatedUnpivotSheetConfig> = {\n    name: \"Test Sheet\",\n    slug: \"test-sheet\",\n    fields: [\n      { key: \"field1\", label: \"Field 1\", type: \"string\" },\n      { key: \"field2\", label: \"Field 2\", type: \"string\" }\n    ],\n    unpivot_groups: {\n      group1: {\n        source_sheet_slug: \"source-sheet\",\n        field_mappings: [\n          {\n            field1: \"source_field1\",\n            field2: \"source_field2\"\n          }\n        ]\n      }\n    }\n  };\n  \n  it(\"should not throw for valid unpivot configuration\", () => {\n    expect(() => {\n      validateUnpivotConfig(sheet as FederatedUnpivotSheetConfig, federateConfig);\n    }).not.toThrow();\n  });\n  \n  it(\"should throw error for empty unpivot_groups\", () => {\n    const emptyGroupsSheet: Partial<FederatedUnpivotSheetConfig> = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      unpivot_groups: {}\n    };\n    \n    expect(() => {\n      validateUnpivotConfig(emptyGroupsSheet as FederatedUnpivotSheetConfig, federateConfig);\n    }).toThrow(\"[UnpivotValidator] Unpivot configuration must have at least one unpivot group\");\n  });\n  \n  it(\"should throw error for empty field mappings\", () => {\n    const emptyMappingsSheet: Partial<FederatedUnpivotSheetConfig> = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      unpivot_groups: {\n        group1: {\n          source_sheet_slug: \"source-sheet\",\n          field_mappings: []\n        }\n      }\n    };\n    \n    expect(() => {\n      validateUnpivotConfig(emptyMappingsSheet as FederatedUnpivotSheetConfig, federateConfig);\n    }).toThrow('[UnpivotValidator] Unpivot group \"group1\" must have at least one field mapping');\n  });\n  \n  it(\"should throw error for empty mapping\", () => {\n    const emptyMappingSheet: Partial<FederatedUnpivotSheetConfig> = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      unpivot_groups: {\n        group1: {\n          source_sheet_slug: \"source-sheet\",\n          field_mappings: [{}]\n        }\n      }\n    };\n    \n    expect(() => {\n      validateUnpivotConfig(emptyMappingSheet as FederatedUnpivotSheetConfig, federateConfig);\n    }).toThrow('[UnpivotValidator] Unpivot group \"group1\" has an empty field mapping for key: field1');\n  });\n  \n  it(\"should throw error if unpivot_groups is not defined\", () => {\n    const noGroupsSheet: Partial<FederatedUnpivotSheetConfig> = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [\n        { key: \"field1\", label: \"Field 1\", type: \"string\" }\n      ],\n      unpivot_groups: undefined\n    };\n    \n    expect(() => {\n      validateUnpivotConfig(noGroupsSheet as FederatedUnpivotSheetConfig, federateConfig);\n    }).toThrow(\"[UnpivotValidator] Unpivot configuration must have at least one unpivot group\");\n  });\n  \n  it(\"should throw error for missing source_sheet_slug\", () => {\n    const missingSourceSheetSheet: Partial<FederatedUnpivotSheetConfig> = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      unpivot_groups: {\n        group1: {\n          field_mappings: [\n            {\n              field1: \"source_field1\"\n            }\n          ]\n        } as any\n      }\n    };\n    \n    expect(() => {\n      validateUnpivotConfig(missingSourceSheetSheet as FederatedUnpivotSheetConfig, federateConfig);\n    }).toThrow('[UnpivotValidator] Unpivot group \"group1\" must have either source_sheet or source_sheet_slug');\n  });\n  \n  it(\"should not throw for valid UnpivotGroupConfigWithSheet\", () => {\n    const sheetWithSourceSheet: Partial<FederatedUnpivotSheetConfig> = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [\n        { key: \"field1\", label: \"Field 1\", type: \"string\" },\n        { key: \"field2\", label: \"Field 2\", type: \"string\" }\n      ],\n      unpivot_groups: {\n        group1: {\n          source_sheet: {\n            name: \"Source Sheet\",\n            slug: \"source-sheet\",\n            fields: [\n              { key: \"source_field1\", type: \"string\", label: \"Source Field 1\" },\n              { key: \"source_field2\", type: \"string\", label: \"Source Field 2\" }\n            ]\n          } as Flatfile.SheetConfig,\n          field_mappings: [\n            {\n              field1: \"source_field1\",\n              field2: \"source_field2\"\n            }\n          ]\n        }\n      }\n    };\n    \n    expect(() => {\n      validateUnpivotConfig(sheetWithSourceSheet as FederatedUnpivotSheetConfig, federateConfig);\n    }).not.toThrow();\n  });\n  \n  it(\"should throw error for missing source_sheet in UnpivotGroupConfigWithSheet\", () => {\n    const missingSourceSheet: Partial<FederatedUnpivotSheetConfig> = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      unpivot_groups: {\n        group1: {\n          field_mappings: [\n            {\n              field1: \"source_field1\"\n            }\n          ]\n        } as any\n      }\n    };\n    \n    expect(() => {\n      validateUnpivotConfig(missingSourceSheet as FederatedUnpivotSheetConfig, federateConfig);\n    }).toThrow('[UnpivotValidator] Unpivot group \"group1\" must have either source_sheet or source_sheet_slug');\n  });\n  \n  it(\"should throw error for source_sheet without a slug\", () => {\n    const sheet: Partial<FederatedUnpivotSheetConfig> = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      unpivot_groups: {\n        group1: {\n          source_sheet: {\n            name: \"Source Sheet\",\n            fields: [\n              { key: \"source_field1\", type: \"string\", label: \"Source Field 1\" }\n            ]\n          } as Flatfile.SheetConfig,\n          field_mappings: [\n            {\n              field1: \"source_field1\"\n            }\n          ]\n        }\n      }\n    };\n    \n    expect(() => {\n      validateUnpivotConfig(sheet as FederatedUnpivotSheetConfig, federateConfig);\n    }).toThrow('[UnpivotValidator] Unpivot group \"group1\" with source_sheet must have a valid slug');\n  });\n  \n  it(\"should throw error for source_sheet with an empty slug\", () => {\n    const sheet: Partial<FederatedUnpivotSheetConfig> = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      unpivot_groups: {\n        group1: {\n          source_sheet: {\n            name: \"Source Sheet\",\n            slug: \"\",\n            fields: [\n              { key: \"source_field1\", type: \"string\", label: \"Source Field 1\" }\n            ]\n          } as Flatfile.SheetConfig,\n          field_mappings: [\n            {\n              field1: \"source_field1\"\n            }\n          ]\n        }\n      }\n    };\n    \n    expect(() => {\n      validateUnpivotConfig(sheet as FederatedUnpivotSheetConfig, federateConfig);\n    }).toThrow('[UnpivotValidator] Unpivot group \"group1\" with source_sheet must have a valid slug');\n  });\n});\n\ndescribe(\"validateUnpivotFields\", () => {\n  // Create a minimal federateConfig for testing\n  const federateConfig: FederateConfig = {\n    source_workbook_name: \"Test Source Workbook\",\n    federated_workbook: { name: \"Test Federated Workbook\", sheets: [] },\n    debug: false\n  };\n  \n  it(\"should not throw for valid unpivot fields\", () => {\n    const sheet: Partial<FederatedUnpivotSheetConfig> = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [\n        {\n          key: \"field1\",\n          type: \"string\",\n          label: \"Field 1\"\n        },\n        {\n          key: \"field2\",\n          type: \"string\",\n          label: \"Field 2\"\n        }\n      ],\n      unpivot_groups: {\n        group1: {\n          source_sheet_slug: \"source-sheet-1\",\n          field_mappings: [{ field1: \"source_field1\" }]\n        },\n        group2: {\n          source_sheet_slug: \"source-sheet-2\",\n          field_mappings: [{ field2: \"source_field2\" }]\n        }\n      }\n    };\n    \n    expect(() => {\n      validateUnpivotFields(sheet as FederatedUnpivotSheetConfig, federateConfig);\n    }).not.toThrow();\n  });\n  \n  it(\"should not throw if fields is not defined\", () => {\n    const sheet: Partial<FederatedUnpivotSheetConfig> = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: []\n    };\n    \n    expect(() => {\n      validateUnpivotFields(sheet as FederatedUnpivotSheetConfig, federateConfig);\n    }).not.toThrow();\n  });\n  \n  it(\"should not throw if unpivot_groups is not defined\", () => {\n    const sheet: Partial<FederatedUnpivotSheetConfig> = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [\n        {\n          key: \"field1\",\n          type: \"string\",\n          label: \"Field 1\"\n        }\n      ]\n    };\n    \n    expect(() => {\n      validateUnpivotFields(sheet as FederatedUnpivotSheetConfig, federateConfig);\n    }).not.toThrow();\n  });\n  \n  it(\"should not throw if unpivot_groups is empty\", () => {\n    const sheet: Partial<FederatedUnpivotSheetConfig> = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [\n        {\n          key: \"field1\",\n          type: \"string\",\n          label: \"Field 1\"\n        }\n      ],\n      unpivot_groups: {}\n    };\n    \n    expect(() => {\n      validateUnpivotFields(sheet as FederatedUnpivotSheetConfig, federateConfig);\n    }).not.toThrow();\n  });\n  \n  it(\"should throw error for field referenced in unpivot but not defined in sheet\", () => {\n    const sheet: Partial<FederatedUnpivotSheetConfig> = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [\n        {\n          key: \"field1\",\n          type: \"string\",\n          label: \"Field 1\"\n        }\n      ],\n      unpivot_groups: {\n        group1: {\n          source_sheet_slug: \"source-sheet\",\n          field_mappings: [{ field2: \"source_field2\" }]\n        }\n      }\n    };\n    \n    expect(() => {\n      validateUnpivotFields(sheet as FederatedUnpivotSheetConfig, federateConfig);\n    }).toThrow('[UnpivotValidator] Invalid unpivot configuration for sheet \"test-sheet\": unpivot group \"group1\" references field \"field2\", but this field does not exist in the sheet\\'s fields');\n  });\n});\n\ndescribe(\"validateSourceFields\", () => {\n  // Create a minimal federateConfig for testing\n  const federateConfig: FederateConfig = {\n    source_workbook_name: \"Test Source Workbook\",\n    federated_workbook: { name: \"Test Federated Workbook\", sheets: [] },\n    debug: false\n  };\n  \n  it(\"should not throw for valid source fields\", () => {\n    const group: UnpivotGroupConfig = {\n      source_sheet: {\n        name: \"Source Sheet\",\n        slug: \"source-sheet\",\n        fields: [\n          { key: \"source_field1\", type: \"string\", label: \"Source Field 1\" },\n          { key: \"source_field2\", type: \"string\", label: \"Source Field 2\" }\n        ]\n      } as Flatfile.SheetConfig,\n      field_mappings: [\n        { \"target_field1\": \"source_field1\", \"target_field2\": \"source_field2\" }\n      ]\n    };\n    \n    expect(() => {\n      validateSourceFields(group, \"testGroup\", federateConfig);\n    }).not.toThrow();\n  });\n  \n  it(\"should exit early if no field mappings are provided\", () => {\n    const group: UnpivotGroupConfig = {\n      source_sheet: {\n        name: \"Source Sheet\",\n        slug: \"source-sheet\",\n        fields: [\n          { key: \"source_field1\", type: \"string\", label: \"Source Field 1\" }\n        ]\n      } as Flatfile.SheetConfig,\n      field_mappings: []\n    };\n    \n    expect(() => {\n      validateSourceFields(group, \"testGroup\", federateConfig);\n    }).not.toThrow();\n  });\n  \n  it(\"should exit early if only source_sheet_slug is provided\", () => {\n    const group: UnpivotGroupConfig = {\n      source_sheet_slug: \"source-sheet\",\n      field_mappings: [\n        { \"target_field1\": \"source_field1\" }\n      ]\n    };\n    \n    expect(() => {\n      validateSourceFields(group, \"testGroup\", federateConfig);\n    }).not.toThrow();\n  });\n  \n  it(\"should throw error for missing source field\", () => {\n    const group: UnpivotGroupConfig = {\n      source_sheet: {\n        name: \"Source Sheet\",\n        slug: \"source-sheet\",\n        fields: [\n          { key: \"source_field1\", type: \"string\", label: \"Source Field 1\" }\n        ]\n      } as Flatfile.SheetConfig,\n      field_mappings: [\n        { \"target_field1\": \"nonexistent_field\" }\n      ]\n    };\n    \n    expect(() => {\n      validateSourceFields(group, \"testGroup\", federateConfig);\n    }).toThrow('[UnpivotValidator] Invalid unpivot configuration for group \"testGroup\": field mapping at index 0 references source field \"nonexistent_field\", but this field does not exist in the source sheet');\n  });\n  \n  it(\"should validate multiple field mappings\", () => {\n    const group: UnpivotGroupConfig = {\n      source_sheet: {\n        name: \"Source Sheet\",\n        slug: \"source-sheet\",\n        fields: [\n          { key: \"source_field1\", type: \"string\", label: \"Source Field 1\" },\n          { key: \"source_field2\", type: \"string\", label: \"Source Field 2\" }\n        ]\n      } as Flatfile.SheetConfig,\n      field_mappings: [\n        { \"target_field1\": \"source_field1\" },\n        { \"target_field2\": \"source_field2\" }\n      ]\n    };\n    \n    expect(() => {\n      validateSourceFields(group, \"testGroup\", federateConfig);\n    }).not.toThrow();\n  });\n  \n  it(\"should throw error for one invalid mapping among multiple valid ones\", () => {\n    const group: UnpivotGroupConfig = {\n      source_sheet: {\n        name: \"Source Sheet\",\n        slug: \"source-sheet\",\n        fields: [\n          { key: \"source_field1\", type: \"string\", label: \"Source Field 1\" }\n        ]\n      } as Flatfile.SheetConfig,\n      field_mappings: [\n        { \"target_field1\": \"source_field1\" },\n        { \"target_field2\": \"nonexistent_field\" }\n      ]\n    };\n    \n    expect(() => {\n      validateSourceFields(group, \"testGroup\", federateConfig);\n    }).toThrow('[UnpivotValidator] Invalid unpivot configuration for group \"testGroup\": field mapping at index 1 references source field \"nonexistent_field\", but this field does not exist in the source sheet');\n  });\n  \n  it(\"should not validate fields with static values using << and >> syntax\", () => {\n    const group: UnpivotGroupConfig = {\n      source_sheet: {\n        name: \"Source Sheet\",\n        slug: \"source-sheet\",\n        fields: [\n          { key: \"source_field1\", type: \"string\", label: \"Source Field 1\" }\n        ]\n      } as Flatfile.SheetConfig,\n      field_mappings: [\n        { \n          \"target_field1\": \"source_field1\",\n          \"static_field\": \"<<Static Value>>\",\n          \"category\": \"<<Primary>>\"\n        }\n      ]\n    };\n    \n    expect(() => {\n      validateSourceFields(group, \"testGroup\", federateConfig);\n    }).not.toThrow();\n  });\n  \n  it(\"should validate mixed normal fields and static values correctly\", () => {\n    const group: UnpivotGroupConfig = {\n      source_sheet: {\n        name: \"Source Sheet\",\n        slug: \"source-sheet\",\n        fields: [\n          { key: \"source_field1\", type: \"string\", label: \"Source Field 1\" }\n        ]\n      } as Flatfile.SheetConfig,\n      field_mappings: [\n        { \n          \"target_field1\": \"source_field1\",\n          \"static_field\": \"<<Static Value>>\",\n          \"invalid_field\": \"nonexistent_field\"  // This should fail validation\n        }\n      ]\n    };\n    \n    expect(() => {\n      validateSourceFields(group, \"testGroup\", federateConfig);\n    }).toThrow('[UnpivotValidator] Invalid unpivot configuration for group \"testGroup\": field mapping at index 0 references source field \"nonexistent_field\", but this field does not exist in the source sheet');\n  });\n}); "]}