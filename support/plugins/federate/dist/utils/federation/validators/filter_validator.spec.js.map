{"version":3,"file":"filter_validator.spec.js","sourceRoot":"","sources":["../../../../src/utils/federation/validators/filter_validator.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { FederateConfig, FederatedSheetConfig } from \"../../../types\";\nimport { validateFilters } from \"./filter_validator\";\nimport { logInfo, logError } from \"@flatfile/util-common\";\n\n// Mock logging functions\njest.mock(\"@flatfile/util-common\", () => ({\n  logInfo: jest.fn(),\n  logError: jest.fn(),\n  logWarn: jest.fn()\n}));\n\ndescribe(\"validateFilters\", () => {\n  const fieldKeys = new Set([\"field1\", \"field2\", \"field3\"]);\n  const federateConfig: FederateConfig = {\n    source_workbook_name: \"Source Workbook\",\n    federated_workbook: {\n      name: \"Federated Workbook\",\n      sheets: []\n    },\n    debug: false\n  };\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n  \n  it(\"should not throw for valid filter configurations\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      field_values_required: {\n        \"field1\": [\"value1\", \"value2\"]\n      },\n      field_values_excluded: {\n        \"field2\": [\"value3\"]\n      },\n      all_fields_required: [\"field1\", \"field3\"],\n      any_fields_required: [\"field2\"],\n      any_fields_excluded: [\"field3\"]\n    };\n    \n    expect(() => {\n      validateFilters(sheet, fieldKeys, federateConfig);\n    }).not.toThrow();\n  });\n  \n  it(\"should throw error for invalid field in field_values_required\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      field_values_required: {\n        \"non_existent_field\": [\"value1\"]\n      }\n    };\n    \n    expect(() => {\n      validateFilters(sheet, fieldKeys, federateConfig);\n    }).toThrow('[FilterValidator] Invalid filter configuration for sheet \"test-sheet\": field \"non_existent_field\" in field_values_required does not exist in the sheet');\n  });\n  \n  it(\"should throw error for invalid field in field_values_excluded\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      field_values_excluded: {\n        \"non_existent_field\": [\"value1\"]\n      }\n    };\n    \n    expect(() => {\n      validateFilters(sheet, fieldKeys, federateConfig);\n    }).toThrow('[FilterValidator] Invalid filter configuration for sheet \"test-sheet\": field \"non_existent_field\" in field_values_excluded does not exist in the sheet');\n  });\n  \n  it(\"should throw error for invalid field in all_fields_required\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      all_fields_required: [\"non_existent_field\"]\n    };\n    \n    expect(() => {\n      validateFilters(sheet, fieldKeys, federateConfig);\n    }).toThrow('[FilterValidator] Invalid filter configuration for sheet \"test-sheet\": field \"non_existent_field\" in all_fields_required does not exist in the sheet');\n  });\n  \n  it(\"should throw error for invalid field in any_fields_required\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      any_fields_required: [\"non_existent_field\"]\n    };\n    \n    expect(() => {\n      validateFilters(sheet, fieldKeys, federateConfig);\n    }).toThrow('[FilterValidator] Invalid filter configuration for sheet \"test-sheet\": field \"non_existent_field\" in any_fields_required does not exist in the sheet');\n  });\n  \n  it(\"should throw error for invalid field in any_fields_excluded\", () => {\n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      any_fields_excluded: [\"non_existent_field\"]\n    };\n    \n    expect(() => {\n      validateFilters(sheet, fieldKeys, federateConfig);\n    }).toThrow('[FilterValidator] Invalid filter configuration for sheet \"test-sheet\": field \"non_existent_field\" in any_fields_excluded does not exist in the sheet');\n  });\n  \n  it(\"should handle sheet without slug\", () => {\n    const sheet = {\n      name: \"Test Sheet\",\n      fields: [],\n      any_fields_excluded: [\"non_existent_field\"]\n    } as unknown as FederatedSheetConfig;\n    \n    expect(() => validateFilters(sheet, new Set<string>(), federateConfig)).toThrow(\n      '[FilterValidator] Invalid filter configuration for sheet \"unknown\": field \"non_existent_field\" in any_fields_excluded does not exist in the sheet'\n    );\n  });\n  \n  // Tests for debug mode\n  it(\"should log debug information when debug is enabled\", () => {\n    const debugConfig: FederateConfig = {\n      ...federateConfig,\n      debug: true\n    };\n    \n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      field_values_required: {\n        \"field1\": [\"value1\", \"value2\"]\n      }\n    };\n    \n    validateFilters(sheet, fieldKeys, debugConfig);\n    \n    expect(logInfo).toHaveBeenCalled();\n    expect(logInfo).toHaveBeenCalledWith(\n      \"📦   ↳ Filter Validator\", \n      expect.stringContaining(\"Validating filter configuration\")\n    );\n  });\n  \n  it(\"should skip validation and log when no filters are defined\", () => {\n    const debugConfig: FederateConfig = {\n      ...federateConfig,\n      debug: true\n    };\n    \n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: []\n    };\n    \n    validateFilters(sheet, fieldKeys, debugConfig);\n    \n    expect(logInfo).toHaveBeenCalledWith(\n      \"📦   ↳ Filter Validator\", \n      expect.stringContaining(\"No filters defined\")\n    );\n  });\n  \n  it(\"should log field lists when debug is enabled\", () => {\n    const debugConfig: FederateConfig = {\n      ...federateConfig,\n      debug: true\n    };\n    \n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      field_values_required: {\n        \"field1\": [\"value1\", \"value2\"]\n      }\n    };\n    \n    validateFilters(sheet, fieldKeys, debugConfig);\n    \n    expect(logInfo).toHaveBeenCalledWith(\n      \"📦   ↳ Filter Validator\", \n      expect.stringContaining(\"available fields\")\n    );\n  });\n  \n  it(\"should log detailed validation information for each filter type\", () => {\n    const debugConfig: FederateConfig = {\n      ...federateConfig,\n      debug: true\n    };\n    \n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      field_values_required: {\n        \"field1\": [\"value1\", \"value2\"]\n      },\n      field_values_excluded: {\n        \"field2\": [\"value3\"]\n      },\n      all_fields_required: [\"field1\"],\n      any_fields_required: [\"field2\"],\n      any_fields_excluded: [\"field3\"]\n    };\n    \n    validateFilters(sheet, fieldKeys, debugConfig);\n    \n    // Check logs for field_values_required\n    expect(logInfo).toHaveBeenCalledWith(\n      \"📦   ↳ Filter Validator\", \n      expect.stringContaining(\"Validating 1 fields in field_values_required filter\")\n    );\n    \n    // Check logs for field_values_excluded\n    expect(logInfo).toHaveBeenCalledWith(\n      \"📦   ↳ Filter Validator\", \n      expect.stringContaining(\"Validating 1 fields in field_values_excluded filter\")\n    );\n    \n    // Check logs for all_fields_required\n    expect(logInfo).toHaveBeenCalledWith(\n      \"📦   ↳ Filter Validator\", \n      expect.stringContaining(\"Validating 1 fields in all_fields_required filter\")\n    );\n    \n    // Check logs for any_fields_required\n    expect(logInfo).toHaveBeenCalledWith(\n      \"📦   ↳ Filter Validator\", \n      expect.stringContaining(\"Validating 1 fields in any_fields_required filter\")\n    );\n    \n    // Check logs for any_fields_excluded\n    expect(logInfo).toHaveBeenCalledWith(\n      \"📦   ↳ Filter Validator\", \n      expect.stringContaining(\"Validating 1 fields in any_fields_excluded filter\")\n    );\n  });\n  \n  it(\"should log error when field doesn't exist in debug mode\", () => {\n    const debugConfig: FederateConfig = {\n      ...federateConfig,\n      debug: true\n    };\n    \n    const sheet: FederatedSheetConfig = {\n      name: \"Test Sheet\",\n      slug: \"test-sheet\",\n      fields: [],\n      field_values_required: {\n        \"non_existent_field\": [\"value1\"]\n      }\n    };\n    \n    try {\n      validateFilters(sheet, fieldKeys, debugConfig);\n    } catch (error) {\n      // Expected to throw, but we just want to check the logging\n    }\n    \n    expect(logError).toHaveBeenCalledWith(\n      \"📦   ↳ Filter Validator\", \n      expect.stringContaining('Field \"non_existent_field\" in field_values_required does not exist')\n    );\n  });\n}); "]}