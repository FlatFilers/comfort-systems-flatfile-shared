{"version":3,"file":"field_validator.spec.js","sourceRoot":"","sources":["../../../../src/utils/federation/validators/field_validator.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Flatfile } from \"@flatfile/api\";\nimport { FederatedProperty } from \"../../../types/federated_property\";\nimport { FederateConfig } from \"../../../types/federate_config\";\nimport { validateField, validateFields } from \"./field_validator\";\n\ndescribe(\"validateField\", () => {\n  // Default federateConfig for tests\n  const defaultFederateConfig: FederateConfig = {\n    source_workbook_name: \"Source Workbook\",\n    federated_workbook: {\n      name: \"Federated Workbook\",\n      sheets: []\n    },\n    debug: false\n  };\n  \n  it(\"should validate a field with source_sheet_slug and source_field_key\", () => {\n    const field: FederatedProperty = {\n      key: \"test\",\n      type: \"string\",\n      label: \"Test\",\n      federate_config: {\n        source_sheet_slug: \"source\",\n        source_field_key: \"source_key\"\n      }\n    };\n    expect(() => validateField(field, defaultFederateConfig)).not.toThrow();\n  });\n  \n  it(\"should validate a field with source_sheet and source_field_key\", () => {\n    const field: FederatedProperty = {\n      key: \"test\",\n      type: \"string\",\n      label: \"Test\",\n      federate_config: {\n        source_sheet: {\n          name: \"Source Sheet\",\n          slug: \"source\",\n          fields: [\n            {\n              key: \"source_key\",\n              type: \"string\",\n              label: \"Source Key\"\n            }\n          ]\n        },\n        source_field_key: \"source_key\"\n      }\n    };\n    expect(() => validateField(field, defaultFederateConfig)).not.toThrow();\n  });\n  \n  it(\"should throw error when field has source_sheet_slug but no source_field_key\", () => {\n    const field: FederatedProperty = {\n      key: \"test\",\n      type: \"string\",\n      label: \"Test\",\n      federate_config: {\n        source_sheet_slug: \"source\",\n        source_field_key: undefined\n      }\n    };\n    expect(() => validateField(field, defaultFederateConfig)).toThrow(\"[FieldValidator] Field with source_sheet_slug must have a source_field_key\");\n  });\n  \n  it(\"should throw error when field has source_field_key but no source sheet info\", () => {\n    const field: FederatedProperty = {\n      key: \"test\",\n      type: \"string\",\n      label: \"Test\",\n      federate_config: {\n        source_field_key: \"source_key\",\n        source_sheet_slug: undefined as unknown as string\n      }\n    };\n    expect(() => validateField(field, defaultFederateConfig)).toThrow(\"[FieldValidator] Field with source_field_key must have a source_sheet_slug\");\n  });\n  \n  it(\"should allow field with federate_config but no source field key\", () => {\n    const field: FederatedProperty = {\n      key: \"test\",\n      type: \"string\",\n      label: \"Test\",\n      federate_config: {\n        source_sheet: {\n          name: \"Source Sheet\",\n          slug: \"source\",\n          fields: []\n        }\n      }\n    };\n    expect(() => validateField(field, defaultFederateConfig)).not.toThrow();\n  });\n  \n  it(\"should throw error when source_field_key doesn't exist in source_sheet\", () => {\n    const field: FederatedProperty = {\n      key: \"test\",\n      type: \"string\",\n      label: \"Test\",\n      federate_config: {\n        source_sheet: {\n          name: \"Source Sheet\",\n          slug: \"source\",\n          fields: [\n            {\n              key: \"existing_field\",\n              type: \"string\",\n              label: \"Existing Field\"\n            }\n          ]\n        },\n        source_field_key: \"non_existing_field\"\n      }\n    };\n    expect(() => validateField(field, defaultFederateConfig)).toThrow(\"[FieldValidator] Field \\\"non_existing_field\\\" not found in source sheet \\\"source\\\"\");\n  });\n  \n  it(\"should not throw error when source_field_key doesn't exist in source_sheet but allow_undeclared_source_fields is true\", () => {\n    const field: FederatedProperty = {\n      key: \"test\",\n      type: \"string\",\n      label: \"Test\",\n      federate_config: {\n        source_sheet: {\n          name: \"Source Sheet\",\n          slug: \"source\",\n          fields: [\n            {\n              key: \"existing_field\",\n              type: \"string\",\n              label: \"Existing Field\"\n            }\n          ]\n        },\n        source_field_key: \"non_existing_field\"\n      }\n    };\n    const config: FederateConfig = {\n      source_workbook_name: \"Source Workbook\",\n      federated_workbook: {\n        name: \"Federated Workbook\",\n        sheets: []\n      },\n      allow_undeclared_source_fields: true\n    };\n    expect(() => validateField(field, config)).not.toThrow();\n  });\n  \n  it(\"should throw error when source_field_key doesn't exist in source_sheet and allow_undeclared_source_fields is false\", () => {\n    const field: FederatedProperty = {\n      key: \"test\",\n      type: \"string\",\n      label: \"Test\",\n      federate_config: {\n        source_sheet: {\n          name: \"Source Sheet\",\n          slug: \"source\",\n          fields: [\n            {\n              key: \"existing_field\",\n              type: \"string\",\n              label: \"Existing Field\"\n            }\n          ]\n        },\n        source_field_key: \"non_existing_field\"\n      }\n    };\n    const config: FederateConfig = {\n      source_workbook_name: \"Source Workbook\",\n      federated_workbook: {\n        name: \"Federated Workbook\",\n        sheets: []\n      },\n      allow_undeclared_source_fields: false\n    };\n    expect(() => validateField(field, config)).toThrow(\"[FieldValidator] Field \\\"non_existing_field\\\" not found in source sheet \\\"source\\\"\");\n  });\n  \n  it(\"should throw error when source_field_key doesn't exist in source_sheet and allow_undeclared_source_fields is undefined\", () => {\n    const field: FederatedProperty = {\n      key: \"test\",\n      type: \"string\",\n      label: \"Test\",\n      federate_config: {\n        source_sheet: {\n          name: \"Source Sheet\",\n          slug: \"source\",\n          fields: [\n            {\n              key: \"existing_field\",\n              type: \"string\",\n              label: \"Existing Field\"\n            }\n          ]\n        },\n        source_field_key: \"non_existing_field\"\n      }\n    };\n    const config: FederateConfig = {\n      source_workbook_name: \"Source Workbook\",\n      federated_workbook: {\n        name: \"Federated Workbook\",\n        sheets: []\n      }\n    };\n    expect(() => validateField(field, config)).toThrow(\"[FieldValidator] Field \\\"non_existing_field\\\" not found in source sheet \\\"source\\\"\");\n  });\n  \n  it(\"should validate source_field_key exists in source_sheet when allow_undeclared_source_fields is true\", () => {\n    const field: FederatedProperty = {\n      key: \"test\",\n      type: \"string\",\n      label: \"Test\",\n      federate_config: {\n        source_sheet: {\n          name: \"Source Sheet\",\n          slug: \"source\",\n          fields: [\n            {\n              key: \"existing_field\",\n              type: \"string\",\n              label: \"Existing Field\"\n            }\n          ]\n        },\n        source_field_key: \"existing_field\"\n      }\n    };\n    const config: FederateConfig = {\n      source_workbook_name: \"Source Workbook\",\n      federated_workbook: {\n        name: \"Federated Workbook\",\n        sheets: []\n      },\n      allow_undeclared_source_fields: true\n    };\n    expect(() => validateField(field, config)).not.toThrow();\n  });\n});\n\ndescribe(\"validateFields\", () => {\n  // Default federateConfig for tests\n  const defaultFederateConfig: FederateConfig = {\n    source_workbook_name: \"Source Workbook\",\n    federated_workbook: {\n      name: \"Federated Workbook\",\n      sheets: []\n    },\n    debug: false\n  };\n  \n  it(\"should validate multiple fields and collect source sheet slugs\", () => {\n    const fields: FederatedProperty[] = [\n      {\n        key: \"field1\",\n        type: \"string\",\n        label: \"Field 1\",\n        federate_config: {\n          source_sheet_slug: \"source1\",\n          source_field_key: \"source_key1\"\n        }\n      },\n      {\n        key: \"field2\",\n        type: \"string\",\n        label: \"Field 2\",\n        federate_config: {\n          source_sheet_slug: \"source2\",\n          source_field_key: \"source_key2\"\n        }\n      }\n    ];\n    const sourceSheets = new Set<string>();\n    const fieldKeys = validateFields(fields, undefined, \"test_sheet\", sourceSheets, defaultFederateConfig);\n    expect(fieldKeys.size).toBe(2);\n    expect(fieldKeys.has(\"field1\")).toBe(true);\n    expect(fieldKeys.has(\"field2\")).toBe(true);\n    expect(sourceSheets.size).toBe(2);\n    expect(sourceSheets.has(\"source1\")).toBe(true);\n    expect(sourceSheets.has(\"source2\")).toBe(true);\n  });\n  \n  it(\"should throw error for duplicate field keys\", () => {\n    const fields: FederatedProperty[] = [\n      {\n        key: \"unique\",\n        type: \"string\",\n        label: \"Unique Field\"\n      },\n      {\n        key: \"duplicate\",\n        type: \"string\",\n        label: \"Duplicate Field 1\"\n      },\n      {\n        key: \"duplicate\",\n        type: \"string\",\n        label: \"Duplicate Field 2\"\n      }\n    ];\n    const sourceSheets = new Set<string>();\n    expect(() => validateFields(fields, undefined, \"test_sheet\", sourceSheets, defaultFederateConfig))\n    .toThrow('[FieldValidator] Duplicate field key \"duplicate\" (duplicate real field) found in sheet \"test_sheet\". Keys must be unique across real and virtual fields.');\n  });\n  \n  it(\"should handle fields without federate_config\", () => {\n    const fields: FederatedProperty[] = [\n      {\n        key: \"field1\",\n        type: \"string\",\n        label: \"Field 1\"\n      },\n      {\n        key: \"field2\",\n        type: \"string\",\n        label: \"Field 2\"\n      }\n    ];\n    const sourceSheets = new Set<string>();\n    const sheetSlug = \"test_sheet\";\n    const fieldKeys = validateFields(fields, undefined, sheetSlug, sourceSheets, defaultFederateConfig);\n    expect(fieldKeys.size).toBe(2);\n    expect(sourceSheets.size).toBe(0);\n  });\n  \n  it(\"should handle fields with federate_config but no source_sheet_slug\", () => {\n    const fields: FederatedProperty[] = [\n      {\n        key: \"field1\",\n        type: \"string\",\n        label: \"Field 1\",\n        federate_config: {\n          source_sheet: {\n            name: \"Source Sheet\",\n            slug: \"source1\",\n            fields: []\n          }\n        }\n      }\n    ];\n    const sourceSheets = new Set<string>();\n    const sheetSlug = \"test_sheet\";\n    const fieldKeys = validateFields(fields, undefined, sheetSlug, sourceSheets, defaultFederateConfig);\n    expect(fieldKeys.size).toBe(1);\n    expect(sourceSheets.size).toBe(1);\n    expect(sourceSheets.has(\"source1\")).toBe(true);\n  });\n}); "]}