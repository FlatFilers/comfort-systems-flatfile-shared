{"version":3,"file":"config_validator.spec.js","sourceRoot":"","sources":["../../../../src/utils/federation/validators/config_validator.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { FederateConfig, FederatedProperty } from \"../../../types\";\nimport { validateConfig } from \"./config_validator\";\n\n// Mock validator functions\nconst mockValidators = {\n  validateFields: jest.fn(),\n  validateField: jest.fn(),\n  validateDedupeConfig: jest.fn(),\n  validateUnpivotConfig: jest.fn(),\n  validateUnpivotFields: jest.fn(),\n  validateFilters: jest.fn()\n};\n\njest.mock(\"./field_validator\", () => ({\n  validateFields: (...args: any[]) => mockValidators.validateFields(...args),\n  validateField: (...args: any[]) => mockValidators.validateField(...args)\n}));\n\njest.mock(\"./merge_validator\", () => ({\n  validateDedupeConfig: (...args: any[]) => mockValidators.validateDedupeConfig(...args)\n}));\n\njest.mock(\"./unpivot_validator\", () => ({\n  validateUnpivotConfig: (...args: any[]) => mockValidators.validateUnpivotConfig(...args),\n  validateUnpivotFields: (...args: any[]) => mockValidators.validateUnpivotFields(...args)\n}));\n\njest.mock(\"./filter_validator\", () => ({\n  validateFilters: (...args: any[]) => mockValidators.validateFilters(...args)\n}));\n\ndescribe(\"config_validator\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Mock validateFields to return field keys and update sourceSheets\n    mockValidators.validateFields.mockImplementation(\n      (realFields: FederatedProperty[], \n        virtualFields: FederatedProperty[] | undefined, \n        sheetSlug: string, \n        sourceSheets: Set<string>, \n        federateConfig: FederateConfig\n      ) => {\n        // Add source sheet slugs from real fields to the provided set\n        realFields.forEach((field: FederatedProperty) => {\n          if (field.federate_config?.source_sheet_slug) {\n            sourceSheets.add(field.federate_config.source_sheet_slug);\n          }\n        });\n        // Add source sheet slugs from virtual fields to the provided set\n        if (virtualFields) {\n          virtualFields.forEach((field: FederatedProperty) => {\n            if (field.federate_config?.source_sheet_slug) {\n              sourceSheets.add(field.federate_config.source_sheet_slug);\n            }\n          });\n        }\n        // Return a set of field keys (combine real and virtual for accuracy)\n        const allFields = [...realFields, ...(virtualFields || [])];\n        return new Set(allFields.map((f: FederatedProperty) => f.key));\n      }\n    );\n    mockValidators.validateField.mockReturnValue(undefined);\n    mockValidators.validateDedupeConfig.mockReturnValue(undefined);\n    mockValidators.validateUnpivotConfig.mockReturnValue(undefined);\n    mockValidators.validateUnpivotFields.mockReturnValue(undefined);\n    mockValidators.validateFilters.mockReturnValue(undefined);\n  });\n  \n  describe(\"Basic Validation\", () => {\n    it(\"should return set of source sheet slugs for valid config\", () => {\n      const config: FederateConfig = {\n        source_workbook_name: \"Source Workbook\",\n        federated_workbook: {\n          name: \"Federated Workbook\",\n          sheets: [\n            {\n              name: \"Sheet 1\",\n              slug: \"sheet1\",\n              fields: [\n                {\n                  key: \"field1\",\n                  type: \"string\",\n                  label: \"Field 1\",\n                  federate_config: {\n                    source_sheet_slug: \"source1\",\n                    source_field_key: \"sourceField1\"\n                  }\n                }\n              ]\n            },\n            {\n              name: \"Sheet 2\",\n              slug: \"sheet2\",\n              fields: [\n                {\n                  key: \"field2\",\n                  type: \"string\",\n                  label: \"Field 2\",\n                  federate_config: {\n                    source_sheet_slug: \"source2\",\n                    source_field_key: \"sourceField2\"\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      };\n      \n      const result = validateConfig(config);\n      expect(result).toEqual(new Set([\"source1\", \"source2\"]));\n    });\n    \n    it(\"should throw error for empty sheets\", () => {\n      const config: FederateConfig = {\n        source_workbook_name: \"Source Workbook\",\n        federated_workbook: {\n          name: \"Federated Workbook\",\n          sheets: []\n        }\n      };\n      expect(() => validateConfig(config)).toThrow(\"[ConfigValidator] Invalid federation configuration: federated_workbook must contain at least one sheet\");\n    });\n    \n    it(\"should throw error for duplicate slugs\", () => {\n      const config: FederateConfig = {\n        source_workbook_name: \"Source Workbook\",\n        federated_workbook: {\n          name: \"Federated Workbook\",\n          sheets: [\n            {\n              name: \"Sheet 1\",\n              slug: \"duplicate-slug\",\n              fields: [\n                {\n                  key: \"field1\",\n                  type: \"string\",\n                  label: \"Field 1\",\n                  federate_config: {\n                    source_sheet_slug: \"source1\",\n                    source_field_key: \"sourceField1\"\n                  }\n                }\n              ]\n            },\n            {\n              name: \"Sheet 2\",\n              slug: \"duplicate-slug\",\n              fields: [\n                {\n                  key: \"field2\",\n                  type: \"string\",\n                  label: \"Field 2\",\n                  federate_config: {\n                    source_sheet_slug: \"source2\",\n                    source_field_key: \"sourceField2\"\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      };\n      \n      expect(() => validateConfig(config)).toThrow('[ConfigValidator] Duplicate sheet slug found: \"duplicate-slug\". Sheet slugs must be unique.');\n    });\n  });\n  \n  describe(\"Field Validation\", () => {\n    it(\"should throw error for sheet without fields\", () => {\n      const config: FederateConfig = {\n        source_workbook_name: \"Source Workbook\",\n        federated_workbook: {\n          name: \"Federated Workbook\",\n          sheets: [\n            {\n              name: \"Sheet 1\",\n              slug: \"sheet1\",\n              fields: []\n            }\n          ]\n        }\n      };\n      \n      expect(() => validateConfig(config)).toThrow('[ConfigValidator] Sheet \"sheet1\" must have at least one field');\n    });\n    \n    it(\"should validate field configurations\", () => {\n      const config: FederateConfig = {\n        source_workbook_name: \"Source Workbook\",\n        federated_workbook: {\n          name: \"Federated Workbook\",\n          sheets: [\n            {\n              name: \"Sheet 1\",\n              slug: \"sheet1\",\n              fields: [\n                {\n                  key: \"field1\",\n                  type: \"string\",\n                  label: \"Field 1\",\n                  federate_config: {\n                    source_sheet_slug: \"source1\",\n                    source_field_key: \"sourceField1\"\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      };\n      \n      validateConfig(config);\n      expect(mockValidators.validateFields).toHaveBeenCalled();\n    });\n    \n    it(\"should handle nested field paths\", () => {\n      const config: FederateConfig = {\n        source_workbook_name: \"Source Workbook\",\n        federated_workbook: {\n          name: \"Federated Workbook\",\n          sheets: [\n            {\n              name: \"Sheet 1\",\n              slug: \"sheet1\",\n              fields: [\n                {\n                  key: \"parent.child.field\",\n                  type: \"string\",\n                  label: \"Nested Field\",\n                  federate_config: {\n                    source_sheet_slug: \"source1\",\n                    source_field_key: \"parent.child.field\"\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      };\n      \n      const result = validateConfig(config);\n      expect(result).toEqual(new Set([\"source1\"]));\n    });\n  });\n  \n  describe(\"Validator Function Calls\", () => {\n    it(\"should call all validators for each sheet\", () => {\n      const config: FederateConfig = {\n        source_workbook_name: \"Source Workbook\",\n        federated_workbook: {\n          name: \"Federated Workbook\",\n          sheets: [\n            {\n              name: \"Sheet 1\",\n              slug: \"sheet1\",\n              fields: [\n                {\n                  key: \"field1\",\n                  type: \"string\",\n                  label: \"Field 1\",\n                  federate_config: {\n                    source_sheet_slug: \"source1\",\n                    source_field_key: \"sourceField1\"\n                  }\n                }\n              ]\n            },\n            {\n              name: \"Sheet 2\",\n              slug: \"sheet2\",\n              fields: [\n                {\n                  key: \"field2\",\n                  type: \"string\",\n                  label: \"Field 2\",\n                  federate_config: {\n                    source_sheet_slug: \"source2\",\n                    source_field_key: \"sourceField2\"\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      };\n      \n      validateConfig(config);\n      \n      expect(mockValidators.validateFields).toHaveBeenCalledTimes(2);\n      expect(mockValidators.validateUnpivotConfig).toHaveBeenCalledTimes(2);\n      expect(mockValidators.validateUnpivotFields).toHaveBeenCalledTimes(0);\n      expect(mockValidators.validateDedupeConfig).toHaveBeenCalledTimes(2);\n      expect(mockValidators.validateFilters).toHaveBeenCalledTimes(2);\n    });\n  });\n  \n  describe(\"Error Handling\", () => {\n    it(\"should propagate validation errors\", () => {\n      const config: FederateConfig = {\n        source_workbook_name: \"Source Workbook\",\n        federated_workbook: {\n          name: \"Federated Workbook\",\n          sheets: [\n            {\n              name: \"Sheet 1\",\n              slug: \"sheet1\",\n              fields: [\n                {\n                  key: \"field1\",\n                  type: \"string\",\n                  label: \"Field 1\",\n                  federate_config: {\n                    source_sheet_slug: \"source1\",\n                    source_field_key: \"sourceField1\"\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      };\n      \n      mockValidators.validateFields.mockImplementation(() => {\n        throw new Error(\"Field validation failed\");\n      });\n      \n      expect(() => validateConfig(config)).toThrow(\"Field validation failed\");\n    });\n    \n    it(\"should handle unpivot validation errors\", () => {\n      const config: FederateConfig = {\n        source_workbook_name: \"Source Workbook\",\n        federated_workbook: {\n          name: \"Federated Workbook\",\n          sheets: [\n            {\n              name: \"Sheet 1\",\n              slug: \"sheet1\",\n              fields: [\n                {\n                  key: \"field1\",\n                  type: \"string\",\n                  label: \"Field 1\",\n                  federate_config: {\n                    source_sheet_slug: \"source1\",\n                    source_field_key: \"sourceField1\"\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      };\n      \n      mockValidators.validateUnpivotConfig.mockImplementation(() => {\n        throw new Error(\"Unpivot validation failed\");\n      });\n      \n      expect(() => validateConfig(config)).toThrow(\"Unpivot validation failed\");\n    });\n  });\n  \n  describe(\"Performance\", () => {\n    it(\"should handle large configurations\", () => {\n      const config: FederateConfig = {\n        source_workbook_name: \"Source Workbook\",\n        federated_workbook: {\n          name: \"Federated Workbook\",\n          sheets: Array(100).fill(null).map((_, i) => ({\n            name: `Sheet ${i}`,\n            slug: `sheet${i}`,\n            fields: Array(50).fill(null).map((_, j) => ({\n              key: `field${j}`,\n              type: \"string\",\n              label: `Field ${j}`,\n              federate_config: {\n                source_sheet_slug: `source${i}`,\n                source_field_key: `sourceField${j}`\n              }\n            }))\n          }))\n        }\n      };\n      \n      const startTime = Date.now();\n      validateConfig(config);\n      const endTime = Date.now();\n      const duration = endTime - startTime;\n      \n      expect(duration).toBeLessThan(1000); // Should complete in less than 1 second\n      expect(mockValidators.validateFields).toHaveBeenCalledTimes(100);\n    });\n  });\n}); "]}