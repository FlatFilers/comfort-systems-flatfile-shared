{"version":3,"file":"federated_sheet_manager.js","sourceRoot":"","sources":["../../../src/utils/federation/federated_sheet_manager.ts"],"names":[],"mappings":"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","sourcesContent":["// src/utils/federation/federated_sheet_manager.ts\nimport { Flatfile } from \"@flatfile/api\";\nimport {\n  FederateConfig,\n  DedupeConfig,\n  FederatedSheetConfig,\n  FederatedUnpivotSheetConfig,\n  FederatedProperty,\n  UnpivotGroupConfig,\n  SourceMapping,\n  FieldMapping,\n  UnpivotMapping\n} from \"../../types\";\nimport { validateConfig } from \"./validators/config_validator\";\nimport { mergeRecords } from \"./processors/merge_processor\";\nimport { filterRecords, FilterConfig, shouldIncludeRecord } from \"./filters/record_filter\";\nimport { processRecord } from \"./processors/record_processor\";\nimport { logError, logInfo, logWarn } from \"@flatfile/util-common\";\n\n// Helper to check if a sheet config is for unpivot\nfunction isUnpivotSheet(sheet: FederatedSheetConfig | FederatedUnpivotSheetConfig): sheet is FederatedUnpivotSheetConfig {\n  return 'unpivot_groups' in sheet && !!sheet.unpivot_groups && Object.keys(sheet.unpivot_groups).length > 0;\n}\n\n// Helper to get source slug from group config\nfunction getSourceSlugFromGroup(group: UnpivotGroupConfig): string | undefined {\n  if (group.source_sheet_slug) return group.source_sheet_slug;\n  if (group.source_sheet?.slug) return group.source_sheet.slug;\n  return undefined;\n}\n\n// Helper to get source slug from field config\nfunction getSourceSlugFromField(field: FederatedProperty): string | undefined {\n  if (!field.federate_config) return undefined;\n  if (field.federate_config.source_sheet_slug) return field.federate_config.source_sheet_slug;\n  if (field.federate_config.source_sheet?.slug) return field.federate_config.source_sheet.slug;\n  return undefined;\n}\n\n\nexport class FederatedSheetManager {\n  // Private instance fields\n  private recordsBySheetId = new Map<string, Flatfile.RecordData[]>();\n  private sourceMappings = new Map<string, SourceMapping[]>();\n  private dedupeConfigs = new Map<string, DedupeConfig>();\n  private sheetFilters = new Map<string, FilterConfig>(); // Target Filters\n  private virtualFieldKeys = new Map<string, Set<string>>(); // Tracks virtual keys per target sheet ID\n  private config: FederateConfig;\n  \n  constructor(config: FederateConfig) {\n    const sourceSheets = validateConfig(config); // Validates config, including virtual fields\n    this.config = config;\n    /* istanbul ignore next */\n    if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `initializing with ${sourceSheets.size} source sheets`);\n    sourceSheets.forEach(slug => {\n      this.sourceMappings.set(slug, []);\n      /* istanbul ignore next */\n      if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Registered source sheet: ${slug}`);\n    });\n    /* istanbul ignore next */\n    if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", \"initialization complete\");\n  }\n  \n  clearMappings() {\n    /* istanbul ignore next */\n    if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", \"Clearing all federated sheet mappings and data\");\n    this.recordsBySheetId.clear();\n    this.dedupeConfigs.clear();\n    this.sheetFilters.clear();\n    this.virtualFieldKeys.clear();\n    this.sourceMappings.forEach((_, slug) => this.sourceMappings.set(slug, []));\n    /* istanbul ignore next */\n    if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", \"All mappings and data cleared successfully\");\n  }\n\n  clearRecords() {\n    /* istanbul ignore next */\n    if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", \"Clearing records while keeping mappings intact\");\n    this.recordsBySheetId.clear();\n    // Re-initialize empty arrays for each sheet that has mappings\n    this.sourceMappings.forEach((mappings) => {\n      mappings.forEach((mapping) => {\n        this.recordsBySheetId.set(mapping.sheetId, []);\n      });\n    });\n    /* istanbul ignore next */\n    if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", \"Records cleared successfully\");\n  }\n  \n  hasSourceSheet(slug: string): boolean {\n    const result = this.sourceMappings.has(slug);\n    /* istanbul ignore next */\n    if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Checking if ${slug} is a source sheet: ${result ? 'yes' : 'no'}`);\n    return result;\n  }\n  \n  async createMappings(blueprint: FederatedSheetConfig | FederatedUnpivotSheetConfig, sheet: Flatfile.Sheet): Promise<void> {\n    /* istanbul ignore next */\n    if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Creating mappings for target sheet: ${sheet.slug} (${sheet.id})`);\n    \n    this.recordsBySheetId.set(sheet.id, []); // Initialize records array\n    \n    // Store Dedupe Config\n    if (blueprint.dedupe_config) {\n      this.dedupeConfigs.set(sheet.id, blueprint.dedupe_config);\n      /* istanbul ignore next */\n      if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Found dedupe configuration for sheet: ${sheet.slug}`);\n    }\n    \n    // Store Target Filters\n    const targetFilters: FilterConfig = {\n      all_fields_required: blueprint.all_fields_required,\n      any_fields_required: blueprint.any_fields_required,\n      any_fields_excluded: blueprint.any_fields_excluded,\n      field_values_required: blueprint.field_values_required,\n      field_values_excluded: blueprint.field_values_excluded\n    };\n    if (Object.values(targetFilters).some(val => val !== undefined && (Array.isArray(val) ? val.length > 0 : (typeof val === 'object' && val !== null && Object.keys(val).length > 0) ))) {\n      this.sheetFilters.set(sheet.id, targetFilters);\n      /* istanbul ignore next */\n      if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Found target filter configuration for sheet: ${sheet.slug}`);\n    }\n    \n    // Store Virtual Field Keys\n    const currentVirtualKeys = new Set<string>();\n    if (blueprint.virtualFields) {\n      blueprint.virtualFields.forEach(vf => currentVirtualKeys.add(vf.key));\n      if (currentVirtualKeys.size > 0) {\n        this.virtualFieldKeys.set(sheet.id, currentVirtualKeys);\n        /* istanbul ignore next */\n        if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Stored ${currentVirtualKeys.size} virtual field keys for sheet ${sheet.slug}: [${Array.from(currentVirtualKeys).join(', ')}]`);\n      }\n    }\n    \n    // Collect Virtual Field Mappings (source_key -> virtual_key) per source\n    const virtualFieldsBySource = new Map<string, Map<string, string>>();\n    if (blueprint.virtualFields) {\n      for (const vf of blueprint.virtualFields) {\n        const sourceSlug = getSourceSlugFromField(vf);\n        const sourceKey = vf.federate_config?.source_field_key;\n        if (sourceSlug && sourceKey) {\n          if (!virtualFieldsBySource.has(sourceSlug)) virtualFieldsBySource.set(sourceSlug, new Map());\n          virtualFieldsBySource.get(sourceSlug)!.set(sourceKey, vf.key);\n        } else {\n          /* istanbul ignore next */\n          if (this.config.debug) logWarn(\"📦 Federate Plugin Manager\", `Virtual field ${vf.key} in sheet ${sheet.slug} is missing required federate_config.`);\n        }\n      }\n    }\n    \n    // --- Create Mappings based on Sheet Type ---\n    if (isUnpivotSheet(blueprint)) {\n      // --- Unpivot Sheet Mapping ---\n      /* istanbul ignore next */\n      if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Processing unpivot groups for sheet: ${sheet.slug}`);\n      \n      const groupsBySource = new Map<string, Array<[string, UnpivotGroupConfig]>>();\n      for (const [groupName, group] of Object.entries(blueprint.unpivot_groups)) {\n        const sourceSlug = getSourceSlugFromGroup(group);\n        if (!sourceSlug) {\n          /* istanbul ignore next */\n          if (this.config.debug) logWarn(\"📦 Federate Plugin Manager\", `No valid source sheet slug found for unpivot group: ${groupName} in sheet ${sheet.slug}`);\n          continue;\n        }\n        if (!groupsBySource.has(sourceSlug)) groupsBySource.set(sourceSlug, []);\n        groupsBySource.get(sourceSlug)!.push([groupName, group]);\n        if (!this.sourceMappings.has(sourceSlug)) this.sourceMappings.set(sourceSlug, []);\n      }\n      \n      for (const [sourceSlug, unpivotGroupsForSource] of groupsBySource.entries()) {\n        const sourceMappingsList = this.sourceMappings.get(sourceSlug)!;\n        const mapping: UnpivotMapping = {\n          type: 'unpivot',\n          sheetId: sheet.id,\n          sheetSlug: sheet.slug,\n          filters: {}, // Filters applied in getRecords \n          unpivotGroups: unpivotGroupsForSource,\n          virtualFieldsMap: virtualFieldsBySource.get(sourceSlug) // Attach relevant virtual field maps\n        };\n        sourceMappingsList.push(mapping);\n        /* istanbul ignore next */\n        if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Created unpivot mapping from source ${sourceSlug} to sheet ${sheet.slug} with ${unpivotGroupsForSource.length} groups and ${mapping.virtualFieldsMap?.size ?? 0} virtual field mappings.`);\n      }\n      \n    } else { // Standard Federation Sheet\n      // --- Standard Sheet Mapping ---\n      /* istanbul ignore next */\n      if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Processing standard field mappings (real and virtual) for sheet: ${sheet.slug}`);\n      \n      const allFieldsForMapping: FederatedProperty[] = [\n        ...blueprint.fields,\n        ...(blueprint.virtualFields || [])\n      ];\n      \n      if (allFieldsForMapping.length === 0) {\n        /* istanbul ignore next */\n        if (this.config.debug) logWarn(\"📦 Federate Plugin Manager\", `Sheet ${sheet.slug} has no real or virtual fields to map.`);\n        return;\n      }\n      \n      const fieldsBySourceSheet = new Map<string, Map<string, string>>();\n      for (const field of allFieldsForMapping) {\n        const sourceSlug = getSourceSlugFromField(field);\n        const sourceKey = field.federate_config?.source_field_key;\n        \n        if (sourceSlug && sourceKey) {\n          if (!fieldsBySourceSheet.has(sourceSlug)) fieldsBySourceSheet.set(sourceSlug, new Map());\n          fieldsBySourceSheet.get(sourceSlug)!.set(sourceKey, field.key);\n          if (!this.sourceMappings.has(sourceSlug)) this.sourceMappings.set(sourceSlug, []);\n          \n          /* istanbul ignore next */\n          const fieldType = currentVirtualKeys.has(field.key) ? 'virtual' : 'real';\n          if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Mapped ${fieldType} field ${sourceKey} from ${sourceSlug} to ${field.key} in ${sheet.slug}`);\n        } else {\n          /* istanbul ignore next */\n          if (this.config.debug && field.federate_config) logWarn(\"📦 Federate Plugin Manager\", `Field ${field.key} in sheet ${sheet.slug} is missing required federate_config parts.`);\n        }\n      }\n      \n      for (const [sourceSlug, fieldsMap] of fieldsBySourceSheet) {\n        const sourceMappingsList = this.sourceMappings.get(sourceSlug)!;\n        const mapping: FieldMapping = {\n          type: 'field',\n          sheetId: sheet.id,\n          sheetSlug: sheet.slug,\n          fields: fieldsMap, // Contains real + virtual target keys\n          filters: {} // Filters applied in getRecords\n        };\n        sourceMappingsList.push(mapping);\n        /* istanbul ignore next */\n        if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Created standard field mapping from source ${sourceSlug} to sheet ${sheet.slug} with ${fieldsMap.size} fields (real + virtual)`);\n      }\n    }\n    \n    /* istanbul ignore next */\n    if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Completed mapping creation for sheet: ${sheet.slug}`);\n  }\n  \n  \n  async addRecords(sourceSlug: string, records: Flatfile.RecordWithLinks[]) {\n    if (!sourceSlug || !records || records.length === 0) {\n      /* istanbul ignore next */\n      if (this.config.debug) logWarn(\"📦 Federate Plugin Manager\", `Invalid inputs for addRecords: sourceSlug=${sourceSlug}, records count=${records?.length || 0}`);\n      return;\n    }\n    \n    /* istanbul ignore next */\n    if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Adding ${records.length} records from source sheet: ${sourceSlug}`);\n    \n    const mappings = this.sourceMappings.get(sourceSlug);\n    if (!mappings || mappings.length === 0) {\n      /* istanbul ignore next */\n      if (this.config.debug) logWarn(\"📦 Federate Plugin Manager\", `No mappings found for source sheet: ${sourceSlug}, skipping record processing.`);\n      return;\n    }\n    \n    /* istanbul ignore next */\n    if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Found ${mappings.length} target sheet mappings for source: ${sourceSlug}`);\n    \n    for (const mapping of mappings) {\n      const { sheetId, sheetSlug } = mapping;\n      /* istanbul ignore next */\n      if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Processing records for target sheet: ${sheetSlug} (${sheetId}) via source ${sourceSlug} using ${mapping.type} mapping`);\n      \n      let targetSheetRecords = this.recordsBySheetId.get(sheetId);\n      if (!targetSheetRecords) {\n        targetSheetRecords = [];\n        this.recordsBySheetId.set(sheetId, targetSheetRecords);\n      }\n      \n      const processedRecordsForSheet: Flatfile.RecordData[] = [];\n      \n      for (const record of records) {\n        if (!record || !record.values) {\n          /* istanbul ignore next */\n          if (this.config.debug) logWarn(\"📦 Federate Plugin Manager\", `Skipping invalid record object from source ${sourceSlug}`);\n          continue;\n        }\n        const sourceRecordValues = record.values as Record<string, any>;\n        \n        const processedRecords = processRecord(sourceRecordValues, sourceSlug, mapping);\n        \n        if (processedRecords.length > 0) {\n          processedRecordsForSheet.push(...processedRecords);\n        }\n      } // End loop through source records\n      \n      // Add all processed records to the target sheet's temp collection\n      if (processedRecordsForSheet.length > 0) {\n        targetSheetRecords.push(...processedRecordsForSheet);\n        /* istanbul ignore next */\n        if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Added ${processedRecordsForSheet.length} processed records (incl. virtuals) to sheet ${sheetSlug}, total count now: ${targetSheetRecords.length}`);\n        /* istanbul ignore next */} else\n        if (this.config.debug) logWarn(\"📦 Federate Plugin Manager\", `No records resulted from processing for target sheet: ${sheetSlug} from source ${sourceSlug}`);\n        \n      } // End loop through mappings\n    }\n    \n    \n    getRecords(): Map<string, Flatfile.RecordData[]> {\n      /* istanbul ignore next */\n      if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", \"Retrieving final federated records (applying post-processing and removing virtual fields)\");\n      \n      const result = new Map<string, Flatfile.RecordData[]>();\n      \n      for (const [sheetId, records] of this.recordsBySheetId) {\n        if (records.length === 0) {\n          /* istanbul ignore next */\n          if (this.config.debug) logWarn(\"📦 Federate Plugin Manager\", `Sheet ${sheetId} has no records after processing, skipping final steps.`);\n          result.set(sheetId, []);\n          continue;\n        }\n        \n        // Records contain virtual fields at this stage\n        if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Finalizing ${records.length} records (incl. virtuals) for sheet: ${sheetId}`);\n        \n        // 1. Apply Dedupe Config (operates on records containing virtual fields)\n        const dedupeConfig = this.dedupeConfigs.get(sheetId);\n        const mergedRecords = mergeRecords(records, dedupeConfig);\n        /* istanbul ignore next */\n        if (this.config.debug && dedupeConfig) logInfo(\"📦 Federate Plugin Manager\", `Applied dedupe configuration to sheet ${sheetId}, result: ${mergedRecords.length} records (incl. virtuals)`);\n        \n        // 2. Apply Target Filters (operates on records containing virtual fields)\n        let filteredRecords = mergedRecords;\n        const targetFilters = this.sheetFilters.get(sheetId);\n        if (targetFilters && Object.keys(targetFilters).length > 0) {\n          filteredRecords = filterRecords(mergedRecords, targetFilters);\n          /* istanbul ignore next */\n          if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Applied TARGET filters to sheet ${sheetId}, result: ${filteredRecords.length} records (incl. virtuals)`);\n        } else {\n          /* istanbul ignore next */\n          if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `No target filters to apply for sheet ${sheetId}.`);\n        }\n        \n        // 3. Remove Virtual Fields (Applies to ALL sheets that had virtual keys stored)\n        let finalRecords = filteredRecords;\n        const sheetVirtualKeys = this.virtualFieldKeys.get(sheetId);\n        \n        if (sheetVirtualKeys && sheetVirtualKeys.size > 0) {\n          /* istanbul ignore next */\n          if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Removing ${sheetVirtualKeys.size} virtual keys from ${finalRecords.length} records for sheet ${sheetId}: [${Array.from(sheetVirtualKeys).join(', ')}]`);\n          finalRecords = finalRecords.map(record => {\n            const newRecord = { ...record };\n            sheetVirtualKeys.forEach(key => {\n              delete newRecord[key];\n            });\n            return newRecord;\n          });\n        } else {\n          /* istanbul ignore next */\n          if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `No virtual keys defined for sheet ${sheetId}, skipping removal.`);\n        }\n        \n        result.set(sheetId, finalRecords);\n        \n        /* istanbul ignore next */\n        if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Final record count for sheet ${sheetId} (after post-processing): ${finalRecords.length}`);\n      }\n      \n      /* istanbul ignore next */\n      if (this.config.debug) logInfo(\"📦 Federate Plugin Manager\", `Returning final records for ${result.size} sheets`);\n      return result;\n    }\n    \n    // Helper to find blueprint\n    private findBlueprint(sheetId: string): FederatedSheetConfig | FederatedUnpivotSheetConfig | undefined {\n      const slug = [...this.sourceMappings.values()]\n      .flat()\n      .find(m => m.sheetId === sheetId)?.sheetSlug;\n      \n      if (!slug) {\n        /* istanbul ignore next */\n        if (this.config.debug) logWarn(\"📦 Federate Plugin Manager\", `Could not find slug for sheetId ${sheetId} to determine blueprint type.`);\n        return undefined;\n      }\n      return this.config.federated_workbook.sheets.find(s => s.slug === slug);\n    }\n  }"]}